package taskhandler

import (
	"cvevulner/models"
	"cvevulner/util"
	"fmt"
	"github.com/astaxie/beego/logs"
)

type HookData struct {
	Id         int64
	HookUrl    string
	CreateTime string
	Password   string
	ResultCode int
	ProjectId  int64
}

func ProcHookEvent(hookurl, owner, accessToken, pwd, gaussOwner, gitGaussToken string) error {
	hookId := int64(0)
	count := 5
	for ; ; {
		iHook, ihOk := models.GetAllIssueHook(hookId, count, 1)
		if ihOk && len(iHook) > 0 {
			for _, ih := range iHook {
				var hd []HookData
				if ih.Owner == gaussOwner {
					accessToken = gitGaussToken
				}
				GetDepositHooks(accessToken, ih.Owner, ih.Repo, &hd)
				if len(hd) > 0 {
					PrcMutDepositHooks(accessToken, pwd, ih, hd)
				}
			}
			hookId = iHook[len(iHook)-1].Id
		} else {
			break
		}
	}
	return nil
}

func GetDepositHooks(accessToken, owner, repo string, hd *[]HookData) {
	url := fmt.Sprintf("https://gitee.com/api/v5/repos/%v/%v/hooks?access_token=%v&page=1&per_page=50", owner, repo, accessToken)
	hookData, err := util.HTTPGet(url)
	if err == nil && hookData != nil {
		for _, value := range hookData {
			if _, ok := value["id"]; !ok {
				logs.Error("hookData, err: ", ok, "url: ", url)
				continue
			}
			var hdl HookData
			hdl.Id = int64(value["id"].(float64))
			hdl.HookUrl = value["url"].(string)
			hdl.CreateTime = value["created_at"].(string)
			hdl.Password = value["password"].(string)
			hdl.ProjectId = int64(value["project_id"].(float64))
			hdl.ResultCode = int(value["result_code"].(float64))
			*hd = append(*hd, hdl)
		}
	}
}

func PrcMutDepositHooks(accessToken, pwd string, ihk models.IssueHooks, hd []HookData) {
	for _, hdk := range hd {
		if ihk.HookUrl == hdk.HookUrl && hdk.Password == pwd {
			if hdk.Id != ihk.HookId && ihk.HookId > 0 {
				go DeleteDepositHooks(accessToken, ihk.Owner, ihk.Repo, hdk.Id)
			}
		}
	}
}

func DeleteDepositHooks(accessToken, owner, repo string, hookId int64) {
	url := fmt.Sprintf("https://gitee.com/api/v5/repos/%v/%v/hooks/%v", owner, repo, hookId)
	requestBody := fmt.Sprintf(`{
					"access_token": "%s"
					}`, accessToken)
	util.HTTPDelCom(url, requestBody)
}
