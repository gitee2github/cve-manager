#!/usr/bin/python
# -*- coding: UTF-8 -*-

################################################################################
#
# Copyright (c) 2020 openEuler.org, Inc. All Rights Reserved
#
################################################################################
"""
Interaction between file and mysql data

Authors: xiaojianghui
Date:    10/22/2020 11:01 AM
"""

import xlrd
import os
import shutil



def crawlUrls(fileName):
    """
        Read excel table content and CVE score
    :param fileName: excel file
    :return urls: list
    """
    urls = []
    try:
        data = xlrd.open_workbook("./newexcels/" + fileName)
        # Find the vulnerability report information table by name
        table_one = data.sheet_by_name("Sheet1")
        # Get the maximum number of rows of all data
        row_number = table_one.nrows
        for i in range(1, row_number):
            url = "https://nvd.nist.gov/vuln/detail/" + str(table_one.cell(i, 2).value)
            urls.append(url)
    except IndexError as e:
        print("Subscript out of bounds", e)
    except xlrd.XLRDError as e:
        print("Form not found：Sheet1", e)
    return urls


def crawlCveNum(fileName):
    """
        CVE number
    :param fileName:excel file
    :return cveNum:list
    """
    cveNum = []
    try:
        data = xlrd.open_workbook("./newexcels/" + fileName)
        # Find the vulnerability report information table by name
        table_one = data.sheet_by_name("Sheet1")
        # Get the maximum number of rows of all data
        row_number = table_one.nrows
        for i in range(1, row_number):
            cveNumOne = str(table_one.cell(i, 2).value)
            cveNum.append(cveNumOne)
    except IndexError as e:
        print("Subscript out of bounds", e)
    except xlrd.XLRDError as e:
        print("Form not found：Sheet1", e)
    return cveNum


def crawlCveVersion(fileName):
    """
        CVE version
    :param fileName:excel file
    :return cveVersion:list
    """
    cveVersion = []
    try:
        data = xlrd.open_workbook("./newexcels/" + fileName)
        table_one = data.sheet_by_name("Sheet1")
        row_number = table_one.nrows
        for i in range(1, row_number):
            cveVersionOne = table_one.cell(i, 1).value
            cveVersion.append(cveVersionOne)
    except IndexError as e:
        print("Subscript out of bounds", e)
    except xlrd.XLRDError as e:
        print("Form not found：Sheet1", e)
    return cveVersion


def crawlScopeType(fileName):
    """
        CVE type
    :param fileName:excel file
    :return scopeType:list
    """
    scopeType = []
    try:
        data = xlrd.open_workbook("./newexcels/" + fileName)
        table_one = data.sheet_by_name("Sheet1")
        row_number = table_one.nrows
        for i in range(1, row_number):
            scopeTypeOne = 'v' + str(table_one.cell(i, 4).value)
            scopeType.append(scopeTypeOne)
    except IndexError as e:
        print("Subscript out of bounds", e)
    except xlrd.XLRDError as e:
        print("Form not found：Sheet1", e)
    return scopeType


def crawlPackName(fileName):
    """
        Component
    :param fileName:excel file
    :return packName:string
    """
    packName = []
    try:
        data = xlrd.open_workbook("./newexcels/" + fileName)
        table_one = data.sheet_by_name("Sheet1")
        row_number = table_one.nrows
        for i in range(1, row_number):
            packNameOne = table_one.cell(i, 0).value
            packName.append(packNameOne)
    except IndexError as e:
        print("Subscript out of bounds", e)
    except xlrd.XLRDError as e:
        print("Form not found：Sheet1", e)
    return packName


def move_file(fileName):
    """
        excel After the analysis is complete, call the function to move to the oldexcels folder for backup
    :param fileName:excel file
    """
    try:
        f_src = os.path.join("./newexcels/" + fileName)
        if not os.path.isdir("./oldexcels/"):
            os.mkdir("./oldexcels/")
        f_dst = os.path.join("./oldexcels/" + fileName)
        shutil.move(f_src, f_dst)
    except SystemExit as e:
        print("move error", e)
