package models

import (
	"strings"

	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/orm"

	"cvevulner/common"
)

func GetOriginUpstream(cveNum string, ou *OriginUpstream) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream "+
		"WHERE cve_num=? order by cve_id desc limit 1", cveNum).QueryRow(ou)
	if err == nil {
		logs.Info("GetOriginUpstream, cve_origin_upstream, "+
			"cveNum: ", cveNum, ", search successful")
		return nil
	} else {
		logs.Error("GetOriginUpstream, cve_origin_upstream, "+
			"cveNum: ", cveNum, ", Query failed")
	}
	return err
}

func QueryOriginUpstreamCount() int64 {
	sql := "SELECT count(*) total FROM cve_origin_upstream where source = 0"

	res := struct {
		Total int64
	}{}
	o := orm.NewOrm()
	err := o.Raw(sql).QueryRow(&res)
	if err != nil {
		return 0
	}
	return res.Total
}

func QueryOriginUpstream(currentPage, pageSize int) (ori []OriginUpstream) {
	startSize := (currentPage - 1) * pageSize
	o := orm.NewOrm()
	_, err := o.Raw(
		"SELECT * FROM cve_origin_upstream where source = 0 order by cve_id desc limit ? offset ?", pageSize, startSize,
	).QueryRows(&ori)
	if err != nil {
		logs.Error("GetOriginUpstream, cve_origin_upstream,failed: ", err)
	}

	return
}

func QueryOriginPackageUrl(cveid int64) (err error, list []OriginUpstreamPackageUrl) {
	o := orm.NewOrm()
	_, err = o.Raw("select * from cve_origin_upstream_package_url where cve_id = ?", cveid).QueryRows(&list)

	return
}

func GetOriginDesc(cveId int64, oud *OriginUpstreamDesc) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_desc "+
		"WHERE cve_id=?", cveId).QueryRow(oud)
	if err == nil {
		logs.Info("GetOriginDesc, cve_origin_upstream_desc, "+
			"cve_id: ", cveId, ", search successful")
		return nil
	} else {
		logs.Error("GetOriginDesc, cve_origin_upstream_desc, "+
			"cve_id: ", cveId, ", Query failed")
	}
	return err
}

func GetOriginConfig(cveId int64, ouc *OriginUpstreamConfig) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_config "+
		"WHERE cve_id=?", cveId).QueryRow(ouc)
	if err == nil {
		logs.Info("GetOriginConfig, cve_origin_upstream_config, "+
			"cve_id: ", cveId, ", search successful")
		return nil
	} else {
		logs.Error("GetOriginConfig, cve_origin_upstream_config, "+
			"cve_id: ", cveId, ", Query failed")
	}
	return err
}

func GetOriginConfigNode(configId int64, oucn *[]OriginUpstreamConfigNode) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_config_node "+
		"WHERE conf_id=?", configId).QueryRows(oucn)
	if num > 0 && err == nil {
		logs.Info("GetOriginConfigNode, cve_origin_upstream_config_node, "+
			"configId: ", configId, ", search successful")
		return num, nil
	} else {
		logs.Error("GetOriginConfigNode, cve_origin_upstream_config_node,"+
			" configId: ", configId, ", Query failed")
	}
	return 0, err
}

func GetOriginConfigNodeCpe(nodeId int64, oucnc *[]OriginUpstreamConfigNodeCpe) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_config_node_cpe "+
		"WHERE node_id=?", nodeId).QueryRows(oucnc)
	if num > 0 && err == nil {
		logs.Info("GetOriginConfigNodeCpe, cve_origin_upstream_config_node_cpe,"+
			" configId: ", nodeId, ", search successful")
		return num, nil
	} else {
		logs.Error("GetOriginConfigNodeCpe, cve_origin_upstream_config_node_cpe, "+
			"configId: ", nodeId, ", Query failed")
	}
	return 0, err
}

func GetOriginPoc(cveId int64, oup *OriginUpstreamPoc) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_poc "+
		"WHERE cve_id=?", cveId).QueryRow(oup)
	if err == nil {
		logs.Info("GetOriginPoc, cve_origin_upstream_poc, "+
			"cve_id: ", cveId, ", search successful")
		return nil
	} else {
		logs.Error("GetOriginPoc, cve_origin_upstream_poc, "+
			"cve_id: ", cveId, ", Query failed")
	}
	return err
}

func GetOriginEvent(cveId int64, oue *[]OriginUpstreamEvent) (err error) {
	o := orm.NewOrm()
	_, err = o.Raw("select * FROM cve_origin_upstream_event "+
		"WHERE cve_id=?", cveId).QueryRows(oue)
	if err == nil {
		logs.Info("GetOriginEvent, cve_origin_upstream_event, cve_id: ", cveId, ", search successful")
		return nil
	} else {
		logs.Error("GetOriginEvent, cve_origin_upstream_event, cve_id: ", cveId, ", Query failed")
	}
	return err
}

func GetOriginReference(cveId int64, our *[]OriginUpstreamReference) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_reference "+
		"WHERE cve_id=?", cveId).QueryRows(our)
	if num > 0 && err == nil {
		logs.Info("GetOriginReference, cve_origin_upstream_reference, "+
			"cve_id: ", cveId, ", search successful")
		return num, nil
	} else {
		logs.Error("GetOriginReference, cve_origin_upstream_reference, "+
			"cve_id: ", cveId, ", Query failed")
	}
	return 0, err
}

func GetOriginVulType(cveId int64, ouv *[]OriginUpstreamVulType) (err error) {
	o := orm.NewOrm()
	_, err = o.Raw("select * FROM cve_origin_upstream_vul_type "+
		"WHERE cve_id=?", cveId).QueryRows(ouv)
	if err == nil {
		logs.Info("GetOriginVulType, cve_origin_upstream_vul_type, "+
			"cve_id: ", cveId, ", search successful")
		return nil
	} else {
		logs.Error("GetOriginVulType, cve_origin_upstream_vul_type, "+
			"cve_id: ", cveId, ", Query failed")
	}
	return err
}

func GetOriginFixSuggest(cveId int64, ouf *OriginUpstreamFixSuggest) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_fix_suggest "+
		"WHERE cve_id=?", cveId).QueryRow(ouf)
	if err == nil {
		logs.Info("GetOriginFixSuggest, cve_origin_upstream_fix_suggest, "+
			"cve_id: ", cveId, ", search successful")
		return nil
	} else {
		logs.Error("GetOriginFixSuggest, cve_origin_upstream_fix_suggest, "+
			"cve_id: ", cveId, ", Query failed")
	}
	return err
}

func GetOriginFixSuggestRef(fixId int64, oufr *[]OriginUpstreamFixSuggestRef) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_fix_suggest_ref "+
		"WHERE fix_id=?", fixId).QueryRows(oufr)
	if num > 0 && err == nil {
		logs.Info("GetOriginFixSuggestRef, cve_origin_upstream_fix_suggest_ref, "+
			"fix_id: ", fixId, ", search successful")
		return num, nil
	} else {
		logs.Error("GetOriginFixSuggestRef, cve_origin_upstream_fix_suggest_ref, "+
			"fix_id: ", fixId, ", Query failed")
	}
	return 0, err
}

func GetOriginFixSuggestRefTag(fixRefId int64, oufrt *[]OriginUpstreamFixSuggestRefTag) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_fix_suggest_ref_tag "+
		"WHERE fix_ref_id=?", fixRefId).QueryRows(oufrt)
	if num > 0 && err == nil {
		logs.Info("GetOriginFixSuggestRefTag, cve_origin_upstream_fix_suggest_ref_tag, "+
			"fix_ref_id: ", fixRefId, ", search successful")
		return num, nil
	} else {
		logs.Error("GetOriginFixSuggestRefTag, cve_origin_upstream_fix_suggest_ref_tag, "+
			"fix_ref_id: ", fixRefId, ", Query failed")
	}
	return 0, err
}

func (ou OriginUpstream) ToDetailSummary() (cod common.CveOriginData) {
	cod.Ids = ou.CveNum
	cod.CveNum = ou.CveNum
	cod.UpdateType = ou.UpdateType
	cod.PackName = strings.Split(ou.PackName, ",")
	cod.CvePackName = strings.Split(ou.CvePackName, ",")
	cod.Title = ou.Title
	cod.CnnvdID = ou.CnnvdID
	cod.CnvdID = ou.CnvdID
	cod.PublishedDate = ou.PublishedDate
	cod.VulStatus = ou.VulStatus
	cod.GetTime = ou.FirstPerTime
	cod.EndGetTime = ou.FirstGetTime
	cod.AffectProduct = strings.Split(ou.AffectProduct, ",")
	cod.Credibility = ou.Credibility
	cod.Version = ou.Version
	var oud OriginUpstreamDesc
	oudErr := GetOriginDesc(ou.CveId, &oud)
	if oudErr == nil && oud.DescId > 0 {
		cod.Description.EnDesc = oud.EnDescription
		cod.Description.ZhDesc = oud.ZhDescription
	}
	var ouc OriginUpstreamConfig
	oucErr := GetOriginConfig(ou.CveId, &ouc)
	if oucErr == nil && ouc.ConfId > 0 {
		var oucn []OriginUpstreamConfigNode
		var cf common.CveConfigurations
		oucnNum, oucnErr := GetOriginConfigNode(ouc.ConfId, &oucn)
		if oucnNum > 0 && oucnErr == nil {
			for _, nodes := range oucn {
				var cn common.ConfNodes
				cn.Operator = nodes.Operator
				var oucnc []OriginUpstreamConfigNodeCpe
				oucncNum, oucncErr := GetOriginConfigNodeCpe(nodes.NodeId, &oucnc)
				if oucncNum > 0 && oucncErr == nil {
					for _, cpe := range oucnc {
						var cnc common.NodeCpe
						cnc.Vulnerable = cpe.Vulnerable
						cnc.CpeMatchString = cpe.CpeMatchString
						cnc.Cpe23Uri = cpe.Cpe23Uri
						cn.Cpe = append(cn.Cpe, cnc)
					}
				}
				cf.Nodes = append(cf.Nodes, cn)
			}
		}
		cod.Configurations = cf
	}
	cveImpact, ok := QueryCveImpact(ou.CveId)
	if ok && cveImpact.ImpactId > 0 {
		cveScore, ok := QueryCveScore(cveImpact.ImpactId, "v3")
		if ok && cveScore.ScoreId > 0 {
			cveScV3, ok := QueryCveCvssV3(cveScore.ScoreId)
			if ok && cveScV3.V3Id > 0 {
				cod.Impact.BaseMetricV3.CvssV3.Version = cveScV3.Version
				cod.Impact.BaseMetricV3.CvssV3.VectorString = cveScV3.VectorString
				cod.Impact.BaseMetricV3.CvssV3.AttackComplexity = cveScV3.AttackComplexity
				cod.Impact.BaseMetricV3.CvssV3.AttackVector = cveScV3.AttackVector
				cod.Impact.BaseMetricV3.CvssV3.AvailabilityImpact = cveScV3.AvailabilityImpact
				cod.Impact.BaseMetricV3.CvssV3.BaseSeverity = cveScV3.BaseSeverity
				cod.Impact.BaseMetricV3.CvssV3.UserInteraction = cveScV3.UserInteraction
				cod.Impact.BaseMetricV3.CvssV3.BaseScore = cveScV3.BaseScore
				cod.Impact.BaseMetricV3.CvssV3.PrivilegesRequired = cveScV3.PrivilegesRequired
				cod.Impact.BaseMetricV3.CvssV3.ConfidentialityImpact = cveScV3.ConfidentialityImpact
				cod.Impact.BaseMetricV3.CvssV3.IntegrityImpact = cveScV3.IntegrityImpact
				cod.Impact.BaseMetricV3.CvssV3.Scope = cveScV3.Scope
				cod.Impact.BaseMetricV3.ExploitabilityScore = cveScV3.ExploitabilityScore
				cod.Impact.BaseMetricV3.ImpactScore = cveScV3.ImpactScore
			}
		}
		cveScoreV2, ok2 := QueryCveScore(cveImpact.ImpactId, "v2")
		if ok2 && cveScoreV2.ScoreId > 0 {
			cveScV2, okV2 := QueryCveCvssV2(cveScoreV2.ScoreId)
			if okV2 && cveScV2.V2Id > 0 {
				cod.Impact.BaseMetricV2.CvssV2.VectorString = cveScV2.VectorString
				cod.Impact.BaseMetricV2.CvssV2.AccessComplexity = cveScV2.AccessComplexity
				cod.Impact.BaseMetricV2.CvssV2.AvailabilityImpact = cveScV2.AvailabilityImpact
				cod.Impact.BaseMetricV2.CvssV2.Authentication = cveScV2.Authentication
				cod.Impact.BaseMetricV2.CvssV2.Version = cveScV2.Version
				cod.Impact.BaseMetricV2.CvssV2.BaseScore = cveScV2.BaseScore
				cod.Impact.BaseMetricV2.CvssV2.IntegrityImpact = cveScV2.IntegrityImpact
				cod.Impact.BaseMetricV2.CvssV2.ConfidentialityImpact = cveScV2.ConfidentialityImpact
				cod.Impact.BaseMetricV2.CvssV2.AccessVector = cveScV2.AccessVector
				cod.Impact.BaseMetricV2.AcInsufInfo = cveScV2.AcInsufInfo
				cod.Impact.BaseMetricV2.UserInteractionRequired = cveScV2.UserInteractionRequired
				cod.Impact.BaseMetricV2.Severity = cveScV2.Severity
				cod.Impact.BaseMetricV2.ObtainUserPrivilege = cveScV2.ObtainUserPrivilege
				cod.Impact.BaseMetricV2.ObtainAllPrivilege = cveScV2.ObtainAllPrivilege
				cod.Impact.BaseMetricV2.ImpactScore = cveScV2.ImpactScore
				cod.Impact.BaseMetricV2.ExploitabilityScore = cveScV2.ExploitabilityScore
				cod.Impact.BaseMetricV2.ObtainOtherPrivilege = cveScV2.ObtainOtherPrivilege
			}
		}
	}
	var oup OriginUpstreamPoc
	oupErr := GetOriginPoc(ou.CveId, &oup)
	if oupErr == nil && oup.PocId > 0 {
		cod.Poc.Url = oup.Url
		cod.Poc.Date = oup.Date
		cod.Poc.Source = oup.Source
		cod.Poc.Path = oup.Path
		cod.Poc.Desc = oup.Desc
		cod.Poc.Dbindex = oup.Dbindex
	}
	var oue []OriginUpstreamEvent
	oueErr := GetOriginEvent(ou.CveId, &oue)
	if oueErr == nil && len(oue) > 0 {
		for _, v := range oue {
			cod.Event = append(cod.Event, common.CveEvent{
				Title:       v.Title,
				Date:        v.Date,
				Description: v.Description,
				Url:         v.Url,
			})
		}
	}
	var our []OriginUpstreamReference
	ourNum, ourErr := GetOriginReference(ou.CveId, &our)
	if ourErr == nil && ourNum > 0 {
		for _, reference := range our {
			var crd common.CveReferenceData
			crd.Url = reference.Url
			crd.Name = reference.Name
			crd.Tags = append(crd.Tags, reference.Tags)
			crd.Refsource = reference.Refsource
			crd.SourceUrl = reference.SourceUrl
			cod.ReferenceData = append(cod.ReferenceData, crd)
		}
	}
	var ouv []OriginUpstreamVulType
	ouvErr := GetOriginVulType(ou.CveId, &ouv)
	if ouvErr == nil && len(ouv) > 0 {
		for _, v := range ouv {
			cod.VulType = append(cod.VulType, common.CveVulType{
				Cwe: v.Cwe,
				En:  v.EnDesc,
				Zh:  v.ZhDesc,
			})
		}

	}
	var ouf OriginUpstreamFixSuggest
	oufErr := GetOriginFixSuggest(ou.CveId, &ouf)
	if oufErr == nil && ouf.FixId > 0 {
		var oufr []OriginUpstreamFixSuggestRef
		oufrNum, oufErr := GetOriginFixSuggestRef(ouf.FixId, &oufr)
		if oufErr == nil && oufrNum > 0 {
			for _, ref := range oufr {
				var fr common.FixReferences
				fr.Refsource = ref.Refsource
				fr.Name = ref.Name
				fr.Url = ref.Url
				var oufrt []OriginUpstreamFixSuggestRefTag
				oufrtNum, oufrtErr := GetOriginFixSuggestRefTag(ref.FixRefId, &oufrt)
				if oufrtErr == nil && oufrtNum > 0 {
					for _, tag := range oufrt {
						fr.Tags = append(fr.Tags, tag.Name)
					}
				}
				cod.FixSuggest.References = append(cod.FixSuggest.References, fr)
			}
		}
		cod.FixSuggest.Detail = ouf.Detail
	}
	patch, err := QueryCveOriginPatchInfo(ou.CveNum)
	if err == nil && len(patch) > 0 {
		for _, v := range patch {
			cod.Patch = append(cod.Patch, common.CveOriginPatch{
				Package: v.Package, FixVersion: v.FixVersion, FixPatch: v.FixPatch, BreakPatch: v.BreakPatch, Source: v.Source, Branch: v.Branch,
			})
		}
	}

	pErr, list := QueryOriginPackageUrl(ou.CveId)
	if pErr == nil && len(list) > 0 {
		p := common.CvePackageUrl{}
		for _, l := range list {
			switch l.Source {
			case common.GO:
				p.GO = append(p.GO, common.PackageUrlField{
					Purl: l.Purl, VersionStartIncluding: l.VersionStartIncluding,
					VersionStartExcluding: l.VersionStartExcluding, VersionEndExcluding: l.VersionEndExcluding,
					VersionEndIncluding: l.VersionEndIncluding,
				})
			case common.Gemnasium:
				p.Gemnasium = append(p.Gemnasium, common.PackageUrlField{
					Purl: l.Purl, VersionStartIncluding: l.VersionStartIncluding,
					VersionStartExcluding: l.VersionStartExcluding, VersionEndExcluding: l.VersionEndExcluding,
					VersionEndIncluding: l.VersionEndIncluding,
				})
			case common.GithubAdvistory:
				p.GithubAdvistory = append(p.GithubAdvistory, common.PackageUrlField{
					Purl: l.Purl, VersionStartIncluding: l.VersionStartIncluding,
					VersionStartExcluding: l.VersionStartExcluding, VersionEndExcluding: l.VersionEndExcluding,
					VersionEndIncluding: l.VersionEndIncluding,
				})
			case common.Huntr:
				p.Huntr = append(p.Huntr, common.PackageUrlField{
					Purl: l.Purl, VersionStartIncluding: l.VersionStartIncluding,
					VersionStartExcluding: l.VersionStartExcluding, VersionEndExcluding: l.VersionEndExcluding,
					VersionEndIncluding: l.VersionEndIncluding,
				})

			}
		}

		cod.PackageUrl = p
	}

	return
}
