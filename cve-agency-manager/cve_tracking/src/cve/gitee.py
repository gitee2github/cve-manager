#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
This is a helper script for working with gitee.com
"""
import json
import os
import urllib
import urllib.error
import urllib.parse
import urllib.request

from fake_useragent import UserAgent

from .logger import logger
from .settings import GITEE_AUTH


class Gitee:
    """
    Gitee is a helper class to abstract gitee.com api
    """

    user_agent = UserAgent(
        path=os.path.join(os.path.dirname(__file__), "user-agent.json")
    )

    def __init__(self):
        self.token = {"access_token": os.getenv(GITEE_AUTH["token"]), "user": os.getenv(GITEE_AUTH["account"])}

        self.headers = {"User-Agent": self.user_agent.random}
        self.src_openeuler_url = "https://gitee.com/src-openeuler/{repo}/raw/{br}/"
        self.advisor_url = "https://gitee.com/openeuler/openEuler-Advisor/raw/master/"
        self.time_format = "%Y-%m-%dT%H:%M:%S%z"

    def post_gitee(self, url, values, headers=None):
        """
        POST into gitee API
        """
        if headers is None:
            headers = self.headers.copy()
        data = urllib.parse.urlencode(values).encode("utf-8")
        req = urllib.request.Request(
            url=url, data=data, headers=headers, method="POST")
        try:
            result = urllib.request.urlopen(req)
            return result.read().decode("utf-8")
        except urllib.error.HTTPError as err:
            logger.warning(
                "reuqest url: %s status code: %s  headers: %s "
                % (url, str(err.code), str(err.headers))
            )
            return False

    def create_issue_comment(self, repo, owner, number, body):
        """
        create issue comment
        """
        print('[INFO] Start to add issue comment')
        url_template = (
            "https://gitee.com/api/v5/repos/{owner}/{repo}/issues/{number}/comments"
        )
        url = url_template.format(owner=owner, repo=repo, number=number)
        values = {}
        values["access_token"] = self.token["access_token"]
        values["body"] = body
        return self.post_gitee(url, values)

    def get_gitee_json(self, url):
        """
        Get and load gitee json response
        """
        json_resp = []
        headers = self.headers.copy()
        headers["Content-Type"] = "application/json;charset=UTF-8"
        resp = self.get_gitee(url, headers)
        if resp:
            json_resp = json.loads(resp)
        return json_resp

    def get_issue_comments(self, repo, number, owner="src-openeuler"):
        """
        Get comments of specific issue
        """
        issues_url = "https://gitee.com/api/v5/repos/{owner}/{repo}/issues/{number}/comments?" \
                     "access_token={token}&page=1&per_page=50&order=asc".format(repo=repo, owner=owner, number=number,
                                                                                token=self.token["access_token"])
        return self.get_gitee_json(issues_url)

    def get_gitee(self, url, headers=None):
        """
        GET from gitee api
        """
        if headers is None:
            req = urllib.request.Request(url=url, headers=self.headers)
        else:
            req = urllib.request.Request(url=url, headers=headers)
        try:
            result = urllib.request.urlopen(req)
            return result.read().decode("utf-8")
        except urllib.error.HTTPError as e:
            logger.warning(
                "reuqest url: %s status code: %s  messages: %s "
                % (url, str(e.code), str(e.reason))
            )
            return None
        except urllib.error.URLError as e:
            logger.warning("reuqest url: %s messages: %s " %
                           (url, str(e.reason)))
            return None
