#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import os
import subprocess
from .gitee import Gitee
from .logger import logger

CURRENT_PATCH = os.path.realpath(os.path.dirname(__file__))
CLEAR = "clear"


def apply_patch(patches_path, branches):
    """
    Call the script to test compile
    :param patches_path: path of cve_patches
    :param branches: branch of source code
    :return: apply result
    """
    print('[INFO] Start to try apply patches')
    shell_file = os.path.join(os.path.dirname(CURRENT_PATCH), "shell/start.sh")
    try:
        branch_str = "master"
        if isinstance(branches, list) and branches:
            branch_str = " ".join(str(branch) for branch in branches)
        if isinstance(branches, str) and branches:
            branch_str = branches

        output = subprocess.check_output(
            [shell_file, patches_path, branch_str],
            stderr=subprocess.STDOUT,
            shell=False,
        )
        result = output.decode("utf-8")
    except subprocess.CalledProcessError as e:
        print(f'[ERROR] Failed to execute the application patch script: {str(e)}')
        result = "All branch apply failed"

    return result


def row(func):
    """
    Combine the rows of the table
    """

    def wrapper(*args, **kwargs):
        cols = func(*args, **kwargs)
        return "<tr>" + "".join([str(col) for col in cols]) + "</tr>"

    return wrapper


class Col:
    """
    Generates a cell for a row in Table
    """

    def __init__(self, val, span=0, header=False) -> None:
        self._val = val
        self._span = span
        self.header = header

    def __str__(self) -> str:
        row_span = ""
        if self._span:
            row_span = f' rowspan="{self._span}" '
        if self.header:
            return "<th>" + self._val + "</th>"

        return "<td" + row_span + ">" + self._val + "</td>"


class AutoComment:
    """
    Automatically submit the content of comments
    """

    def __init__(self, header=None) -> None:
        self._gitee = Gitee()
        self._line_feed = "\n"
        self._header = header or ["Patches URL", "Branch", "Apply Result"]

    @row
    def _row(self, cols, spans=None, header=False):
        tds = [Col(val=col, header=header) for col in cols]
        if spans:
            tds.insert(0, Col(val=spans[0], span=spans[1]))

        return tds

    def _create_table(self, header, body: dict):
        rows = [self._row(cols=header, header=True)]
        for index, key in enumerate(body["apply_result"]):
            row_val = [key, body["apply_result"][key]]
            if index == 0:
                rows.append(
                    self._row(
                        cols=row_val,
                        spans=(self._line_feed.join(body["urls"]), len(body)),
                    )
                )
                continue
            rows.append(self._row(cols=row_val))

        return "<table>" + self._line_feed.join(rows) + "</table>"

    def comment(self, number, body, repo, owner="src-openeuler", table=True):
        """Comments on PR"""
        comments = self._gitee.get_issue_comments(repo=repo, number=number, owner=owner)
        if comments:
            if all([header in str(comments) for header in self._header]):
                print('[WARNING] There are already relevant comments')
                logger.info(
                    "Issue %s in repository %s already has a fixed comment content ."
                    % (number, repo)
                )
                return
        if table:
            body = self._create_table(header=self._header, body=body)
            body += self._line_feed * 2 + "> 说明：补丁链接和应用结果仅供初步排查参考，实际应用请人工再次确认。"
        self._gitee.create_issue_comment(
            repo=repo, number=number, body=body, owner=owner
        )
