package task

import (
	"cvevulner/common"
	"cvevulner/models"
	"cvevulner/taskhandler"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/logs"
	"strconv"
	"strings"
)

// Verify whether the issue on gitee has been deleted
func CheckIssueIsExist() error {
	defer common.Catchs()
	prnum, prErr := beego.AppConfig.Int("crontab::prcnum")
	if prErr != nil {
		prnum = 100
	}
	// Get the data source of the table
	err := taskhandler.ProcIssueIsExists(prnum)
	logs.Info(err)
	return err
}

// Statistics of issues created in different communities, uncreated issues are created
func CommunityIssueStatist() error {
	// Get the configuration file
	yamlConfigTable := beego.AppConfig.String("cve::yaml_config_table")
	tableList := strings.Split(yamlConfigTable, ",")
	localList := make([][]string, 0)
	cyc := models.GetCommunityYamlConfigAll()
	if len(cyc) > 0 {
		for _, c := range cyc {
			taskhandler.StatistCommunityIssue(c)
		}
	}
	for _, tab := range tableList {
		flag := false
		tabList := strings.Split(tab, ":")
		for _, c := range cyc {
			if tabList[0] == c.TableName {
				flag = true
				break
			}
		}
		if !flag {
			if len(tabList) >1 {
				localList = append(localList, tabList)
			}
		}
	}
	if len(localList) > 0 {
		for _, lc := range localList {
			organizationID, _ := strconv.Atoi(lc[1])
			cyc := models.CommunityYamlConfig{TableName: lc[0], OrganizationID: int8(organizationID)}
			num, err := models.InsertCommunityYamlConfig(&cyc)
			if err != nil {
				logs.Error("num: ", num, ",err: ", err)
			}
		}
	}
	return nil
}
