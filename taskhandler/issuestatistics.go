package taskhandler

import (
	"cvevulner/common"
	"cvevulner/models"
	"fmt"
	"github.com/360EntSecGroup-Skylar/excelize/v2"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/logs"
	"os"
	"path/filepath"
	"strconv"
)

const sheetName = "CVE_list"

type IssueStr struct {
	cveCount     int64
	HighCveCount int64
	CurIndex     int64
}

func GetIssueData(beforeDate, prcnum int, templateId int64) ([]models.IssueTemplate, error) {
	beforeTime := common.GetSpecialDate(beforeDate)
	it, err := models.QueryIssueTemplateByTime(beforeTime, prcnum, templateId, 3)
	return it, err
}

func createExcel() (string, string) {
	// File storage directory
	dir := beego.AppConfig.String("fileDir")
	excelName := "CVE_ISSUE_" + common.GetCurDate() + ".xlsx"
	excelPath := filepath.Join(dir, excelName)
	//Determine whether the file exists
	ok, _ := PathExists(excelPath)
	if ok {
		os.Remove(excelPath)
	}
	xlsx := excelize.NewFile()
	index := xlsx.NewSheet(sheetName)
	sheetTileMap := make(map[string]string)
	sheetTileMap["A1"] = "序号"
	sheetTileMap["B1"] = "issueID"
	sheetTileMap["C1"] = "issue标题"
	sheetTileMap["D1"] = "issue责任人"
	sheetTileMap["E1"] = "issue状态"
	sheetTileMap["F1"] = "issue创建时间"
	sheetTileMap["G1"] = "issue所属仓库"
	sheetTileMap["H1"] = "CVSS评分"
	sheetTileMap["I1"] = "评分级别"
	for k, v := range sheetTileMap {
		xlsx.SetCellValue(sheetName, k, v)
	}
	xlsx.SetActiveSheet(index)
	err := xlsx.SaveAs(excelPath)
	if err != nil {
		logs.Error(err)
	}
	return excelPath, dir
}

func ReadWriteExcel(excelPath, owner string, iss []models.IssueTemplate, is *IssueStr) int64 {
	file, openErr := excelize.OpenFile(excelPath)
	if openErr != nil {
		logs.Error("fail to open the file, ", excelPath)
		return 0
	}
	var templateId = int64(0)
	for _, its := range iss {
		templateId = its.TemplateId
		cveData := procIssueData(its, is, owner)
		if len(cveData) > 0 {
			rows, sheetErr := file.GetRows(sheetName)
			if sheetErr != nil {
				logs.Error(sheetErr)
			}
			idx := len(rows) + 1
			axis := fmt.Sprintf("A%d", idx)
			setErr := file.SetSheetRow(sheetName, axis, &cveData)
			if setErr != nil {
				logs.Error("setErr: ", setErr)
			}
		}
	}
	fileErr := file.SaveAs(excelPath)
	if fileErr != nil {
		logs.Error("Failed to save file, ", fileErr)
	}
	return templateId
}

func procIssueData(its models.IssueTemplate, is *IssueStr, owner string) []interface{} {
	cveData := make([]interface{}, 0)
	if its.Owner != owner || len(its.IssueNum) < 2 {
		return cveData
	}
	is.CurIndex += 1
	is.cveCount += 1
	cveData = append(cveData, is.CurIndex)
	cveData = append(cveData, its.IssueNum)
	cveData = append(cveData, its.CveNum)
	cveData = append(cveData, its.Assignee)
	cveData = append(cveData, IssueStateConversion(its.Status))
	cveData = append(cveData, common.TimeConverStr(its.CreateTime.String()[:19]))
	cveData = append(cveData, its.Owner+"/"+its.OwnedComponent)
	cveData = append(cveData, its.NVDScore)
	cveData = append(cveData, openEulerScoreProc(its.NVDScore))
	if its.NVDScore >= 7 {
		is.HighCveCount += 1
	}
	return cveData
}

func pressFileZip(excelPath, dir string) string {
	totalFileSlice := make([]string, 0)
	totalFileSlice = append(totalFileSlice, excelPath)
	zipFileName := "CVE_ISSUE_" + common.GetCurDate() + ".zip"
	zipFileName = filepath.Join(dir, zipFileName)
	zipErr := ZipFiles(zipFileName, totalFileSlice, dir, dir)
	if zipErr != nil {
		logs.Error("File compression failed: err: ", zipErr)
	}
	return zipFileName
}

func IssueStatistics(beforeDate, prcnum int, owner string) error {
	excelPath, _ := createExcel()
	fileSlice := make([]string, 0)
	templateId := int64(0)
	var is IssueStr
	for {
		it, err := GetIssueData(beforeDate, prcnum, templateId)
		if err != nil {
			return err
		}
		logs.Info("it==>", it)
		if len(it) == 0 {
			break
		}
		templateId = ReadWriteExcel(excelPath, owner, it, &is)
	}
	//zipFileName := pressFileZip(excelPath, dir)
	zipFileName := excelPath
	cBody := fmt.Sprintf("hi all: \r\n 当前未解决漏洞有" + strconv.FormatInt(is.cveCount, 10) + "个, 其中" +
		strconv.FormatInt(is.HighCveCount, 10) + "个7分以上漏洞, 详情见附件, 请在20号之前解决, 优先解决7分以上CVE. \r\n" +
		"已经分析完毕的issue请maintainer尽快关掉, 否则影响数据统计; 提交PR时要关联issue, 若CVE在之前PR解决, 请PR提交人编辑PR信息将issue关联上. \r\n")
	sendError := SendEmail(zipFileName, 2, cBody)
	if sendError != nil {
		logs.Error("SendEmail, sendErr: ", sendError)
		return sendError
	}
	fileSlice = append(fileSlice, excelPath)
	fileSlice = append(fileSlice, zipFileName)
	DelFile(fileSlice)
	return nil
}
