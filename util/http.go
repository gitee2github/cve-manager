package util

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/astaxie/beego/logs"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type RequestInfo struct {
	Url string
	Data map[string]string //post要传输的数据，必须key value必须都是string
	DataInterface map[string]interface{}
}


func HttpPatch(url string, requestBody string) (map[string]interface{}, error){
	req, err := http.NewRequest("PATCH", url, bytes.NewBuffer([]byte(requestBody)))
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		logs.Error("Post request 失败, err: ", err, "body: ", requestBody, "url:", url)
		return nil, err
	}
	defer resp.Body.Close()
	logs.Info("response Status:", resp.Status, "url: ", url)
	logs.Info("response Headers:", resp.Header, "url: ", url)
	status, _ := strconv.Atoi(resp.Status)
	if status > 300 {
		logs.Error("Patch request 失败, err: ", err, "body: ", requestBody, "url:", url)
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	fmt.Println("response Body:", string(body))
	if err != nil {
		logs.Error("post 返回失败, err: ", err, "body: ", requestBody)
		return nil, err
	}
	logs.Info("post 返回成功!, body: ", string(body))
	var iss map[string]interface{}
	err =json.Unmarshal(body, &iss)
	if err != nil {
		logs.Error(err, string(body))
		return nil, err
	}
	logs.Info(iss)
	return iss, nil
}


func HttpPost(url string, requestBody string) (map[string]interface{}, error){
	req, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(requestBody)))
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		logs.Error("Post request 失败, err: ", err, "body: ", requestBody, "url:", url)
		return nil, err
	}
	defer resp.Body.Close()
	logs.Info("response Status:", resp.Status, "url: ", url)
	logs.Info("response Headers:", resp.Header, "url: ", url)
	status, _ := strconv.Atoi(resp.Status)
	if status > 300 {
		logs.Error("Post request 失败, err: ", err, "body: ", requestBody, "url:", url)
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	fmt.Println("response Body:", string(body))
	if err != nil {
		logs.Error("post 返回失败, err: ", err, "body: ", requestBody)
		return nil, err
	}
	logs.Info("post 返回成功!, body: ", string(body))
	var iss map[string]interface{}
	err =json.Unmarshal(body, &iss)
	if err != nil {
		logs.Error(err, string(body))
		return nil, err
	}
	logs.Info(iss)
	return iss, nil
}

func HttpPost1(url string, requestBody string) ([]map[string]interface{}, error){
	req, err := http.NewRequest("POST", url, bytes.NewBuffer([]byte(requestBody)))
	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		logs.Error("Post request 失败, err: ", err, "body: ", requestBody, "url:", url)
		return nil, err
	}
	defer resp.Body.Close()
	logs.Info("response Status:", resp.Status, "url: ", url)
	logs.Info("response Headers:", resp.Header, "url: ", url)
	status, _ := strconv.Atoi(resp.Status)
	if status > 300 {
		logs.Error("Post request 失败, err: ", err, "body: ", requestBody, "url:", url)
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	fmt.Println("response Body:", string(body))
	if err != nil {
		logs.Error("post 返回失败, err: ", err, "body: ", requestBody)
		return nil, err
	}
	logs.Info("post 返回成功!, body: ", string(body))
	var iss []map[string]interface{}
	err =json.Unmarshal(body, &iss)
	if err != nil {
		logs.Error(err, string(body))
		return nil, err
	}
	logs.Info(iss)
	return iss, nil
}

func PostUrlEncoded(this RequestInfo)([]byte,error){
	client := &http.Client{}
	//post要提交的数据
	DataUrlVal := url.Values{}
	for key,val := range this.Data{
		DataUrlVal.Add(key,val)
	}
	req,err := http.NewRequest("POST",this.Url,strings.NewReader(DataUrlVal.Encode()))
	if err != nil{
		logs.Error(err)
		return nil,err
	}
	//伪装头部
	req.Header.Set("Accept","application/json")
	req.Header.Add("Content-Type","application/x-www-form-urlencoded")

	//提交请求
	resp,err := client.Do(req)
	defer resp.Body.Close()
	if err != nil{
		logs.Error(err)
		return nil,err
	}
	//读取返回值
	result,err := ioutil.ReadAll(resp.Body)
	if err != nil{
		logs.Error(err)
		return nil,err
	}
	logs.Info(string(result))
	return result,nil
}


func HttpGet(url string) ([]map[string]interface{}, error){
	resp, err := http.Get(url)
	if err != nil {
		logs.Error("get error, url:", url, "error: ", err)
		return nil, err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		logs.Error("url:", url, ",err: ", err)
		return nil, err
	}else {
		logs.Info("body: \n", string(body), "url: ", url)
	}
	var col []map[string]interface{}
	err =json.Unmarshal(body, &col)
	if err != nil {
		logs.Error(err)
	}
	return col, nil
}

func HttpGetCom(url string) ([]byte, error){
	resp, err := http.Get(url)
	if err != nil {
		logs.Error("get error, url:", url, "error: ", err)
		return nil, err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		logs.Error(err)
		return nil, err
	}else {
		logs.Info("body: \n", string(body), "url: ", url)
	}
	return body, nil
}