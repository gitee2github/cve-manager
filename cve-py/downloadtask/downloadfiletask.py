#!/usr/bin/python
# -*- coding: UTF-8 -*-

################################################################################
#
# Copyright (c) 2020 openEuler.org, Inc. All Rights Reserved
#
################################################################################
"""
Data update provides download tasks

Authors: xiaojianghui
Date:    10/22/2020 11:01 AM
"""

import requests
import lxml.etree as etree
import shutil
import os


def handle_one():
    """
        download file
    """
    if os.listdir("./newexcels"):
        shutil.rmtree("./newexcels")
        os.mkdir("./newexcels")
    url = 'https://gitee.com/openeuler/cve-manager/tree/master/cve-py/newexcels'
    try:
        r = requests.get(url)
    except requests.exceptions.ConnectionError:
        print('ConnectionError')
        return
    except requests.exceptions.ChunkedEncodingError:
        print('ChunkedEncodingError')
        return
    html = etree.HTML(r.content)
    if len(html):
        i = 3
        while True:
            try:
                name = html.xpath("//div[@id='tree-slider']/div[{}]/div[1]/a/@title".format(i))[0]
            except IndexError:
                break
            if name.endswith(".xls") or name.endswith(".xlsx"):
                url = "https://gitee.com/openeuler/cve-manager/raw/master/cve-py/newexcels/" + name
                r = requests.get(url)
                print(r.status_code)
                with open("./newexcels/" + name, 'wb') as code:
                    code.write(r.content)
                    code.close()
            if os.path.exists("./newexcels/" + name):
                print("Successfully downloaded the cve manual data form:" + name)
            i += 2


def handle_two():
    """
        download file
    """
    if os.listdir("./mappingexcels"):
        shutil.rmtree("./mappingexcels")
        os.mkdir("./mappingexcels")
    url = 'https://gitee.com/openeuler/cve-manager/tree/master/cve-py/mappingexcels'
    try:
        r = requests.get(url)
    except requests.exceptions.ConnectionError:
        print('ConnectionError')
        return
    except requests.exceptions.ChunkedEncodingError:
        print('ChunkedEncodingError')
        return
    html = etree.HTML(r.content)
    if len(html):
        i = 3
        while True:
            try:
                name = html.xpath("//div[@id='tree-slider']/div[{}]/div[1]/a/@title".format(i))[0]
            except IndexError:
                break
            if name.endswith(".xls") or name.endswith(".xlsx"):
                url = "https://gitee.com/openeuler/cve-manager/raw/master/cve-py/mappingexcels/" + name
                r = requests.get(url)
                print(r.status_code)
                with open("./mappingexcels/" + name, 'wb') as code:
                    code.write(r.content)
            if os.path.exists("./mappingexcels/" + name):
                print("Download the package name mapping table successfully:" + name)
            i += 2


def handle_three():
    """
        download file
    """
    if os.listdir("./import_excels"):
        shutil.rmtree("./import_excels")
        os.mkdir("./mappingexcels")
    url = 'https://gitee.com/openeuler/cve-manager/tree/master/cve-py/import_excels'
    try:
        r = requests.get(url)
    except requests.exceptions.ConnectionError:
        print('ConnectionError')
        return
    except requests.exceptions.ChunkedEncodingError:
        print('ChunkedEncodingError')
        return
    html = etree.HTML(r.content)
    if len(html):
        i = 3
        while True:
            try:
                name = html.xpath("//div[@id='tree-slider']/div[{}]/div[1]/a/@title".format(i))[0]
            except IndexError:
                break
            if name.endswith(".xls") or name.endswith(".xlsx"):
                url = "https://gitee.com/openeuler/cve-manager/raw/master/cve-py/import_excels/" + name
                r = requests.get(url)
                print(r.status_code)
                with open("./import_excels/" + name, 'wb') as code:
                    code.write(r.content)
            if os.path.exists("./import_excels/" + name):
                print("Download the Package whitelist table successfully:" + name)
            i += 2
