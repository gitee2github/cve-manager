# -*- coding: UTF-8 -*-
#爬虫封装
import requests
from lxml import etree
from datetime import datetime
def crawling(url):

    try:
        content=requests.get(url).content
    except requests.exceptions.ConnectionError:
        print('ConnectionError')
    except requests.exceptions.ChunkedEncodingError:
        print('ChunkedEncodingError')
    except:
        print('Unfortunitely -- An Unknow Error Happened')
    html=etree.HTML(content)
    try:
        if html.xpath('/html/body/div[2]/div[2]/div/table/tr/td/div/div[1]/div[3]/div[2]/div[1]/div[2]/span/span/a/text()') == ["N/A"] or \
                        html.xpath('/html/body/div[2]/div[2]/div/table/tr/td/div/div[1]/div[2]/div[2]/div[1]/div[2]/span/span/a/text()')==["N/A"] or \
                        html.xpath('/html/body/div[2]/div[2]/div[2]/table/tr/td/div/div[1]/div[4]/div[2]/div[1]/div[2]/span/span/a/text()') == ['N/A']:
           if html.xpath("/html/body/div[2]/div[2]/div/table/tr/td/div/div[1]/div[2]/div[3]/div[1]/div[2]/span/span/a/text()")==["N/A"]or \
                   html.xpath("/html/body/div[2]/div[2]/div/table/tbody/tr/td/div/div[1]/div[2]/div[2]/div[1]/div[2]/span/span/a/text()")==["N/A"]:
               #            /html/body/div[2]/div[2]/div/table/tr/td/div/div[1]/div[2]/div[2]/div[1]/div[2]/span/span/a
               nvdScore = cveLevel = cveDesc = repairTime = vectorValue = attackVector = accessVector = attackComplexity = accessComplexity = \
                   privilegeRequired = userInteraction = scope = confidentiality = integrity = availability = authentication = None
               print("此漏洞链接无数据")
           else:
               scoreType="v2.0"
               element = html.xpath('//*[@id="nistV2MetricHidden"]/@value')
               cveDesc = str(html.xpath('//*[@id="vulnDetailTableView"]/tr/td/div/div[1]/p[1]/text()')[0])
               repairTime = str(html.xpath('//*[@id="vulnDetailTableView"]/tr/td/div/div[2]/div/span[1]/text()')[0])
               # print(repairTime,type(repairTime))
               repairTime =datetime.strptime(repairTime,'%m/%d/%Y')
               # print(repairTime)
               # print(type(repairTime))
               html1 = etree.HTML(element[0])
               cveLevel = str(html1.xpath('//*[@data-testid="vuln-cvssv2-base-score-severity"]/text()')[0].strip())

               nvdScore = str(html1.xpath('//*[@data-testid="vuln-cvssv2-base-score"]/text()')[0].strip())

               vectorValue = str(html1.xpath('//*[@data-testid="vuln-cvssv2-vector"]/text()')[0]).replace("(","").replace(")","").strip()

               accessVector = str(html1.xpath('//*[@data-testid="vuln-cvssv2-av"]/text()')[0].strip())

               accessComplexity = str(html1.xpath('//*[@data-testid="vuln-cvssv2-ac"]/text()')[0].strip())

               authentication = str(html1.xpath('//*[@data-testid="vuln-cvssv2-au"]/text()')[0].strip())

               confidentiality = str(html1.xpath('//*[@data-testid="vuln-cvssv3-c"]/text()')[0].strip())

               integrity = str(html1.xpath('//*[@data-testid="vuln-cvssv2-i"]/text()')[0].strip())

               availability = str(html1.xpath('//*[@data-testid="vuln-cvssv2-a"]/text()')[0].strip())




               attackVector=attackComplexity=privilegeRequired=userInteraction=scope=None


        elif html.xpath('/html/body/div[2]/div[2]/div/table/tr/td/div/div[1]/div[3]/div[2]/div[1]/div[2]/span/span/a/text()') == []and \
                        html.xpath('/html/body/div[2]/div[2]/div/table/tr/td/div/div[1]/div[2]/div[2]/div[1]/div[2]/span/span/a/text()')==[]:
            nvdScore=cveLevel=cveDesc=repairTime=vectorValue=attackVector=accessVector=attackComplexity=accessComplexity= \
            privilegeRequired=userInteraction=scope=confidentiality=integrity=availability=authentication=scoreType=None
            print("此漏洞链接not found")
        else:
            scoreType="v3.0"
            cveDesc = str(html.xpath('//*[@id="vulnDetailTableView"]/tr/td/div/div[1]/p[1]/text()')[0])

            repairTime = html.xpath('//*[@id="vulnDetailTableView"]/tr/td/div/div[2]/div/span[1]/text()')[0]
            # print(repairTime,type(repairTime))
            repairTime =datetime.strptime(repairTime,'%m/%d/%Y')
            # print(repairTime)
            # print(type(repairTime))
            if html.xpath('//*[@id="nistV3MetricHidden"]/@value') != []:
                element = html.xpath('//*[@id="nistV3MetricHidden"]/@value')

            else:
                element = html.xpath('//*[@id="cnaV3MetricHidden"]/@value')
            html1 = etree.HTML(element[0])
            cveLevel = str(html1.xpath('//*[@data-testid="vuln-cvssv3-base-score-severity"]/text()')[0].strip())

            nvdScore = str(html1.xpath('//*[@data-testid="vuln-cvssv3-base-score"]/text()')[0].strip())

            vectorValue = str(html1.xpath('//*[@data-testid="vuln-cvssv3-vector"]/text()')[0]).replace("(",'').replace(')','').strip()

            attackVector = str(html1.xpath('//*[@data-testid="vuln-cvssv3-av"]/text()')[0].strip())

            attackComplexity = str(html1.xpath('//*[@data-testid="vuln-cvssv3-ac"]/text()')[0].strip())

            privilegeRequired = str(html1.xpath('//*[@data-testid="vuln-cvssv3-pr"]/text()')[0].strip())

            userInteraction = str(html1.xpath('//*[@data-testid="vuln-cvssv3-ui"]/text()')[0].strip())

            scope = str(html1.xpath('//*[@data-testid="vuln-cvssv3-s"]/text()')[0].strip())

            confidentiality = str(html1.xpath('//*[@data-testid="vuln-cvssv3-c"]/text()')[0].strip())

            integrity = str(html1.xpath('//*[@data-testid="vuln-cvssv3-i"]/text()')[0].strip())

            availability = str(html1.xpath('//*[@data-testid="vuln-cvssv3-a"]/text()')[0].strip())



            accessVector=accessComplexity=authentication=None
    except IndexError as e:
        print("下标越界",e)
    except UnboundLocalError as e:
        print("未找到标签",e)
    list = [nvdScore, cveLevel, cveDesc, repairTime, vectorValue, attackVector, accessVector, attackComplexity,accessComplexity,
            privilegeRequired, userInteraction, scope, confidentiality, integrity, availability, authentication,scoreType]

    return list

