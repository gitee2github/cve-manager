#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
This is a helper script for working with gitee.com
"""
import sys
import os
import json
import base64
import urllib
import urllib.request
import urllib.parse
import urllib.error
from datetime import datetime
from fake_useragent import UserAgent
import yaml
from .logger import logger
from .settings import GITEE_AUTH


class Gitee:
    """
    Gitee is a helper class to abstract gitee.com api
    """

    user_agent = UserAgent(
        path=os.path.join(os.path.dirname(__file__), "user-agent.json")
    )

    def __init__(self):
        self.token = {"access_token": os.getenv(GITEE_AUTH["token"]), "user": os.getenv(GITEE_AUTH["account"])}

        self.headers = {"User-Agent": self.user_agent.random}
        self.src_openeuler_url = "https://gitee.com/src-openeuler/{repo}/raw/{br}/"
        self.advisor_url = "https://gitee.com/openeuler/openEuler-Advisor/raw/master/"
        self.time_format = "%Y-%m-%dT%H:%M:%S%z"

    def post_gitee(self, url, values, headers=None):
        """
        POST into gitee API
        """
        if headers is None:
            headers = self.headers.copy()
        data = urllib.parse.urlencode(values).encode("utf-8")
        req = urllib.request.Request(
            url=url, data=data, headers=headers, method="POST")
        try:
            result = urllib.request.urlopen(req)
            return result.read().decode("utf-8")
        except urllib.error.HTTPError as err:
            logger.warning(
                "reuqest url: %s status code: %s  headers: %s "
                % (url, str(err.code), str(err.headers))
            )
            return False

    def fork_repo(self, repo, owner="src-openeuler"):
        """
        Fork repository in gitee
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}/forks"
        url = url_template.format(owner=owner, repo=repo)
        values = {}
        values["access_token"] = self.token["access_token"]
        return self.post_gitee(url, values)

    def create_issue(
        self,
        repo,
        version="",
        branch="master",
        owner="src-openeuler",
        title=None,
        body=None,
    ):
        """
        Create issue in gitee
        """
        title = title or "Upgrade {pkg} to {ver} in {br}".format(
            pkg=repo, ver=version, br=branch
        )
        body = (
            body
            or """This issue is automatically created by openEuler-Advisor.
               Please check the correspond PR is accepted before close it.
               Thanks.
               Yours openEuler-Advisor."""
        )
        return self._post_issue(repo, title, body, owner=owner)

    def create_issue_comment(self, repo, owner, number, body):
        """
        create issue comment
        """
        url_template = (
            "https://gitee.com/api/v5/repos/{owner}/{repo}/issues/{number}/comments"
        )
        url = url_template.format(owner=owner, repo=repo, number=number)
        values = {}
        values["access_token"] = self.token["access_token"]
        values["body"] = body
        return self.post_gitee(url, values)

    def get_reviewers(self, repo, owner="src-openeuler"):
        """
        Get reviewers of pkg
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{pkg}/collaborators"
        url = url_template.format(owner=owner, pkg=repo)
        return self.get_gitee_dict(url)

    def create_pr(
        self,
        repo,
        version="",
        issue=None,
        title=None,
        branch="master",
        owner="src-openeuler",
        body=None,
    ):
        """
        Create PR in gitee
        """
        # assignees = ""
        # reviewer_info = self.get_reviewers(repo)
        # if reviewer_info:
        #     reviewer_list = json.loads(reviewer_info)
        #     assignees = ",".join(reviewer["login"]
        #                          for reviewer in reviewer_list)
        url_template = "https://gitee.com/api/v5/repos/{owner}/{pkg}/pulls"
        url = url_template.format(owner=owner, pkg=repo)
        values = {}
        values["access_token"] = self.token["access_token"]
        values["title"] = title or "Upgrade {pkg} to {ver}".format(
            pkg=repo, ver=version
        )
        values["head"] = "{hd}:{br}".format(hd=self.token["user"], br=branch)
        values["base"] = branch
        # values["assignees"] = assignees
        if issue:
            values["issue"] = issue
        values["body"] = (
            body
            or """This is a automatically created PR by openEuler-Advisor.
                         Please be noted that it's not throughly tested.
                         Review carefully before accept this PR.
                         Thanks.
                         Yours openEuler-Advisor."""
        )
        return self.post_gitee(url, values)

    def create_pr_comment(self, repo, number, body, owner="src-openeuler"):
        """
        Post comment to the given specific PR
        """
        url_template = (
            "https://gitee.com/api/v5/repos/{owner}/{repo}/pulls/{number}/comments"
        )
        url = url_template.format(owner=owner, repo=repo, number=number)
        values = {}
        values["access_token"] = self.token["access_token"]
        values["body"] = body
        return self.post_gitee(url, values)

    def get_gitee(self, url, headers=None):
        """
        GET from gitee api
        """
        if headers is None:
            req = urllib.request.Request(url=url, headers=self.headers)
        else:
            req = urllib.request.Request(url=url, headers=headers)
        try:
            result = urllib.request.urlopen(req)
            return result.read().decode("utf-8")
        except urllib.error.HTTPError as e:
            logger.warning(
                "reuqest url: %s status code: %s  messages: %s "
                % (url, str(e.code), str(e.reason))
            )
            return None
        except urllib.error.URLError as e:
            logger.warning("reuqest url: %s messages: %s " %
                           (url, str(e.reason)))
            return None

    def get_pr(self, repo, num, owner="src-openeuler"):
        """
        Get detailed information of the given specific PR
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}/pulls/{number}"
        url = url_template.format(owner=owner, repo=repo, number=num)
        return self.get_gitee_json(url)

    def get_gitee_json(self, url):
        """
        Get and load gitee json response
        """
        json_resp = []
        headers = self.headers.copy()
        headers["Content-Type"] = "application/json;charset=UTF-8"
        resp = self.get_gitee(url, headers)
        if resp:
            json_resp = json.loads(resp)
        return json_resp

    def get_branch_info(self, branch):
        """
        Get upgrade branch info
        """
        upgrade_branches_url = (
            self.advisor_url + "advisors/helper/upgrade_branches.yaml"
        )
        resp = self.get_gitee(upgrade_branches_url)
        if not resp:
            print("ERROR: upgrade_branches.yaml may not exist.")
            sys.exit(1)
        branches_info = yaml.load(resp, Loader=yaml.Loader)
        for br_info in branches_info["branches"]:
            if branch == br_info["name"]:
                return br_info
        print("WARNING: Don't support branch: {} in auto-upgrade.".format(branch))
        sys.exit(1)

    def get_spec_exception(self, repo):
        """
        Get well known spec file exception
        """
        specfile_exception_url = (
            self.advisor_url + "advisors/helper/specfile_exceptions.yaml"
        )
        resp = self.get_gitee(specfile_exception_url)
        if not resp:
            print("ERROR: specfile_exceptions.yaml may not exist.")
            sys.exit(1)
        excpt_list = yaml.load(resp, Loader=yaml.Loader)
        if repo in excpt_list:
            return excpt_list[repo]
        return None

    def get_version_exception(self):
        """
        Get version recommend exceptions
        """
        version_exception_url = (
            self.advisor_url + "advisors/helper/version_exceptions.yaml"
        )
        resp = self.get_gitee(version_exception_url)
        if not resp:
            print("ERROR: version_exceptions.yaml may not exist.")
            sys.exit(1)
        excpt = yaml.load(resp, Loader=yaml.Loader)
        return excpt

    def get_spec(self, pkg, branch="master"):
        """
        Get openeuler spec file for specific package
        """
        specurl = self.src_openeuler_url + "{repo}.spec"
        specurl = specurl.format(repo=pkg, br=branch)
        excpt = self.get_spec_exception(pkg)
        if excpt:
            specurl = urllib.parse.urljoin(
                specurl, os.path.join(excpt["dir"], excpt["file"])
            )
        resp = self.get_gitee(specurl)
        return resp

    def get_yaml(self, pkg):
        """
        Get upstream yaml metadata for specific package
        """
        yamlurl = self.advisor_url + "upstream-info/{}.yaml".format(pkg)
        resp = self.get_gitee(yamlurl)
        if not resp:
            yamlurl = self.src_openeuler_url + "{repo}.yaml"
            yamlurl = yamlurl.format(repo=pkg, br="master")
            resp = self.get_gitee(yamlurl)
            if not resp:
                print(
                    "WARNING: {}.yaml can't be found in upstream-info and repo.".format(
                        pkg
                    )
                )
        return resp

    def get_community(self, repo):
        """
        Get yaml data from community repo
        """
        yamlurl = (
            "https://gitee.com/api/v5/repos/openeuler/community/contents/"
            "repository/{repo}.yaml".format(repo=repo)
        )
        resp = self.get_gitee_json(yamlurl)
        resp_str = base64.b64decode(resp["content"])
        return resp_str

    def get_issues(self, pkg, prj="src-openeuler"):
        """
        List all open issues of pkg
        """
        issues_url = "https://gitee.com/api/v5/repos/{prj}/{pkg}/issues?".format(
            prj=prj, pkg=pkg
        )
        parameters = "state=open&sort=created&direction=desc&page=1&per_page=20"
        return self.get_gitee_json(issues_url + parameters)

    def get_issue_comments(self, repo, number, owner="src-openeuler"):
        """
        Get comments of specific issue
        """
        issues_url = "https://gitee.com/api/v5/repos/{owner}/{repo}/issues/{number}/comments?page=1&per_page=50&order=asc".format(
            repo=repo, owner=owner, number=number
        )
        return self.get_gitee_json(issues_url)

    def get_issue_merged_branches(self, issue_id, repo, owner="src-openeuler"):
        """
        Get merged branches of specific issue
        """
        issues_url = "https://gitee.com/api/v5/repos/{owner}/issues/{number}/pull_requests?".format(
            owner=owner, number=issue_id
        )

        param = "&repo={}".format(repo)
        return self.get_gitee_dict(issues_url, param)

    def _post_issue(self, pkg, title, body, owner="src-openeuler"):
        """
        Post new issue
        """
        issues_url = "https://gitee.com/api/v5/repos/{owner}/issues".format(
            owner=owner)
        parameters = {}
        parameters["access_token"] = self.token["access_token"]
        parameters["repo"] = pkg
        parameters["title"] = title
        parameters["body"] = body
        return self.post_gitee(issues_url, parameters)

    def post_issue_comment(self, pkg, number, comment, prj="src-openeuler"):
        """
        Post comment of issue
        """
        issues_url = (
            "https://gitee.com/api/v5/repos/{prj}/{pkg}/issues/{number}/"
            "comments".format(prj=prj, pkg=pkg, number=number)
        )
        parameters = {}
        parameters["access_token"] = self.token["access_token"]
        parameters["body"] = comment
        self.post_gitee(issues_url, parameters)

    def get_gitee_datetime(self, time_string):
        """
        Get datetime of gitee
        """
        result = datetime.strptime(time_string, self.time_format)
        return result.replace(tzinfo=None)

    def get_gitee_dict(self, url, param=""):
        url += param
        token_param = "access_token={}".format(self.token["access_token"])
        separator = "?"
        if param:
            separator = "&"
        url += separator + token_param
        return self.get_gitee_json(url)

    def get_contributors(self, repo, owner):
        """
        Get contributors of owner/repo
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}/contributors"
        url = url_template.format(owner=owner, repo=repo)
        return self.get_gitee_dict(url)

    def get_branches(self, repo, owner):
        """
        Get branches of owner/repo
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}/branches"
        url = url_template.format(owner=owner, repo=repo)
        return self.get_gitee_dict(url)

    def get_commits(
        self, repo, owner, sha="", author="", since="", until="", page=1, per_page=20
    ):
        """
        Get commits of owner/repo
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}/commits"
        url = url_template.format(owner=owner, repo=repo)
        param = "?page={}&per_page={}".format(page, per_page)
        if sha:
            param += "&sha={}".format(sha)
        if author:
            param += "&author={}".format(author)
        if since:
            param += "&since={}".format(since)
        if until:
            param += "&until={}".format(until)
        return self.get_gitee_dict(url, param)

    def get_one_commit(self, repo, sha, owner):
        """
        Get one commit of owner/repo
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}/commits/{sha}"
        url = url_template.format(owner=owner, repo=repo, sha=sha)
        return self.get_gitee_dict(url)

    def get_pr_list(
        self, repo, owner, head="", base="", state="all", page=1, per_page=20
    ):
        """
        Get PR list of owner/repo
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}/pulls"
        url = url_template.format(owner=owner, repo=repo)
        param = "?state={}&sort=created&direction=desc&page={}&per_page={}".format(
            state, page, per_page
        )
        if head:
            param += "&head={}".format(head)
        if base:
            param += "&base={}".format(base)
        return self.get_gitee_dict(url, param)

    def get_pr_comments(self, repo, number, owner, page=1, per_page=20):
        """
        Get PR comments of owner/repo
        """
        url_template = (
            "https://gitee.com/api/v5/repos/{owner}/{repo}/pulls/{number}/comments"
        )
        url = url_template.format(owner=owner, repo=repo, number=number)
        param = "?page={}&per_page={}".format(page, per_page)
        return self.get_gitee_dict(url, param)

    def get_repos(self, org, repo_type, page=1, per_page=20):
        """
        Get repos of org
        """
        url_template = "https://gitee.com/api/v5/orgs/{org}/repos"
        url = url_template.format(org=org)
        param = "?type={}&page={}&per_page={}".format(
            repo_type, page, per_page)
        return self.get_gitee_dict(url, param)

    def get_repo(self, repo, owner):
        """
        Get repo
        """
        url_template = "https://gitee.com/api/v5/repos/{owner}/{repo}"
        url = url_template.format(owner=owner, repo=repo)
        return self.get_gitee(url)
