#!/usr/bin/python
# -*- coding: UTF-8 -*-

################################################################################
#
# Copyright (c) 2021 openEuler.org, Inc. All Rights Reserved
#
################################################################################
"""
Supplemental cve information

Authors: zhangjianjun
Date:    1/19/2021 11:01 AM
"""

from tabletask import crawltask
from dbConnecttion.MysqlConn import Mysql
import time
import datetime


def query_cve_data(mysql):
    """
    Find cve with missing necessary fields
    """
    before_date = (datetime.date.today() -
                   datetime.timedelta(days=90)).strftime("%Y-%m-%d %H:%M:%S")
    score_sql = "select cve_id,cve_num from cve_score " \
                "where nvd_score = 0 and create_time >= %s"
    val = (before_date,)
    cve_list = []
    score_result = mysql.getMany(score_sql, val)
    if score_result and len(score_result) > 0:
        for sc in score_result:
            center_sql = "select cve_num, pack_name, cve_version from " \
                         "cve_vuln_center where cve_id = %s and cve_num = %s"
            center_val = (sc["cve_id"], sc["cve_num"])
            center_result = mysql.getOne(center_sql, center_val)
            if center_result:
                cve_list.append(center_result)
    cve_desc_sql = "select cve_num, pack_name, cve_version from " \
                   "cve_vuln_center where cve_desc = %s and create_time >= %s"
    center_val = ("", before_date)
    center_result = mysql.getMany(cve_desc_sql, center_val)
    if center_result and len(center_result) > 0:
        for ce in center_result:
            cve_list.append(ce)
    print(cve_list)
    return cve_list


def update_cve(url, result_dict, cve, mysql):
    """
    update data
    """
    cve_num = str(cve["cve_num"]).strip()
    cve_version = str(cve["cve_version"]).strip()
    pack_name = str(cve["pack_name"]).strip()
    # Crawler web data
    crawl_list = crawltask.crawling(url)
    print(crawl_list)
    # Determine whether the database content is the latest data
    if crawl_list[0]:
        if str(result_dict["nvd_score"]) == str(crawl_list[0]) \
                and str(result_dict["vector_value"]) == str(crawl_list[4]):
            if result_dict['cve_status'] in [3, 4, 7]:
                print("update data:" + cve_num)
                update_time = str(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
                try:
                    sql = "update cve_origin_excel set nvd_score=%s, cve_level=%s, cve_desc=%s, " \
                          "repair_time=%s, vector_value=%s, attack_vector=%s, access_vector=%s, " \
                          "attack_complexity=%s, access_complexity=%s, privilege_required=%s, " \
                          "user_interaction=%s, scope=%s, confidentiality=%s, integrity=%s, " \
                          "availability=%s, authentication=%s, cve_status=%s, update_time=%s " \
                          "where cve_num=%s and pack_name = %s and cve_version = %s"
                    val = (
                        crawl_list[0], crawl_list[1], crawl_list[2], crawl_list[3], crawl_list[4],
                        crawl_list[5],
                        crawl_list[6], crawl_list[7], crawl_list[8], crawl_list[9],
                        crawl_list[10], crawl_list[11], crawl_list[12], crawl_list[13], crawl_list[14],
                        crawl_list[15], 1, update_time, cve_num, pack_name, cve_version)
                    mysql.update(sql, val)
                    mysql.dispose()
                except IndexError as e:
                    mysql.dispose(0)
                    print("Subscript out of bounds", e)
            else:
                print("The database is the latest data:" + cve_num)
        else:
            print("update data:" + cve_num)
            update_time = str(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
            try:
                sql = "update cve_origin_excel set nvd_score=%s, cve_level=%s, cve_desc=%s, " \
                      "repair_time=%s, vector_value=%s, attack_vector=%s, access_vector=%s, " \
                      "attack_complexity=%s, access_complexity=%s, privilege_required=%s, " \
                      "user_interaction=%s, scope=%s, confidentiality=%s, integrity=%s, " \
                      "availability=%s, authentication=%s, cve_status=%s, update_time=%s, " \
                      "score_type=%s " \
                      "where cve_num=%s and pack_name = %s and cve_version = %s"
                val = (
                    crawl_list[0], crawl_list[1], crawl_list[2], crawl_list[3], crawl_list[4],
                    crawl_list[5], crawl_list[6], crawl_list[7], crawl_list[8], crawl_list[9],
                    crawl_list[10], crawl_list[11], crawl_list[12], crawl_list[13], crawl_list[14],
                    crawl_list[15], 1, update_time, crawl_list[16],
                    cve_num, pack_name, cve_version)
                mysql.update(sql, val)
                mysql.dispose()
            except IndexError as e:
                print("Subscript out of bounds", e)
                mysql.dispose(0)
    else:
        print("error: ", result_dict)


def insert_cve(url, cve, mysql):
    """
    insert data
    """
    cve_num = str(cve["cve_num"]).strip()
    cve_version = str(cve["cve_version"]).strip()
    pack_name = str(cve["pack_name"]).strip()
    create_time = update_time = str(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    delete_time = None
    # State 0 means new, 1 means modified
    cve_status = 1
    try:
        listx = crawltask.crawling(url)
        if listx[2] is None or \
                len(listx[2]) < 2 or \
                listx[0] is None or \
                listx[0] == 0:
            print("The data does not exist and will not be processed temporarily", listx)
            return
        sql = "INSERT INTO cve_origin_excel (cve_num, cve_url, cve_version, pack_name, score_type, " \
              "nvd_score, cve_level, cve_desc, repair_time, vector_value, attack_vector, " \
              "access_vector, attack_complexity, access_complexity, privilege_required, " \
              "user_interaction, scope, confidentiality, integrity, availability, " \
              "authentication, cve_status, " \
              "create_time, update_time, delete_time) " \
              "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, " \
              "%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
        val = (
            cve_num, url, cve_version, pack_name, listx[16], listx[0], listx[1], listx[2], listx[3],
            listx[4],
            listx[5], listx[6], listx[7], listx[8], listx[9], listx[10], listx[11], listx[12],
            listx[13],
            listx[14], listx[15], cve_status, create_time, update_time, delete_time)
        mysql.insertOne(sql, val)
        mysql.dispose()
    except IndexError as e:
        print("Subscript out of bounds", e)
        mysql.dispose(0)


def supplement_cve():
    """
    1. Find cve with missing necessary fields;
    2. Go to the CVE official website to find the CVE information;
    3. Fill in the corresponding table again;
    return None
    """
    mysql = Mysql()
    cve_list = query_cve_data(mysql)
    if cve_list is not None and len(cve_list) > 0:
        for cve in cve_list:
            cve_num = str(cve["cve_num"]).strip()
            cve_version = str(cve["cve_version"]).strip()
            pack_name = str(cve["pack_name"]).strip()
            url = "https://nvd.nist.gov/vuln/detail/" + cve_num
            sql = "select * from cve_origin_excel where " \
                  "cve_num= %s and pack_name = %s and cve_version = %s"
            val = (cve_num, pack_name, cve_version)
            result_dict = mysql.getOne(sql, val)
            # Determine whether CVE exists in the database
            if result_dict:
                if result_dict["cve_desc"] is None or \
                        len(result_dict["cve_desc"]) < 2 or \
                        result_dict["nvd_score"] is None or \
                        result_dict["nvd_score"] == 0:
                    pass
                    # update_cve(url, result_dict, cve, mysql)
                else:
                    sql = "update cve_origin_excel set cve_status = %s " \
                          "where cve_num= %s and pack_name = %s and cve_version = %s"
                    val = (1, cve_num, pack_name, cve_version)
                    mysql.update(sql, val)
                    mysql.dispose()
            else:
                insert_cve(url, cve, mysql)
            sql = "select * from cve_spec_error where cve_num = %s and " \
                  "cve_owner = %s and pack_name = %s"
            val = (cve_num, "src-openEuler", pack_name)
            result_spec_error = mysql.getOne(sql, val)
            if result_spec_error:
                print("过滤,修改status为6：{}".format(cve_num))
                sql = "update cve_origin_excel set cve_desc = %s, cve_status = %s " \
                      "where cve_num= %s and pack_name = %s and cve_version = %s"
                val = (result_spec_error["cve_desc"], 6, cve_num, pack_name, cve_version)
                mysql.update(sql, val)
                mysql.dispose()
    mysql.close()
