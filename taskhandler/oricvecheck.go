package taskhandler

import (
	"cvevulner/common"
	"cvevulner/models"
	"github.com/astaxie/beego/logs"
)

func CheckCveOriginData(prcnum int) (string, error) {
	defer common.Catchs()
	//var os []models.OriginUpstream
	count := 0
	ok := models.UpdateOriginExistTemp()
	if !ok {
		logs.Info("UpdateOriginExistTemp, 没有数据需要处理")
		return "", nil
	}
	for {
		os, num, err := models.QueryOriginCveE(prcnum)
		if err != nil || num == 0{
			logs.Info("当前无异常cve原始数据处理, err: ", err,
				", 处理时间范围: beforetime: ",
				"curtime: ", common.GetCurTime())
			break
		}
		logs.Info("总共有: ", num, "条数据需要处理, ", os)
		ch := make(chan int, len(os))
		for i, cveData := range os {
			count = count + 1
			logs.Info("当前正常解析第： ", count, "条数据,i:", i, ", cvenum: ", cveData.Ids)
			go func() {
				gits, ok := models.QueryCveOpeneulerdata(cveData.PackName, cveData.Version)
				if !ok {
					models.UpdateOriginExist(common.GetCurTime(), cveData.PackName, cveData.Version, cveData.CveId, 0)
					logs.Info("不存在，还原: ", cveData, ", gits: ", gits)
				} else {
					models.UpdateOriginExist(common.GetCurTime(), cveData.PackName, cveData.Version, cveData.CveId, 1)
					logs.Info("加入到cve漏洞中: ", cveData, ", gits: ", gits)
				}
				ch <- i
			}()
		}
		for i :=0; i < cap(ch); i++ {
			<- ch
		}
		close(ch)
	}
	return "", nil
}
