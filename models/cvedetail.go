package models

import (
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/orm"
)

func GetOriginUpstream(cveNum string, ou *OriginUpstream) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream WHERE cve_num=? order by cve_id desc limit 1", cveNum).QueryRow(ou)
	if err == nil {
		logs.Info("cve_origin_upstream cveNum: ", cveNum, " 查询成功")
		return nil
	} else {
		logs.Error("cve_origin_upstream cveNum: ", cveNum, " 不存在")
	}
	return err
}

func GetOriginDesc(cveId int64, oud *OriginUpstreamDesc) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_desc WHERE cve_id=?", cveId).QueryRow(oud)
	if err == nil {
		logs.Info("cve_origin_upstream_desc cve_id: ", cveId, " 查询成功")
		return nil
	} else {
		logs.Error("cve_origin_upstream_desc cve_id: ", cveId, " 不存在")
	}
	return err
}

func GetOriginConfig(cveId int64, ouc *OriginUpstreamConfig) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_config WHERE cve_id=?", cveId).QueryRow(ouc)
	if err == nil {
		logs.Info("cve_origin_upstream_config cve_id: ", cveId, " 查询成功")
		return nil
	} else {
		logs.Error("cve_origin_upstream_config cve_id: ", cveId, " 不存在")
	}
	return err
}

func GetOriginConfigNode(configId int64, oucn *[]OriginUpstreamConfigNode) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_config_node WHERE conf_id=?", configId).QueryRows(oucn)
	if num > 0 && err == nil {
		logs.Info("cve_origin_upstream_config_node configId: ", configId, " 查询成功")
		return num, nil
	} else {
		logs.Error("cve_origin_upstream_config_node configId: ", configId, " 不存在")
	}
	return 0, err
}

func GetOriginConfigNodeCpe(nodeId int64, oucnc *[]OriginUpstreamConfigNodeCpe) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_config_node_cpe WHERE node_id=?", nodeId).QueryRows(oucnc)
	if num > 0 && err == nil {
		logs.Info("cve_origin_upstream_config_node_cpe configId: ", nodeId, " 查询成功")
		return num, nil
	} else {
		logs.Error("cve_origin_upstream_config_node_cpe configId: ", nodeId, " 不存在")
	}
	return 0, err
}

func GetOriginPoc(cveId int64, oup *OriginUpstreamPoc) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_poc WHERE cve_id=?", cveId).QueryRow(oup)
	if err == nil {
		logs.Info("cve_origin_upstream_poc cve_id: ", cveId, " 查询成功")
		return nil
	} else {
		logs.Error("cve_origin_upstream_poc cve_id: ", cveId, " 不存在")
	}
	return err
}

func GetOriginEvent(cveId int64, oue *OriginUpstreamEvent) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_event WHERE cve_id=?", cveId).QueryRow(oue)
	if err == nil {
		logs.Info("cve_origin_upstream_event cve_id: ", cveId, " 查询成功")
		return nil
	} else {
		logs.Error("cve_origin_upstream_event cve_id: ", cveId, " 不存在")
	}
	return err
}

func GetOriginReference(cveId int64, our *[]OriginUpstreamReference) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_reference WHERE cve_id=?", cveId).QueryRows(our)
	if num > 0 && err == nil {
		logs.Info("cve_origin_upstream_reference cve_id: ", cveId, " 查询成功")
		return num, nil
	} else {
		logs.Error("cve_origin_upstream_reference cve_id: ", cveId, " 不存在")
	}
	return 0, err
}

func GetOriginVulType(cveId int64, ouv *OriginUpstreamVulType) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_vul_type WHERE cve_id=?", cveId).QueryRow(ouv)
	if err == nil {
		logs.Info("cve_origin_upstream_vul_type cve_id: ", cveId, " 查询成功")
		return nil
	} else {
		logs.Error("cve_origin_upstream_vul_type cve_id: ", cveId, " 不存在")
	}
	return err
}

func GetOriginFixSuggest(cveId int64, ouf *OriginUpstreamFixSuggest) (err error) {
	o := orm.NewOrm()
	err = o.Raw("select * FROM cve_origin_upstream_fix_suggest WHERE cve_id=?", cveId).QueryRow(ouf)
	if err == nil {
		logs.Info("cve_origin_upstream_fix_suggest cve_id: ", cveId, " 查询成功")
		return nil
	} else {
		logs.Error("cve_origin_upstream_fix_suggest cve_id: ", cveId, " 不存在")
	}
	return err
}

func GetOriginFixSuggestRef(fixId int64, oufr *[]OriginUpstreamFixSuggestRef) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_fix_suggest_ref WHERE fix_id=?", fixId).QueryRows(oufr)
	if num > 0 && err == nil {
		logs.Info("cve_origin_upstream_fix_suggest_ref fix_id: ", fixId, " 查询成功")
		return num, nil
	} else {
		logs.Error("cve_origin_upstream_fix_suggest_ref fix_id: ", fixId, " 不存在")
	}
	return 0, err
}

func GetOriginFixSuggestRefTag(fixRefId int64, oufrt *[]OriginUpstreamFixSuggestRefTag) (num int64, err error) {
	o := orm.NewOrm()
	num, err = o.Raw("select * FROM cve_origin_upstream_fix_suggest_ref_tag WHERE fix_ref_id=?", fixRefId).QueryRows(oufrt)
	if num > 0 && err == nil {
		logs.Info("cve_origin_upstream_fix_suggest_ref_tag fix_ref_id: ", fixRefId, " 查询成功")
		return num, nil
	} else {
		logs.Error("cve_origin_upstream_fix_suggest_ref_tag fix_ref_id: ", fixRefId, " 不存在")
	}
	return 0, err
}