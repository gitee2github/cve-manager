package task

import (
	"cvevulner/common"
	"cvevulner/models"
	"cvevulner/taskhandler"
	"errors"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/config"
	"github.com/astaxie/beego/logs"
	"os"
	"strings"
)


func GetGiteeToken()  error{
	defer common.Catchs()
	// 查询需要处理的cve, 1:新增；2：修改
	BConfig, err := config.NewConfig("ini", "conf/app.conf")
	if err != nil{
		logs.Error("config init error:", err)
		return err
	}
	clientId := BConfig.String("gitee::client_id")
	if clientId == "" {
		logs.Error("config gitee::clientId error: invalid value is ",clientId)
		return errors.New("value is nil")
	}
	clientSecret := beego.AppConfig.String("gitee::client_secret")
	if clientSecret == ""  {
		logs.Error("config gitee::clientSecret error: invalid value is ",clientSecret)
		return errors.New("value is nil")
	}

	Email := BConfig.String("gitee::email")
	if Email == "" {
		logs.Error("config gitee::email error: value is nil")
		return errors.New("value is nil")
	}

	password := BConfig.String("gitee::password")
	if password == "" {
		logs.Error("config gitee::password error: value is nil")
		return errors.New("value is nil")
	}
	Scope := BConfig.String("gitee::scope")
	if Scope == "" {
		logs.Error("config gitee::scope error: value is nil")
		return errors.New("value is nil")
	}
	logs.Info(clientId,clientSecret,password)
	var gt taskhandler.GiteeToken
	gt.GrantType = "password"
	gt.UserName = Email
	gt.Password = password
	gt.ClientId = clientId
	gt.ClientSecret = clientSecret
	gt.Scope = Scope
	taskhandler.GetOautToken(gt)
	return nil
}


func CreateIssue()  error{
	defer common.Catchs()
	// 查询需要处理的cve, 1:新增；2：修改
	BConfig, err := config.NewConfig("ini", "conf/app.conf")
	if err != nil{
		logs.Error("config init error:", err)
		return err
	}
	days, ok := BConfig.Int("crontab::days")
	if ok != nil {
		logs.Error("config crontab::days error:", err)
		return ok
	}
	prcnum, ok := BConfig.Int("crontab::prcnum")
	if ok != nil {
		logs.Error("config crontab::prcnum error:", err)
		return ok
	}
	beforeTime := common.GetBeforeTime(days)
	cveData, err := models.QueryIssue(beforeTime, prcnum)
	if err == nil && len(cveData) > 0{
		logs.Info(cveData)
	} else {
		logs.Info("无cve数据可以使用, 当前时间: ", common.GetCurTime())
		return err
	}
	accessToken := os.Getenv("GITEE_TOKEN")
	if accessToken == "" || len(accessToken) < 1 {
		logs.Error("issue token 获取失败, 当前时间: ", common.GetCurTime())
		return err
	}
	owner := BConfig.String("gitee::owner")
	path := BConfig.String("gitee::path")
	for index, issueValue := range cveData {
		logs.Info("当前正在处理第：", index, "条cve数据, cveNum: ", issueValue.CveNum)
		// 判断issue是否已经处理过
		goi, oks := models.QueryIssueCveByNum(issueValue.CveNum, issueValue.PackName)
		if oks {
			if strings.ToLower(goi.State) == "closed" || strings.ToLower(goi.State) == "rejected" {
				models.UpdateIssueStatus(issueValue, 2)
				logs.Info("cve数据已经已经提交过issue,不需要重复提交, cveData: ", issueValue)
				continue
			}
		}
		// 判断cve是否已经处理过
		issueExist := taskhandler.GetCveSecurityNotice(issueValue.CveNum)
		if issueExist {
			models.UpdateIssueStatus(issueValue, 2)
			logs.Info("cve数据已经在官网上展示过,不需要在git上提交issue, cveData: ", issueValue)
			continue
		}
		// 处理每一条cve数据
		if issueValue.Status == 0 {
			err := ProcIssue(issueValue , accessToken, owner, path)
			if err != nil {
				logs.Error("创建issue失败, cvenum: ", issueValue.CveNum, "err,err: ", err)
				continue
			}
		} else {
			err := ProcUpdateIssue(issueValue, accessToken, owner, path)
			if err != nil {
				logs.Error("修改issue失败, cvenum: ", issueValue.CveNum, "err,err: ", err)
				continue
			}
		}
	}
	return nil
}

func ProcUpdateIssue(issueValue models.VulnCenter, accessToken, owner, path string) error{
	// 查询修改评分
	sr, err := models.QueryIssueScoreRecord(issueValue.CveId, 0)
	if err != nil {
		logs.Error("查询 评分记录失败, cveId: ", issueValue.CveId, "err: ", err)
		return err
	}
	// 查询issue模板
	var it models.IssueTemplate
	it.CveId = issueValue.CveId
	lit, bools := models.GetIssueTemplet(&it)
	if bools {
		lit.NVDScore = sr.NVDScore
		lit.NVDVector = sr.NvectorVule
		lit.CveBrief = issueValue.Description
		lit.CveLevel = issueValue.CveLevel
		path = lit.Repo
		_, err := taskhandler.UpdateIssueToGit(accessToken, owner, path,
			issueValue, lit)
		if err != nil {
			logs.Error("更新issue 模板失败， cveId: ", issueValue.CveId, "err: ", err)
			return  err
		}
		// 更新issue状态
		models.UpdateIssueStatus(issueValue, 2)
		// 更新分数状态
		models.UpdateIssueScore(issueValue, 2)
		templetId, err := models.CreateIssueTemplet(&lit)
		if err != nil {
			logs.Error("修改issue模板失败, cveId: ", issueValue.CveId, "err: ", err)
			return err
		}
		models.UpdateIssueScoreRe(issueValue, 1)
		logs.Info("更新issue模板成功，cveId: ", issueValue.CveId, "templetId: ", templetId)
	}
	return nil
}

func ProcIssue(issueValue models.VulnCenter, accessToken, owner, path string) error{
	assignee := ""
	brandArry := []string{}
	sn, err := models.QueryIssueSecurity(issueValue.CveId)
	if err == nil && len(sn.CveNum) > 0 {
		path = issueValue.PackName
		logs.Info("查询安全信息：sn: ", sn)
		// 获取issue处理人
		gitYaml, ok := models.QueryCveOpeneulerdata(issueValue.PackName, issueValue.CveVersion)
		if !ok || gitYaml.MainTainer == "" || len(gitYaml.MainTainer) < 1{
			assignee, err = taskhandler.GetCollaboratorInfo(accessToken, owner, path)
			if assignee == "" {
				logs.Error("获取仓库： owner:", owner, "path:", path, "分析人失败", "err:", err, "cveid: ", issueValue.CveId)
				return err
			}
		} else {
			assignee = gitYaml.MainTainer
			// 查询受影响的分支信息
			gt, errgt := models.QueryCveBrands(gitYaml.GitId)
			if errgt == nil{
				for _, t := range gt {
					if t.Brands != "" && t.Brands != "master" && len(t.Brands) > 1 {
						brandArry = append(brandArry, t.Brands)
					}
				}
			}
		}
	} else {
		logs.Error("获取security 失败, err: ", err, "cveId: ", issueValue.CveId)
		return err
	}
	sc, err := models.QueryIssueScore(issueValue.CveId)
	if err != nil {
		logs.Error("获取Score 失败, err: ", err, "cveId: ", issueValue.CveId)
		return err
	}
	branchs := ""
	errBrands := errors.New("")
	// 获取分支信息
	if len(brandArry) > 0 {
		for _, b := range brandArry {
			if b != "" && len(b) > 1 {
				branchs = branchs + b + "/"
			}
		}
		if branchs != "" && len(branchs) > 1 {
			branchs = branchs[:len(branchs) - 1]
		}
	} else {
		branchs, errBrands = taskhandler.GetBranchesInfo(accessToken, owner, path)
		if branchs == "" {
			logs.Error("获取分支信息失败,CveNum: ", issueValue.CveNum, "path: ", path, ", err: ", errBrands)
		}
		brandArry = append(brandArry, branchs)
	}
	resp, err := taskhandler.CreateIssueToGit(accessToken, owner, path, assignee, issueValue, sc, brandArry)
	if err != nil {
		logs.Error("创建issue失败, err: ", err, "resp: ", resp, "cveId: ", issueValue.CveId)
		return err
	}
	// 存储安全公告相关信息
	var sec models.SecurityNotice
	taskhandler.CreateSecNoticeData(&sec, issueValue, path, branchs)
	secId, err := models.UpdateSecNotice(&sec)
	if err != nil {
		logs.Error("更新安全信息失败,CveNum: ", issueValue.CveNum, "path: ", path, "err: ", err)
		return err
	} else {
		logs.Info("更新安全信息成功, secId: ", secId, "cveNum: ", issueValue.CveNum)
	}
	return nil
}







