package controllers

import (
	"cvevulner/common"
	"cvevulner/errcode"
	"cvevulner/models"
	"encoding/json"
	"fmt"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/logs"
	"time"
)

type UserLoginController struct {
	beego.Controller
}

type Result struct {
	Key string `json:"Token"`
	UserId interface{} `json:"UserId"`
}

func (c *UserLoginController) RetData(resp map[string]interface{}) {
	c.Data["json"] =resp
	c.ServeJSON()
}

// @Title UserLogin
// @Description UserLogin
// @Param	body		body 	models.User	true		"body for user content"
// @Success 200 {int} models.User.ID
// @Failure 403 body is empty
// @router / [post]
func (u *UserLoginController) Post() {
	req := make(map[string]interface{})
	resp := make(map[string]interface{})
	resp["errno"]=errcode.RecodeLoginErr
	resp["errmsg"]=errcode.RecodeText(errcode.RecodeLoginErr)
	resp["body"] = Result{}
	defer u.RetData(resp)
	err := json.Unmarshal(u.Ctx.Input.RequestBody, &req)
	if err != nil{
		logs.Error(err)
		return
	}
	logs.Info("登录请求参数：", &req)
	//判断是否合法
	if req["userName"] == nil || req["passWord"] == nil{
		resp["errno"]=errcode.RecodeDataErr
		resp["errmsg"]=errcode.RecodeText(errcode.RecodeDataErr)
		resp["body"] = Result{}
		logs.Error("数据错误")
		return
	}
	password := fmt.Sprintf("%s", req["passWord"])
	// 加密先注释
	//password = common.DesString(password)
	if password == "" || len(password) == 0{
		resp["errno"]=errcode.RecodePwdErr
		resp["errmsg"]=errcode.RecodeText(errcode.RecodePwdErr)
		logs.Error("密码解析错误", password)
		resp["body"] = Result{}
		return
	}
	var strc Result
	username := fmt.Sprintf("%s", req["userName"])
	resp_model, err := models.GetCveUserByUser(username, password)
	logs.Info(resp_model)
	if resp_model!= nil && err == nil {
		token, terr := common.GenToken(username, password)
		if terr == nil {
			strc.Key = token
			logs.Info(resp_model[0]["user_id"])
			user_id := resp_model[0]["user_id"]
			strc.UserId = user_id
			resp["body"] = strc
			resp["errno"]=errcode.RecodeOk
			resp["errmsg"]=errcode.RecodeText(errcode.RecodeOk)
			expirTime := common.GetTokenExpirTime()
			newTime := time.Now().AddDate(0, 0, expirTime)
			models.UpdateToken(resp_model[0]["user_id"], token, newTime)
			return
		}
	}
	return
}
