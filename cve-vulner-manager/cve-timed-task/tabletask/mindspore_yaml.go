package tabletask

import (
	"cvevulner/cve-timed-task/db_models"
	"cvevulner/cve-timed-task/util"
	"cvevulner/models"
	"errors"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/orm"
	"io"
	"net/http"
	"os"
	"time"
)

// DownloadGuessYaml Download the yaml file of openGauss on Gitee
func DownloadMindSporeYaml() (string, error) {
	filePath := beego.AppConfig.String("timedtask::packageDir") + "mindspore_yaml/"
	err := util.MakeDir(filePath)
	if err != nil {
		return "", err
	}
	yamlFileName := filePath + "mindspore_yaml.yaml"
	//download the yaml file
	downloadUrl := "https://gitee.com/mindspore/community/raw/master/security/config/Third_Party_Open_Source_Software_List.yaml"
	resp, err := http.Get(downloadUrl)
	defer resp.Body.Close()
	if err != nil {
		logs.Error("get", downloadUrl, "error", err.Error())
		return "", err
	}
	if resp.StatusCode != http.StatusOK {
		logs.Error("get", downloadUrl, resp.Status)
		return "", errors.New(resp.Status)
	}
	saveFile, err := os.Create(yamlFileName)
	defer saveFile.Close()
	if err != nil {
		logs.Error("Create file error", yamlFileName, err.Error())
		return "", err
	}
	_, err = io.Copy(saveFile, resp.Body)
	if err != nil {
		logs.Error("copy resp.Body to file error", yamlFileName, err.Error())
		return "", err
	}
	return yamlFileName, nil
}

// StoreOpenLookengYaml parse dict
//Store yaml data to mysql
func StoreMindSporeYaml(yamlData map[string]map[string]map[string]string, ormModel orm.Ormer) {
	if len(yamlData) > 0 {
		err := db_models.UpdateMindYamlOriginMark(ormModel)
		if err != nil {
			logs.Error("db_models.UpdateYamlOriginMarkLookeng:", err.Error())
			return
		}
		for RepoKey, RepoValue := range yamlData {
			for k, v := range RepoValue {
				if _, ok := v["version"]; !ok || v["version"] == "" {
					v["version"] = ""
				}
				if _, ok := v["handler"]; !ok || v["handler"] == "" {
					v["handler"] = ""
				}
				//open transaction
				logs.Info("open transaction")
				tranErr := ormModel.Begin()
				if tranErr != nil {
					logs.Error(" Open transaction error:", tranErr.Error())
					continue
				}
				if len(v["handler"]) > 0 {
					srer, _ := db_models.SelectMindSporeSecurityReviewer(v["handler"], ormModel)
					if srer.Id < 1 {
						msr := models.MindSporeSecurityReviewer{NameSpace: v["handler"], Status: 0}
						err = db_models.InsertMindSporeSecurityReviewer(&msr, ormModel)
						if err != nil {
							logs.Error("db_models.InsertMindSporeSecurityReviewer error:", err.Error())
							tranErr = ormModel.Rollback()
							if tranErr != nil {
								logs.Error(" Rollback transaction error:", tranErr.Error())
							}
							continue
						}
					}
				}
				originData, err := db_models.SelectMindYamlOriginData(k, v["version"], RepoKey, ormModel)
				now := time.Now()
				if err != nil {
					if errors.Is(orm.ErrNoRows, err) {
						logs.Warn("error is orm.ErrNoRows, Create a record")
						mindSporeYaml := &models.MindSporeYaml{
							PackageName: k,
							Version:     v["version"],
							OriginUrl:   v["url"],
							Status:      1,
							CpeName:     v["cpeName"],
							CreateTime:  now.Format("2006-01-02 15:04:05"),
							UpdateTime:  now.Format("2006-01-02 15:04:05"),
							MarkBit:     1,
							Repo:        RepoKey,
							Owner:       v["handler"],
						}
						err = db_models.InsertMindYamlOriginData(mindSporeYaml, ormModel)
						if err != nil {
							logs.Error("db_models.InsertMindYamlOriginData error:", err.Error())
							tranErr = ormModel.Rollback()
							if tranErr != nil {
								logs.Error(" Rollback transaction error:", tranErr.Error())
							}
							continue
						}
						logs.Info("insert MindSporeYaml success")
					} else {
						logs.Error("db_models.SelectMindYamlOriginData error:", err)
						tranErr = ormModel.Rollback()
						if tranErr != nil {
							logs.Error(" Rollback transaction error:", tranErr.Error())
						}
						continue
					}
				} else {
					logs.Info("database records, change the data")
					mindSporeYaml := &models.MindSporeYaml{
						Id:         originData.Id,
						OriginUrl:  v["url"],
						Status:     1,
						CpeName:    v["cpeName"],
						UpdateTime: now.Format("2006-01-02 15:04:05"),
						MarkBit:    1,
						Owner:      v["handler"],
					}
					_, err = db_models.UpdateMindYamlOriginData(mindSporeYaml, ormModel)
					if err != nil {
						logs.Error("db_models.UpdateMindYamlOriginData:", err.Error())
						tranErr = ormModel.Rollback()
						if tranErr != nil {
							logs.Error(" Rollback transaction error:", tranErr.Error())
						}
						continue
					}
				}
				packAgesData, rowsAffected, err := db_models.SelectYamlData(k, v["version"], ormModel)
				if err != nil {
					logs.Error("db_models.SelectMindYamlData error:", err)
					tranErr = ormModel.Rollback()
					if tranErr != nil {
						logs.Error(" Rollback transaction error:", err.Error())
					}
					continue
				}
				if rowsAffected == 0 {
					logs.Warn("No record found, Create a record")
					var packId int64
					gitOpenEuler, err := db_models.SelectYamlLastData(ormModel)
					if err != nil {
						if errors.Is(orm.ErrNoRows, err) {
							packId = 10000000
						} else {
							logs.Error("db_models.SelectYamlLastData error:", err)
							tranErr = ormModel.Rollback()
							if tranErr != nil {
								logs.Error(" Rollback transaction error:", tranErr.Error())
							}
							continue
						}
					} else {
						if gitOpenEuler.PackageId >= 10000000 {
							packId = gitOpenEuler.PackageId + 1
						} else {
							packId = 10000000
						}
					}
					goe := &models.GitOpenEuler{
						PackageId:   packId,
						PackageName: k,
						Version:     v["version"],
						OriginUrl:   v["url"],
						CreateTime:  now,
						UpdateTime:  now,
						CpePackName: v["cpeName"],
						Status:      1,
					}
					lastId, err := models.InsertYamlData(goe)
					if err != nil {
						logs.Error("db_models.InsertYamlData error:", err)
						tranErr = ormModel.Rollback()
						if tranErr != nil {
							logs.Error(" Rollback transaction error:", err.Error())
						}
						continue
					}
					gpi := &models.GitPackageInfo{
						GitId:       lastId,
						PackageName: k,
						Version:     v["version"],
						OriginUrl:   v["url"],
						CreateTime:  now,
						UpdateTime:  now,
						Decription:  "",
						Status:      0,
					}
					err = db_models.InsertYamlDetailData(gpi, ormModel)
					if err != nil {
						logs.Error("db_models.InsertYamlDetailData:", err.Error())
						tranErr = ormModel.Rollback()
						if tranErr != nil {
							logs.Error(" Rollback transaction error:", err.Error())
						}
						continue
					}
				} else {
					if rowsAffected > 1 {
						for _, pv := range packAgesData[1:] {
							err = db_models.DeleteYamlOpenEulerDetailData(pv.GitId, ormModel)
							if err != nil {
								logs.Error("db_models.DeleteYamlOpenEulerDetailData:", err.Error())
								tranErr = ormModel.Rollback()
								if tranErr != nil {
									logs.Error(" Rollback transaction error:", tranErr.Error())
								}
								continue
							}
							err = db_models.DeleteYamlOpenEulerData(pv.GitId, ormModel)
							if err != nil {
								logs.Error("db_models.DeleteYamlOpenEulerData:", err.Error())
								tranErr = ormModel.Rollback()
								if tranErr != nil {
									logs.Error(" Rollback transaction error:", tranErr.Error())
								}
								continue
							}
						}
					}
					goe := &models.GitOpenEuler{
						OriginUrl:   v["url"],
						UpdateTime:  now,
						CpePackName: v["cpeName"],
						Status:      1,
						PackageId:   packAgesData[0].PackageId,
						PackageName: k,
						Version:     v["version"],
					}
					err = models.UpdateYamlData(goe)
					if err != nil {
						logs.Error("db_models.UpdateYamlData:", err.Error())
						tranErr = ormModel.Rollback()
						if tranErr != nil {
							logs.Error(" Rollback transaction error:", tranErr.Error())
						}
						continue
					}
					gpi := &models.GitPackageInfo{
						PackageName: k,
						Version:     v["version"],
						OriginUrl:   v["url"],
						UpdateTime:  now,
						Status:      0,
						GitId:       packAgesData[0].GitId,
					}
					err = db_models.UpdateYamlDetailData(gpi, ormModel)
					if err != nil {
						logs.Error("db_models.UpdateYamlDetailData", err.Error())
						tranErr = ormModel.Rollback()
						if tranErr != nil {
							logs.Error(" Rollback transaction error:", tranErr.Error())
						}
						continue
					}
				}
				tranErr = ormModel.Commit()
				if tranErr != nil {
					logs.Error(" Commit transaction error:", tranErr.Error())
					continue
				}
				logs.Info("Transaction committed successfully", k)
			}
		}
		err = db_models.DeleteMindYamlOriginMark(ormModel)
		if err != nil {
			logs.Error("db_models.DeleteMindYamlOriginMark error:", err.Error())
		}
	} else {
		logs.Warning("yamlData Is empty, nothing can be done")
	}

}

// ProcOpenLookengYaml
//1. Create a folder;
//2. Download yaml;
//3. Parse yaml;
//4. Save in mysql;
func ProcMindSporeYaml() {
	ormModel := orm.NewOrm()
	yamlFileName, err := DownloadMindSporeYaml()
	if err != nil {
		logs.Error("DownloadMindSporeYaml error:", err.Error())
		return
	}
	yamlData, err := util.ParseYamlTypeTwo(yamlFileName)
	if err != nil {
		logs.Error("util.ParseYamlTypeTwo error: ", yamlFileName, err)
		return
	}
	StoreMindSporeYaml(yamlData, ormModel)

	DeleteYamlData(ormModel)
}
