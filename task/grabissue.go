package task

import (
	"cvevulner/common"
	"cvevulner/taskhandler"
	"errors"
	"github.com/astaxie/beego/config"
	"github.com/astaxie/beego/logs"
	"os"
)

//GetIssueData  get the issue data
func GetIssueData()  error{
	defer common.Catchs()
	logs.Info("The task of getting the data source of the created issue starts...")
	BConfig, err := config.NewConfig("ini", "conf/app.conf")
	if err != nil{
		logs.Error("config init error:", err)
		return err
	}
	owner := BConfig.String("gitee::owner")
	if owner == "" {
		logs.Error("config gitee::owner error: invalid value is ", owner)
		return errors.New("value is nil")
	}
	giteeToken := os.Getenv("GITEE_TOKEN")
	if giteeToken == "" {
		logs.Error("Failed to obtain token, unable to obtain issue task")
		return errors.New("Failed to obtain token, unable to obtain issue task")
	}
	// Synchronize gitee data to cve
	errx := taskhandler.GrabIssueByOrg(giteeToken, owner)
	logs.Info("The task of obtaining the data source of the created issue ends...")
	// The amount of data processed at a time
	prcNum, err := BConfig.Int("crontab::prcnum")
	if err != nil {
		logs.Error("crontab::prcnum, error:  ", err)
		return errors.New("value is nil")
	}
	// How many days have been processed to date data
	days, ok := BConfig.Int("crontab::days")
	if ok != nil {
		logs.Error("crontab::days, err:", err)
		return ok
	}
	// openeuler Number start value
	cveRef := BConfig.String("cve::cveref")
	openeulerNum, ok := BConfig.Int("cve::openeulernum")
	if ok != nil {
		logs.Error("cve::openeulernum, err:", err)
		return ok
	}
	logs.Info("Start syncing gitee data to the cve vulnerability database")
	// Compatible with created issue data
	oki, err := taskhandler.GetCveIssueData(prcNum, days, openeulerNum, cveRef, owner)
	if !oki {
		logs.Error("ProcCveOriginData, GetCveIssueData, err: ", err)
	}
	logs.Info("End of syncing gitee data to cve vulnerability database")
	return errx
}