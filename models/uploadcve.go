package models

import (
	"cvevulner/common"
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/orm"
)

type OpenSaId struct {
	Id int64
}

func QueryYamlData(pkgName string, version string) (GitOpenEuler, bool) {
	o := orm.NewOrm()
	var goe GitOpenEuler
	err := o.Raw("select * from cve_git_open_euler where package_name = ? and version = ?", pkgName, version).QueryRow(&goe)
	if err != nil {
		logs.Info("pkgName", pkgName, "version", version, ", cve_git_open_euler 无对应数据")
		return goe, false
	} else {
		logs.Info("pkgName", pkgName, "version", version, ", cve_git_open_euler 查询成功")
		return goe, true
	}
}

func QueryOriginRepo(pkgName string) (GiteRepo, bool) {
	o := orm.NewOrm()
	var gr GiteRepo
	repoOrg, errx := common.GetRepoOrg()
	if errx != nil {
		logs.Error("pkgName: ", pkgName, ",无法 获取组织, err: ", errx)
		return gr, false
	}
	err := o.Raw("select * from cve_gite_repo where path = ? and org_path = ? and status = ?", pkgName, repoOrg, 0).QueryRow(&gr)
	if err != nil {
		logs.Info("pkgName", pkgName, "repoOrg", repoOrg, ", cve_gite_repo 无对应数据")
		return gr, false
	} else {
		logs.Info("pkgName", pkgName, "repoOrg", repoOrg, ", cve_gite_repo 查询成功")
		return gr, true
	}
}

func QueryRepoMember(groupId int64, memberType string) ([]GiteRepoMember, bool) {
	o := orm.NewOrm()
	var grm []GiteRepoMember
	num, err := o.Raw("select * from cve_gite_repo_member where group_id = ?", groupId).QueryRows(&grm)
	if err != nil || num == 0 {
		logs.Info("groupId", groupId, ",memberType", memberType, ", cve_gite_repo_member 无对应数据")
		return grm, false
	} else {
		logs.Info("groupId", groupId, ",memberType", memberType, ", cve_gite_repo_member 查询成功")
		return grm, true
	}
}

func QueryAssignee() ([]IssueAssignee, bool) {
	o := orm.NewOrm()
	var iae []IssueAssignee
	num, err := o.Raw("select * from cve_issue_assignee").QueryRows(&iae)
	if err != nil || num == 0 {
		return iae, false
	} else {
		return iae, true
	}
}

func QueryRepoAllMaintainer(pkgName string) ([]GiteRepoMember, bool) {
	gr, okrg := QueryOriginRepo(pkgName)
	if !okrg || gr.RepoId == 0 {
		logs.Error("maintainer query failed, pkgName: ", pkgName, ",okrg: ", okrg)
		return nil, false
	}
	grm, okgrm := QueryRepoMember(gr.GroupId, "Maintainer")
	if !okgrm {
		logs.Error("maintainer query failed, pkgName: ", pkgName, ",gr.GroupId: ", gr.GroupId, ",okgrm: ", okgrm)
		return nil, false
	}
	return grm, true
}

func QueryRepoMaintainer(pkgName string, version string) (GitOpenEuler, bool) {
	goe, ok := QueryYamlData(pkgName, version)
	if !ok || goe.GitId == 0 {
		gr, okrg := QueryOriginRepo(pkgName)
		if !okrg || gr.RepoId == 0 {
			aie, aieOk := QueryAssignee()
			if aieOk {
				for _, a := range aie {
					if a.Assignee != "" && len(a.Assignee) > 1 {
						goe.MainTainer = a.Assignee
						break
					}
				}
				return goe, true
			}
			return goe, ok
		}
		grm, okgrm := QueryRepoMember(gr.GroupId, "Maintainer")
		if !okgrm {
			aie, aieOk := QueryAssignee()
			if aieOk {
				for _, a := range aie {
					if a.Assignee != "" && len(a.Assignee) > 1 {
						goe.MainTainer = a.Assignee
						break
					}
				}
				return goe, true
			}
			return goe, ok
		}
		for _, g := range grm {
			if g.MemberName != "" && len(g.MemberName) > 1 {
				goe.MainTainer = g.MemberName
				break
			}
		}
		return goe, true
	} else {
		if goe.MainTainer == "" || len(goe.MainTainer) == 0 {
			gr, okrg := QueryOriginRepo(pkgName)
			if !okrg || gr.RepoId == 0 {
				aie, aieOk := QueryAssignee()
				if aieOk {
					for _, a := range aie {
						if a.Assignee != "" && len(a.Assignee) > 1 {
							goe.MainTainer = a.Assignee
							break
						}
					}
					return goe, true
				}
				return goe, ok
			}
			grm, okgrm := QueryRepoMember(gr.GroupId, "Maintainer")
			if !okgrm {
				aie, aieOk := QueryAssignee()
				if aieOk {
					for _, a := range aie {
						if a.Assignee != "" && len(a.Assignee) > 1 {
							goe.MainTainer = a.Assignee
							break
						}
					}
					return goe, true
				}
				return goe, ok
			}
			for _, g := range grm {
				if g.MemberName != "" && len(g.MemberName) > 1 {
					goe.MainTainer = g.MemberName
					break
				}
			}
		}
	}
	return goe, true
}

func QueryCveOpeneulerdata(pkgName string, version string) (GitOpenEuler, bool) {
	goe, ok := QueryYamlData(pkgName, version)
	if !ok || goe.GitId == 0 {
		logs.Error("查询版本信息失败, ", pkgName, version)
		return goe, false
	}
	return goe, true
}

func QueryCveOpeneulerDetaildataByName(pkgName, versions string) (GitPackageInfo, bool) {
	o := orm.NewOrm()
	var goe GitPackageInfo
	err := o.Raw("select * from cve_git_package_info where package_name = ? and version = ? " +
		"order by detail_id limit 1", pkgName, versions).QueryRow(&goe)
	if err != nil {
		logs.Info("pkgName: ", pkgName, ", cve_git_package_info 无对应数据")
		return goe, false
	} else {
		logs.Info("pkgName: ", pkgName, ", cve_git_package_info 查询成功")
		return goe, true
	}
}

func QueryCveOriginByIds(ids string) (OriginUpstream, bool) {
	o := orm.NewOrm()
	var orcve OriginUpstream
	err := o.Raw("select * from cve_origin_upstream where cve_un_ids = ?", ids).QueryRow(&orcve)
	if err != nil {
		logs.Info("ids", ids, ", cve_origin_upstream 新增数据")
		return orcve, false
	} else {
		return orcve, true
	}
}

func CreateOriginCve(CveData common.CveOriginData, ou *OriginUpstream, od *OriginUpstreamDesc,
	ous *OriginUpstreamConfig, osi *OriginUpstreamImpact, osp *OriginUpstreamPoc, ose *OriginUpstreamEvent,
	osv *OriginUpstreamVulType, osf *OriginUpstreamFixSuggest) (Id int64, err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		ouse := OriginUpstream{Ids: ou.Ids}
		err := o.Read(&ouse, "Ids")
		if err == orm.ErrNoRows || err == orm.ErrMissPK {
			logs.Info("新增数据： ", ou)
			var num int64
			if num, err = o.Insert(ou); err == nil {
				logs.Info("insert cve_origin_upstream success, num:, cveNum", num, ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream failed, ou:", ou, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			od.CveId = num
			lod := OriginUpstreamDesc{CveId: num}
			o.Delete(&lod, "CveId")
			if odnum, err := o.Insert(od); err == nil {
				logs.Info("insert cve_origin_upstream_desc success, num:", odnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_desc failed, ou:", ou, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			ous.CveId = num
			lous := OriginUpstreamConfig{CveId: num}
			err := o.Read(&lous, "CveId")
			if err == orm.ErrNoRows || err == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_config 不存在, cveId: ", num)
			} else {
				var lousc []OriginUpstreamConfigNode
				louscNum, err := o.Raw("select * from cve_origin_upstream_config_node where conf_id = ?", lous.ConfId).QueryRows(&lousc)
				if err != nil {
					logs.Info("cve_origin_upstream_config_node 不存在, louscNum: ", louscNum)
				} else {
					for _, lsc := range lousc {
						ousnc := OriginUpstreamConfigNodeCpe{NodeId: lsc.NodeId}
						o.Delete(&ousnc, "NodeId")
					}
					ousn := OriginUpstreamConfigNode{ConfId: lous.ConfId}
					o.Delete(&ousn, "ConfId")
				}
				lousn := OriginUpstreamConfig{CveId: num}
				o.Delete(&lousn, "CveId")
			}
			if ousnum, err := o.Insert(ous); err == nil {
				logs.Info("insert cve_origin_upstream_config success, ousnum:", ousnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_config failed, ou:", ous, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			if CveData.Configurations.Nodes != nil && len(CveData.Configurations.Nodes) > 0 {
				for _, nodes := range CveData.Configurations.Nodes {
					var Lnode OriginUpstreamConfigNode
					Lnode.Operator = nodes.Operator
					Lnode.ConfId = ous.ConfId
					if lousnum, err := o.Insert(&Lnode); err == nil {
						logs.Info("insert cve_origin_upstream_config_node success, lousnum:", lousnum, ", cveNum", ou.Ids)
					} else {
						logs.Error("insert cve_origin_upstream_config_node failed, Lnode:", Lnode, ", err: ", err)
						o.Rollback()
						return 0, err
					}
					if nodes.Cpe != nil && len(nodes.Cpe) > 0 {
						for _, nodCpe := range nodes.Cpe {
							var ouscnc OriginUpstreamConfigNodeCpe
							ouscnc.Cpe23Uri = nodCpe.Cpe23Uri
							ouscnc.NodeId = Lnode.NodeId
							ouscnc.CpeMatchString = nodCpe.CpeMatchString
							ouscnc.Vulnerable = nodCpe.Vulnerable
							if lousnumc, err := o.Insert(&ouscnc); err == nil {
								logs.Info("insert cve_origin_upstream_config_node_cpe success, lousnumc:", lousnumc, ", cveNum", ou.Ids)
							} else {
								logs.Error("insert cve_origin_upstream_config_node_cpe failed, ouscnc:", ouscnc, ", err: ", err)
								o.Rollback()
								return 0, err
							}
						}
					}
				}
			}
			osi.CveId = num
			losi := OriginUpstreamImpact{CveId: num}
			errxx := o.Read(&losi, "CveId")
			if errxx == orm.ErrNoRows || errxx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_impact 不存在, cveId: ", num)
			} else {
				var losis []OriginUpstreamImpactScore
				losisNum, err := o.Raw("select * from cve_origin_upstream_impact_score where impact_id = ?", losi.ImpactId).QueryRows(&losis)
				if err != nil {
					logs.Info("cve_origin_upstream_impact_score 不存在, losi.ImpactId: ", losi.ImpactId, "err: ", err, ",losisNum: ", losisNum)
				} else {
					for _, sis := range losis {
						if sis.CvssV3 == 1 && sis.BaseMetricV3 == 1 {
							lousisv3 := OriginUpstreamImpactScoreV3{ScoreId: sis.ScoreId}
							o.Delete(&lousisv3, "ScoreId")
						}
						if sis.CvssV2 == 1 && sis.BaseMetricV2 == 1 {
							lousisv2 := OriginUpstreamImpactScoreV2{ScoreId: sis.ScoreId}
							o.Delete(&lousisv2, "ScoreId")
						}
					}
					losisx := OriginUpstreamImpactScore{ImpactId: losi.ImpactId}
					o.Delete(&losisx, "ImpactId")
				}
				losix := OriginUpstreamImpact{CveId: num}
				o.Delete(&losix, "CveId")
			}

			if losinum, err := o.Insert(osi); err == nil {
				logs.Info("insert cve_origin_upstream_impact success, lousnum:", losinum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact failed, Lnode:", osi, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousist OriginUpstreamImpactScore
			lousist.ImpactId = osi.ImpactId
			lousist.BaseMetricV3 = 1
			lousist.BaseMetricV2 = 0
			lousist.CvssV3 = 1
			lousist.CvssV2 = 0
			lousist.Status = 1
			if lousistnum, err := o.Insert(&lousist); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score success, lousistnum:", lousistnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score failed, lousist:", lousist, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousisv3 OriginUpstreamImpactScoreV3
			lousisv3.ScoreId = lousist.ScoreId
			lousisv3.BaseScore = CveData.Impact.BaseMetricV3.CvssV3.BaseScore
			lousisv3.VectorString = CveData.Impact.BaseMetricV3.CvssV3.VectorString
			lousisv3.AttackComplexity = CveData.Impact.BaseMetricV3.CvssV3.AttackComplexity
			lousisv3.AttackVector = CveData.Impact.BaseMetricV3.CvssV3.AttackVector
			lousisv3.AvailabilityImpact = CveData.Impact.BaseMetricV3.CvssV3.AvailabilityImpact
			lousisv3.BaseSeverity = CveData.Impact.BaseMetricV3.CvssV3.BaseSeverity
			lousisv3.UserInteraction = CveData.Impact.BaseMetricV3.CvssV3.UserInteraction
			lousisv3.PrivilegesRequired = CveData.Impact.BaseMetricV3.CvssV3.PrivilegesRequired
			lousisv3.Version = CveData.Impact.BaseMetricV3.CvssV3.Version
			lousisv3.ConfidentialityImpact = CveData.Impact.BaseMetricV3.CvssV3.ConfidentialityImpact
			lousisv3.IntegrityImpact = CveData.Impact.BaseMetricV3.CvssV3.IntegrityImpact
			lousisv3.Scope = CveData.Impact.BaseMetricV3.CvssV3.Scope
			lousisv3.ImpactScore = CveData.Impact.BaseMetricV3.ImpactScore
			lousisv3.ExploitabilityScore = CveData.Impact.BaseMetricV3.ExploitabilityScore
			lousisv3.CveLevel = openEulerScoreProc(CveData.Impact.BaseMetricV3.CvssV3.BaseScore)
			if lousistnumv3, err := o.Insert(&lousisv3); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score_v3 success, lousistnumv3:", lousistnumv3, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score_v3 failed, lousisv3:", lousisv3, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousistv2 OriginUpstreamImpactScore
			lousistv2.ImpactId = osi.ImpactId
			lousistv2.BaseMetricV3 = 0
			lousistv2.BaseMetricV2 = 1
			lousistv2.CvssV3 = 0
			lousistv2.CvssV2 = 1
			lousistv2.Status = 1
			if lousistnum, err := o.Insert(&lousistv2); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score success, lousistnum:", lousistnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score failed, lousistv2:", lousistv2, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousisv2 OriginUpstreamImpactScoreV2
			lousisv2.ScoreId = lousistv2.ScoreId
			lousisv2.BaseScore = CveData.Impact.BaseMetricV2.CvssV2.BaseScore
			lousisv2.AcInsufInfo = CveData.Impact.BaseMetricV2.AcInsufInfo
			lousisv2.BaseScore = CveData.Impact.BaseMetricV2.CvssV2.BaseScore
			lousisv2.VectorString = CveData.Impact.BaseMetricV2.CvssV2.VectorString
			lousisv2.AccessComplexity = CveData.Impact.BaseMetricV2.CvssV2.AccessComplexity
			lousisv2.Authentication = CveData.Impact.BaseMetricV2.CvssV2.Authentication
			lousisv2.AvailabilityImpact = CveData.Impact.BaseMetricV2.CvssV2.AvailabilityImpact
			lousisv2.Version = CveData.Impact.BaseMetricV2.CvssV2.Version
			lousisv2.ConfidentialityImpact = CveData.Impact.BaseMetricV2.CvssV2.ConfidentialityImpact
			lousisv2.IntegrityImpact = CveData.Impact.BaseMetricV2.CvssV2.IntegrityImpact
			lousisv2.AccessVector = CveData.Impact.BaseMetricV2.CvssV2.AccessVector
			lousisv2.UserInteractionRequired = CveData.Impact.BaseMetricV2.UserInteractionRequired
			lousisv2.Severity = CveData.Impact.BaseMetricV2.Severity
			lousisv2.ObtainUserPrivilege = CveData.Impact.BaseMetricV2.ObtainUserPrivilege
			lousisv2.ObtainAllPrivilege = CveData.Impact.BaseMetricV2.ObtainAllPrivilege
			lousisv2.ObtainOtherPrivilege = CveData.Impact.BaseMetricV2.ObtainOtherPrivilege
			lousisv2.ImpactScore = CveData.Impact.BaseMetricV2.ImpactScore
			lousisv2.ExploitabilityScore = CveData.Impact.BaseMetricV2.ExploitabilityScore
			lousisv2.CveLevel = openEulerScoreProc(CveData.Impact.BaseMetricV2.CvssV2.BaseScore)
			if lousistnumv2, err := o.Insert(&lousisv2); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score_v2 success, lousistnumv2:", lousistnumv2, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score_v2 failed, lousisv2:", lousisv2, ", err: ", err)
				o.Rollback()
				return 0, err
			}

			osp.CveId = num
			losp := OriginUpstreamPoc{CveId: num}
			errxxx := o.Read(&losp, "CveId")
			if errxxx == orm.ErrNoRows || errxxx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_impact 不存在, cveId: ", num)
			} else {
				lospd := OriginUpstreamPoc{CveId: num}
				o.Delete(&lospd, "CveId")
			}
			if ospnum, err := o.Insert(osp); err == nil {
				logs.Info("insert  Table: cve_origin_upstream_poc success, ospnum:", ospnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert  Table: cve_origin_upstream_poc failed, osp:", osp, ", err: ", err)
				o.Rollback()
				return 0, err
			}

			ose.CveId = num
			lose := OriginUpstreamEvent{CveId: num}
			errx := o.Read(&lose, "CveId")
			if errx == orm.ErrNoRows || errx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_event 不存在, cveId: ", num)
			} else {
				losed := OriginUpstreamEvent{CveId: num}
				o.Delete(&losed, "CveId")
			}
			if osenum, err := o.Insert(ose); err == nil {
				logs.Info("insert  Table: cve_origin_upstream_event success, osenum:", osenum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert  Table: cve_origin_upstream_event failed, ose:", ose, ", err: ", err)
				o.Rollback()
				return 0, err
			}

			lousr := OriginUpstreamReference{CveId: num}
			o.Delete(&lousr, "CveId")
			if CveData.ReferenceData != nil && len(CveData.ReferenceData) > 0 {
				for _, ref := range CveData.ReferenceData {
					var lousrd OriginUpstreamReference
					lousrd.CveId = num
					lousrd.Url = ref.Url
					lousrd.Refsource = ref.Refsource
					lousrd.Name = ref.Name
					tags := ""
					if ref.Tags != nil && len(ref.Tags) > 0 {
						for _, ta := range ref.Tags {
							tags = tags + string(ta) + ","
						}
						tags = tags[:len(tags)-1]
					}
					lousrd.Tags = tags
					if lousrdnum, err := o.Insert(&lousrd); err == nil {
						logs.Info("insert  Table: cve_origin_upstream_reference success, lousrdnum:", lousrdnum, ", cveNum", ou.Ids)
					} else {
						logs.Error("insert  Table: cve_origin_upstream_reference failed, lousrd:", lousrd, ", err: ", err)
						o.Rollback()
						return 0, err
					}
				}
			}
			lousv := OriginUpstreamVulType{CveId: num}
			o.Delete(&lousv, "CveId")
			osv.CveId = num
			if osvnum, err := o.Insert(osv); err == nil {
				logs.Info("insert Table: cve_origin_upstream_vul_type success, osvnum:", osvnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert Table: cve_origin_upstream_vul_type failed, osv:", osv, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			ose.CveId = num
			lousfs := OriginUpstreamFixSuggest{CveId: num}
			errxxsx := o.Read(&lousfs, "CveId")
			if errxxsx == orm.ErrNoRows || errxxsx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_fix_suggest 不存在, cveId: ", num)
			} else {
				var lousfst []OriginUpstreamFixSuggestRef
				louscNum, err := o.Raw("select * from cve_origin_upstream_fix_suggest_ref where fix_id = ?", lousfs.FixId).QueryRows(&lousfst)
				if err != nil {
					logs.Info("cve_origin_upstream_fix_suggest_ref 不存在, louscNum: ", louscNum, "err: ", err)
				} else {
					for _, sc := range lousfst {
						lorfrt := OriginUpstreamFixSuggestRefTag{FixRefId: sc.FixRefId}
						o.Delete(&lorfrt, "FixRefId")
					}
					lo := OriginUpstreamFixSuggestRef{FixId: lousfs.FixId}
					o.Delete(&lo, "FixId")
				}
				lousfsx := OriginUpstreamFixSuggest{CveId: num}
				o.Delete(&lousfsx, "CveId")
			}
			osf.CveId = num
			if osfnum, err := o.Insert(osf); err == nil {
				logs.Info("insert  Table: cve_origin_upstream_fix_suggest success, osfnum:", osfnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert  Table: cve_origin_upstream_fix_suggest failed, osf:", osf, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			if CveData.FixSuggest.References != nil && len(CveData.FixSuggest.References) > 0 {
				for _, refer := range CveData.FixSuggest.References {
					var lousfstr OriginUpstreamFixSuggestRef
					lousfstr.FixId = osf.FixId
					lousfstr.Name = refer.Name
					lousfstr.Refsource = refer.Refsource
					lousfstr.Url = refer.Url
					if osfstrnum, err := o.Insert(&lousfstr); err == nil {
						logs.Info("insert  Table: cve_origin_upstream_fix_suggest_ref success, osfstrnum:", osfstrnum, ", cveNum", ou.Ids)
					} else {
						logs.Error("insert  Table: cve_origin_upstream_fix_suggest_ref failed, lousfstr:", lousfstr, ", err: ", err)
						o.Rollback()
						return 0, err
					}
					if refer.Tags != nil && len(refer.Tags) > 0 {
						for _, refertag := range refer.Tags {
							var loufsrtg OriginUpstreamFixSuggestRefTag
							loufsrtg.FixRefId = lousfstr.FixRefId
							loufsrtg.Name = refertag
							if osfstgrnum, err := o.Insert(&loufsrtg); err == nil {
								logs.Info("insert  Table: cve_origin_upstream_fix_suggest_ref_tag success, osfstgrnum:", osfstgrnum, ", cveNum", ou.Ids)
							} else {
								logs.Error("insert  Table: cve_origin_upstream_fix_suggest_ref_tag failed, loufsrtg:", loufsrtg, ", err: ", err)
								o.Rollback()
								return 0, err
							}
						}
					}
				}
			}
			o.Commit()
		} else {
			logs.Info("更新数据： ", ou)
			ou.CveId = ouse.CveId
			ou.Ids = ouse.Ids
			if num, err := o.Update(ou); err == nil {
				logs.Info("Update cve_origin_upstream success, num:, cveNum", num, ou.Ids)
			} else {
				logs.Error("Update cve_origin_upstream failed, ou:", ou, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			num := ouse.CveId
			od.CveId = num
			lod := OriginUpstreamDesc{CveId: num}
			o.Delete(&lod, "CveId")
			if odnum, err := o.Insert(od); err == nil {
				logs.Info("insert cve_origin_upstream_desc success, num:", odnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_desc failed, ou:", ou, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			ous.CveId = num
			lous := OriginUpstreamConfig{CveId: num}
			err := o.Read(&lous, "CveId")
			if err == orm.ErrNoRows || err == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_config 不存在, cveId: ", num)
			} else {
				var lousc []OriginUpstreamConfigNode
				louscNum, err := o.Raw("select * from cve_origin_upstream_config_node where conf_id = ?", lous.ConfId).QueryRows(&lousc)
				if err != nil {
					logs.Info("cve_origin_upstream_config_node 不存在, louscNum: ", louscNum)
				} else {
					for _, lsc := range lousc {
						ousnc := OriginUpstreamConfigNodeCpe{NodeId: lsc.NodeId}
						o.Delete(&ousnc, "NodeId")
					}
					ousn := OriginUpstreamConfigNode{ConfId: lous.ConfId}
					o.Delete(&ousn, "ConfId")
				}
				lousn := OriginUpstreamConfig{CveId: num}
				o.Delete(&lousn, "CveId")
			}
			if ousnum, err := o.Insert(ous); err == nil {
				logs.Info("insert cve_origin_upstream_config success, ousnum:", ousnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_config failed, ou:", ous, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			if CveData.Configurations.Nodes != nil && len(CveData.Configurations.Nodes) > 0 {
				for _, nodes := range CveData.Configurations.Nodes {
					var Lnode OriginUpstreamConfigNode
					Lnode.Operator = nodes.Operator
					Lnode.ConfId = ous.ConfId
					if lousnum, err := o.Insert(&Lnode); err == nil {
						logs.Info("insert cve_origin_upstream_config_node success, lousnum:", lousnum, ", cveNum", ou.Ids)
					} else {
						logs.Error("insert cve_origin_upstream_config_node failed, Lnode:", Lnode, ", err: ", err)
						o.Rollback()
						return 0, err
					}
					if nodes.Cpe != nil && len(nodes.Cpe) > 0 {
						for _, nodCpe := range nodes.Cpe {
							var ouscnc OriginUpstreamConfigNodeCpe
							ouscnc.Cpe23Uri = nodCpe.Cpe23Uri
							ouscnc.NodeId = Lnode.NodeId
							ouscnc.CpeMatchString = nodCpe.CpeMatchString
							ouscnc.Vulnerable = nodCpe.Vulnerable
							if lousnumc, err := o.Insert(&ouscnc); err == nil {
								logs.Info("insert cve_origin_upstream_config_node_cpe success, lousnumc:", lousnumc, ", cveNum", ou.Ids)
							} else {
								logs.Error("insert cve_origin_upstream_config_node_cpe failed, ouscnc:", ouscnc, ", err: ", err)
								o.Rollback()
								return 0, err
							}
						}
					}
				}
			}

			osi.CveId = num
			losi := OriginUpstreamImpact{CveId: num}
			errxx := o.Read(&losi, "CveId")
			if errxx == orm.ErrNoRows || errxx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_impact 不存在, cveId: ", num)
			} else {
				var losis []OriginUpstreamImpactScore
				losisNum, err := o.Raw("select * from cve_origin_upstream_impact_score where impact_id = ?", losi.ImpactId).QueryRows(&losis)
				if err != nil {
					logs.Info("cve_origin_upstream_impact_score 不存在, losi.ImpactId: ", losi.ImpactId, "err: ", err, ",losisNum: ", losisNum)
				} else {
					for _, sis := range losis {
						if sis.CvssV3 == 1 && sis.BaseMetricV3 == 1 {
							lousisv3 := OriginUpstreamImpactScoreV3{ScoreId: sis.ScoreId}
							o.Delete(&lousisv3, "ScoreId")
						}
						if sis.CvssV2 == 1 && sis.BaseMetricV2 == 1 {
							lousisv2 := OriginUpstreamImpactScoreV2{ScoreId: sis.ScoreId}
							o.Delete(&lousisv2, "ScoreId")
						}
					}
					losisx := OriginUpstreamImpactScore{ImpactId: losi.ImpactId}
					o.Delete(&losisx, "ImpactId")
				}
				losix := OriginUpstreamImpact{CveId: num}
				o.Delete(&losix, "CveId")
			}

			if losinum, err := o.Insert(osi); err == nil {
				logs.Info("insert cve_origin_upstream_impact success, lousnum:", losinum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact failed, Lnode:", osi, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousist OriginUpstreamImpactScore
			lousist.ImpactId = osi.ImpactId
			lousist.BaseMetricV3 = 1
			lousist.BaseMetricV2 = 0
			lousist.CvssV3 = 1
			lousist.CvssV2 = 0
			lousist.Status = 1
			if lousistnum, err := o.Insert(&lousist); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score success, lousistnum:", lousistnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score failed, lousist:", lousist, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousisv3 OriginUpstreamImpactScoreV3
			lousisv3.ScoreId = lousist.ScoreId
			lousisv3.BaseScore = CveData.Impact.BaseMetricV3.CvssV3.BaseScore
			lousisv3.VectorString = CveData.Impact.BaseMetricV3.CvssV3.VectorString
			lousisv3.AttackComplexity = CveData.Impact.BaseMetricV3.CvssV3.AttackComplexity
			lousisv3.AttackVector = CveData.Impact.BaseMetricV3.CvssV3.AttackVector
			lousisv3.AvailabilityImpact = CveData.Impact.BaseMetricV3.CvssV3.AvailabilityImpact
			lousisv3.BaseSeverity = CveData.Impact.BaseMetricV3.CvssV3.BaseSeverity
			lousisv3.UserInteraction = CveData.Impact.BaseMetricV3.CvssV3.UserInteraction
			lousisv3.PrivilegesRequired = CveData.Impact.BaseMetricV3.CvssV3.PrivilegesRequired
			lousisv3.Version = CveData.Impact.BaseMetricV3.CvssV3.Version
			lousisv3.ConfidentialityImpact = CveData.Impact.BaseMetricV3.CvssV3.ConfidentialityImpact
			lousisv3.IntegrityImpact = CveData.Impact.BaseMetricV3.CvssV3.IntegrityImpact
			lousisv3.Scope = CveData.Impact.BaseMetricV3.CvssV3.Scope
			lousisv3.ImpactScore = CveData.Impact.BaseMetricV3.ImpactScore
			lousisv3.ExploitabilityScore = CveData.Impact.BaseMetricV3.ExploitabilityScore
			lousisv3.CveLevel = openEulerScoreProc(CveData.Impact.BaseMetricV3.CvssV3.BaseScore)
			if lousistnumv3, err := o.Insert(&lousisv3); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score_v3 success, lousistnumv3:", lousistnumv3, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score_v3 failed, lousisv3:", lousisv3, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousistv2 OriginUpstreamImpactScore
			lousistv2.ImpactId = osi.ImpactId
			lousistv2.BaseMetricV3 = 0
			lousistv2.BaseMetricV2 = 1
			lousistv2.CvssV3 = 0
			lousistv2.CvssV2 = 1
			lousistv2.Status = 1
			if lousistnum, err := o.Insert(&lousistv2); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score success, lousistnum:", lousistnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score failed, lousistv2:", lousistv2, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			var lousisv2 OriginUpstreamImpactScoreV2
			lousisv2.ScoreId = lousistv2.ScoreId
			lousisv2.BaseScore = CveData.Impact.BaseMetricV2.CvssV2.BaseScore
			lousisv2.AcInsufInfo = CveData.Impact.BaseMetricV2.AcInsufInfo
			lousisv2.BaseScore = CveData.Impact.BaseMetricV2.CvssV2.BaseScore
			lousisv2.VectorString = CveData.Impact.BaseMetricV2.CvssV2.VectorString
			lousisv2.AccessComplexity = CveData.Impact.BaseMetricV2.CvssV2.AccessComplexity
			lousisv2.Authentication = CveData.Impact.BaseMetricV2.CvssV2.Authentication
			lousisv2.AvailabilityImpact = CveData.Impact.BaseMetricV2.CvssV2.AvailabilityImpact
			lousisv2.Version = CveData.Impact.BaseMetricV2.CvssV2.Version
			lousisv2.ConfidentialityImpact = CveData.Impact.BaseMetricV2.CvssV2.ConfidentialityImpact
			lousisv2.IntegrityImpact = CveData.Impact.BaseMetricV2.CvssV2.IntegrityImpact
			lousisv2.AccessVector = CveData.Impact.BaseMetricV2.CvssV2.AccessVector
			lousisv2.UserInteractionRequired = CveData.Impact.BaseMetricV2.UserInteractionRequired
			lousisv2.Severity = CveData.Impact.BaseMetricV2.Severity
			lousisv2.ObtainUserPrivilege = CveData.Impact.BaseMetricV2.ObtainUserPrivilege
			lousisv2.ObtainAllPrivilege = CveData.Impact.BaseMetricV2.ObtainAllPrivilege
			lousisv2.ObtainOtherPrivilege = CveData.Impact.BaseMetricV2.ObtainOtherPrivilege
			lousisv2.ImpactScore = CveData.Impact.BaseMetricV2.ImpactScore
			lousisv2.ExploitabilityScore = CveData.Impact.BaseMetricV2.ExploitabilityScore
			lousisv2.CveLevel = openEulerScoreProc(CveData.Impact.BaseMetricV2.CvssV2.BaseScore)
			if lousistnumv2, err := o.Insert(&lousisv2); err == nil {
				logs.Info("insert cve_origin_upstream_impact_score_v2 success, lousistnumv2:", lousistnumv2, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert cve_origin_upstream_impact_score_v2 failed, lousisv2:", lousisv2, ", err: ", err)
				o.Rollback()
				return 0, err
			}

			osp.CveId = num
			losp := OriginUpstreamPoc{CveId: num}
			errxxx := o.Read(&losp, "CveId")
			if errxxx == orm.ErrNoRows || errxxx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_impact 不存在, cveId: ", num)
			} else {
				lospd := OriginUpstreamPoc{CveId: num}
				o.Delete(&lospd, "CveId")
			}
			if ospnum, err := o.Insert(osp); err == nil {
				logs.Info("insert  Table: cve_origin_upstream_poc success, ospnum:", ospnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert  Table: cve_origin_upstream_poc failed, osp:", osp, ", err: ", err)
				o.Rollback()
				return 0, err
			}

			ose.CveId = num
			lose := OriginUpstreamEvent{CveId: num}
			errx := o.Read(&lose, "CveId")
			if errx == orm.ErrNoRows || errx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_event 不存在, cveId: ", num)
			} else {
				losed := OriginUpstreamEvent{CveId: num}
				o.Delete(&losed, "CveId")
			}
			if osenum, err := o.Insert(ose); err == nil {
				logs.Info("insert  Table: cve_origin_upstream_event success, osenum:", osenum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert  Table: cve_origin_upstream_event failed, ose:", ose, ", err: ", err)
				o.Rollback()
				return 0, err
			}

			lousr := OriginUpstreamReference{CveId: num}
			o.Delete(&lousr, "CveId")
			if CveData.ReferenceData != nil && len(CveData.ReferenceData) > 0 {
				for _, ref := range CveData.ReferenceData {
					var lousrd OriginUpstreamReference
					lousrd.CveId = num
					lousrd.Url = ref.Url
					lousrd.Refsource = ref.Refsource
					lousrd.Name = ref.Name
					tags := ""
					if ref.Tags != nil && len(ref.Tags) > 0 {
						for _, ta := range ref.Tags {
							tags = tags + string(ta) + ","
						}
						tags = tags[:len(tags)-1]
					}
					lousrd.Tags = tags
					if lousrdnum, err := o.Insert(&lousrd); err == nil {
						logs.Info("insert  Table: cve_origin_upstream_reference success, lousrdnum:", lousrdnum, ", cveNum", ou.Ids)
					} else {
						logs.Error("insert  Table: cve_origin_upstream_reference failed, lousrd:", lousrd, ", err: ", err)
						o.Rollback()
						return 0, err
					}
				}
			}
			lousv := OriginUpstreamVulType{CveId: num}
			o.Delete(&lousv, "CveId")
			osv.CveId = num
			if osvnum, err := o.Insert(osv); err == nil {
				logs.Info("insert Table: cve_origin_upstream_vul_type success, osvnum:", osvnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert Table: cve_origin_upstream_vul_type failed, osv:", osv, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			ose.CveId = num
			lousfs := OriginUpstreamFixSuggest{CveId: num}
			errxxsx := o.Read(&lousfs, "CveId")
			if errxxsx == orm.ErrNoRows || errxxsx == orm.ErrMissPK {
				logs.Info("cve_origin_upstream_fix_suggest 不存在, cveId: ", num)
			} else {
				var lousfst []OriginUpstreamFixSuggestRef
				louscNum, err := o.Raw("select * from cve_origin_upstream_fix_suggest_ref where fix_id = ?", lousfs.FixId).QueryRows(&lousfst)
				if err != nil {
					logs.Info("cve_origin_upstream_fix_suggest_ref 不存在, louscNum: ", louscNum, "err: ", err)
				} else {
					for _, sc := range lousfst {
						lorfrt := OriginUpstreamFixSuggestRefTag{FixRefId: sc.FixRefId}
						o.Delete(&lorfrt, "FixRefId")
					}
					lo := OriginUpstreamFixSuggestRef{FixId: lousfs.FixId}
					o.Delete(&lo, "FixId")
				}
				lousfsx := OriginUpstreamFixSuggest{CveId: num}
				o.Delete(&lousfsx, "CveId")
			}
			osf.CveId = num
			if osfnum, err := o.Insert(osf); err == nil {
				logs.Info("insert  Table: cve_origin_upstream_fix_suggest success, osfnum:", osfnum, ", cveNum", ou.Ids)
			} else {
				logs.Error("insert  Table: cve_origin_upstream_fix_suggest failed, osf:", osf, ", err: ", err)
				o.Rollback()
				return 0, err
			}
			if CveData.FixSuggest.References != nil && len(CveData.FixSuggest.References) > 0 {
				for _, refer := range CveData.FixSuggest.References {
					var lousfstr OriginUpstreamFixSuggestRef
					lousfstr.FixId = osf.FixId
					lousfstr.Name = refer.Name
					lousfstr.Refsource = refer.Refsource
					lousfstr.Url = refer.Url
					if osfstrnum, err := o.Insert(&lousfstr); err == nil {
						logs.Info("insert  Table: cve_origin_upstream_fix_suggest_ref success, osfstrnum:", osfstrnum, ", cveNum", ou.Ids)
					} else {
						logs.Error("insert  Table: cve_origin_upstream_fix_suggest_ref failed, lousfstr:", lousfstr, ", err: ", err)
						o.Rollback()
						return 0, err
					}
					if refer.Tags != nil && len(refer.Tags) > 0 {
						for _, refertag := range refer.Tags {
							var loufsrtg OriginUpstreamFixSuggestRefTag
							loufsrtg.FixRefId = lousfstr.FixRefId
							loufsrtg.Name = refertag
							if osfstgrnum, err := o.Insert(&loufsrtg); err == nil {
								logs.Info("insert  Table: cve_origin_upstream_fix_suggest_ref_tag success, osfstgrnum:", osfstgrnum, ", cveNum", ou.Ids)
							} else {
								logs.Error("insert  Table: cve_origin_upstream_fix_suggest_ref_tag failed, loufsrtg:", loufsrtg, ", err: ", err)
								o.Rollback()
								return 0, err
							}
						}
					}
				}
			}
			o.Commit()
		}
	} else {
		logs.Error("事务创建失败，cveNum:", ou.CveNum)
		return 0, errs
	}
	return 0, nil
}

func QueryCveErrorInfo(issueStatus int8, startDate, endDate string) ([]IssueTemplate, bool) {
	o := orm.NewOrm()
	var it []IssueTemplate
	var num int64
	var err error
	if startDate != "" {
		num, err = o.Raw("select cve_num,error_description,create_time from cve_issue_template "+
			"where issue_status = ? and create_time >= ? and create_time <= ?", issueStatus, startDate, endDate).QueryRows(&it)
	} else {
		num, err = o.Raw("select cve_num,error_description,create_time from cve_issue_template "+
			"where issue_status = ? and create_time <= ?", issueStatus, endDate).QueryRows(&it)
	}

	if err != nil || num == 0 {
		logs.Info(issueStatus, startDate, endDate, ", cve_issue_template 无对应数据")
		return it, false
	} else {
		logs.Info(issueStatus, startDate, endDate, ", cve_issue_template 查询成功")
		return it, true
	}
}
