package controllers

import (
	"cvevulner/common"
	"cvevulner/errcode"
	"cvevulner/models"
	"encoding/json"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/logs"
	"strings"
)

type UserUploadController struct {
	beego.Controller
}

type ResultData struct {
	CveNum string `json:"CveNum"`
	Status int `json:"Status"`
}

func (c *UserUploadController) RetData(resp map[string]interface{}) {
	c.Data["json"] =resp
	c.ServeJSON()
}

// @Title UserUpload
// @Description UserUpload
// @Param	body		body 	models.OriginUpstream	true		"body for user content"
// @Success 200 {int} models.OriginUpstream.CveId
// @Failure 403 body is empty
// @router / [post]
func (u *UserUploadController) Post() {
	var uploaddata common.UploadData
	var ResDataList []ResultData
	req := u.Ctx.Request
	addr := req.RemoteAddr
	logs.Info("Method: ",req.Method, "客户端请求的：addr: ", addr, "Header: ", req.Header)
	resp := make(map[string]interface{})
	resp["errno"]=errcode.RECODE_UNKNOWERR
	resp["errmsg"]=errcode.RecodeText(errcode.RECODE_UNKNOWERR)
	resp["body"] = []ResultData{}
	defer u.RetData(resp)
	json.Unmarshal(u.Ctx.Input.RequestBody,&uploaddata)
	logs.Info("Cve上传请求参数：", &uploaddata)
	var iw models.IpWhite
	if addr != "" {
		addrIp := strings.Split(addr, ":")
		err := models.GetIpWhite(addrIp[0], &iw)
		if err != nil {
			resp["errno"]=errcode.RECODE_IPERR
			resp["errmsg"]=errcode.RecodeText(errcode.RECODE_IPERR)
			return
		}
	} else {
		resp["errno"]=errcode.RECODE_IPERR
		resp["errmsg"]=errcode.RecodeText(errcode.RECODE_IPERR)
		return
	}
	//判断是否合法
	if uploaddata.Token == "" {
		resp["errno"]=errcode.RECODE_SESSIONERR
		resp["errmsg"]=errcode.RecodeText(errcode.RECODE_SESSIONERR)
		resp["body"] = []ResultData{}
		logs.Error("token 校验失败")
		return
	} else {
		// 校验token
		ok := models.CheckToken(uploaddata.Token)
		if !ok {
			resp["errno"]=errcode.RECODE_SESSIONERR
			resp["errmsg"]=errcode.RecodeText(errcode.RECODE_SESSIONERR)
			resp["body"] = []ResultData{}
			logs.Error("token 校验失败")
			return
		}
	}
	if uploaddata.CveData == nil || len(uploaddata.CveData) == 0{
		resp["errno"]=errcode.RECODE_NODATA
		resp["errmsg"]=errcode.RecodeText(errcode.RECODE_NODATA)
		resp["body"] = []ResultData{}
		logs.Error("数据为空")
		return
	}
	//logs.Info(uploaddata.CveData, uploaddata.Token)
	for _, CveDataDict := range uploaddata.CveData {
		defer common.Catchs()
		logs.Info("每一条请求参数： ", CveDataDict)
		var ResData ResultData
		ids := CveDataDict.Ids
		if ids == "" {
			ResData.CveNum = ids
			ResData.Status = 1
			ResDataList = append(ResDataList, ResData)
			logs.Error("CveNum is null, cveDataDict:", CveDataDict)
			continue
		}
		cveNum := CveDataDict.CveNum
		if cveNum == "" {
			logs.Error("cveNum 为空, ids: ", ids)
		}
		updateType := CveDataDict.UpdateType
		cvePackName := CveDataDict.CvePackName
		packName := CveDataDict.PackName
		title := CveDataDict.Title
		affectProduct := CveDataDict.AffectProduct
		cnnvdID := CveDataDict.CnnvdID
		cnvdID := CveDataDict.CnvdID
		publishedDate := CveDataDict.PublishedDate
		vulStatus := CveDataDict.VulStatus
		if CveDataDict.Version == "" {
			logs.Error("Version 为空, ids: ", ids)
		}
		version := CveDataDict.Version
		var orCve models.OriginUpstream
		if ids != "" {
			ids = common.DeletePreAndSufSpace(ids)
		}
		orCve.Ids = ids
		if cveNum != "" {
			cveNum = common.DeletePreAndSufSpace(cveNum)
		}
		orCve.CveNum = cveNum
		orCve.Version = version
		orCve.UpdateType = updateType
		orCve.CvePackName = cvePackName
		if packName != "" {
			packName = common.DeletePreAndSufSpace(packName)
		}
		orCve.PackName = packName
		orCve.Title = title
		if affectProduct == "" {
			orCve.AffectProduct = packName
		}
		orCve.CnnvdID = cnnvdID
		orCve.CnvdID = cnvdID
		orCve.PublishedDate = publishedDate
		gits, ok := models.QueryCveOpeneulerdata(packName, version)
		if !ok {
			orCve.IsExit = 0
		} else {
			orCve.IsExit = 1
			logs.Info("对应src-openEuler的数据为: ", gits)
		}
		orCve.VulStatus = vulStatus
		if strings.ToLower(updateType) == "delete" {
			orCve.Status = 3
		} else if strings.ToLower(updateType) == "update" {
			orCve.Status = 1
		} else {
			orCve.Status = 0
		}
		orCve.CreateTime = common.GetCurTime()
		orCve.UpdateTime = common.GetCurTime()
		var od models.OriginUpstreamDesc
		od.EnDescription = CveDataDict.Description.EnDesc
		od.ZhDescription = CveDataDict.Description.ZhDesc
		var ous models.OriginUpstreamConfig
		ous.Nodes = " "
		var osi models.OriginUpstreamImpact
		osi.Impact = " "
		var osp models.OriginUpstreamPoc
		osp.Url = CveDataDict.Poc.Url
		osp.Date = CveDataDict.Poc.Date
		osp.Dbindex = CveDataDict.Poc.Dbindex
		osp.Desc = CveDataDict.Poc.Desc
		osp.Path = CveDataDict.Poc.Path
		osp.Source = CveDataDict.Poc.Source
		var ose models.OriginUpstreamEvent
		ose.Date = CveDataDict.Event.Date
		ose.Url = CveDataDict.Event.Url
		ose.Description = CveDataDict.Event.Description
		ose.Title = CveDataDict.Event.Title
		var osv models.OriginUpstreamVulType
		osv.ZhDesc = CveDataDict.VulType.Zh
		osv.EnDesc = CveDataDict.VulType.En
		osv.Cwe = CveDataDict.VulType.Cwe
		var osf models.OriginUpstreamFixSuggest
		osf.Detail = CveDataDict.FixSuggest.Detail
		dbCve, ok := models.QueryCveOriginByIds(ids)
		if ok {
			if orCve.Status != 3 {
				orCve.Status = 1
			}
			orCve.UpdateTime = common.GetCurTime()
			if orCve.Status == 3 {
				orCve.DeleteTime = common.GetCurTime()
			}
			logs.Info("当前插入的数据已经存在： ", dbCve)
		}
		_, err := models.CreateOriginCve(CveDataDict, &orCve, &od, &ous, &osi, &osp, &ose, &osv, &osf)
		if err == nil {
			logs.Info("cve 原始数据创建成功 CveNum:", CveDataDict.Ids)
			ResData.CveNum = CveDataDict.Ids
			ResData.Status = 0
			ResDataList = append(ResDataList, ResData)
		} else {
			logs.Info("cve 创建失败 CveNum:", CveDataDict.Ids)
			ResData.CveNum = CveDataDict.Ids
			ResData.Status = 1
			ResDataList = append(ResDataList, ResData)
		}
	}
	resp["errno"]=errcode.RECODE_OK
	resp["errmsg"]=errcode.RecodeText(errcode.RECODE_OK)
	resp["body"] = ResDataList
	return
}
