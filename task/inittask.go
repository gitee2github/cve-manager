package task

import (
	"github.com/astaxie/beego/config"
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/toolbox"
)

func CheckOriCveTask(oricvecheck string, ch *chan bool) {
	logs.Info("校验原始cve数据 task start")
	CheckTask := toolbox.NewTask("CheckOriCve", oricvecheck, CheckOriCve)
	err := CheckTask.Run()
	if err != nil{
		logs.Error("创建校验原始cve数据失败 ,err:", err)
		return
	}
	toolbox.AddTask("CheckOriCve", CheckTask)
	toolbox.StartTask()
	//time.Sleep(time.Minute * 1)
	logs.Info("校验原始cve数据 task end")
	*ch <- true
	//defer toolbox.StopTask()
}

func InitYamlTask(getymal string, ch *chan bool) {
	logs.Info("获取yaml数据源 task start")
	YamlTask := toolbox.NewTask("GetYamlData", getymal, GetYamlData)
	err := YamlTask.Run()
	if err != nil{
		logs.Error("创建获取yaml数据源任务失败 ,err:", err)
		return
	}
	toolbox.AddTask("GetYamlData", YamlTask)
	toolbox.StartTask()
	//time.Sleep(time.Minute * 1)
	logs.Info("获取yaml数据源 task end")
	*ch <- true
	//defer toolbox.StopTask()
}

func InitCveTask(getcve string, ch *chan bool) {
	logs.Info("将cve原始数据生成cve库 task start")
	CveTask := toolbox.NewTask("ParamsCveOriginData", getcve, ParamsCveOriginData)
	err := CveTask.Run()
	if err != nil{
		logs.Error("创建Cve任务失败 ,err:", err)
		return
	}
	toolbox.AddTask("ParamsCveOriginData", CveTask)
	toolbox.StartTask()
	//time.Sleep(time.Minute * 1)
	logs.Info("将cve原始数据生成cve库 task end")
	*ch <- true
	//defer toolbox.StopTask()
}

func InitIssueTask(getissue string, ch *chan bool) {
	logs.Info("获取已经创建的issue数据源 task start")
	//taskhandler.GrabIssueByOrg("8457c66db66955376519059b97e33dd1","src-openeuler")
	issueTask := toolbox.NewTask("GetIssueData", getissue, GetIssueData)
	err := issueTask.Run()
	if err != nil{
		logs.Error("获取已经创建的issue数据源任务失败 ,err:", err)
		return
	}
	toolbox.AddTask("GetIssueData", issueTask)
	toolbox.StartTask()
	//time.Sleep(time.Minute * 1)
	logs.Info("获取已经创建的issue数据源 task end")
	*ch <- true
	//defer toolbox.StopTask()
}

func InitIssueToken(issueoath string, ch *chan bool) {
	logs.Info("执行获取token任务开始")
	TokenTask := toolbox.NewTask("GetGiteeToken", issueoath, GetGiteeToken)
	err := TokenTask.Run()
	if err != nil{
		logs.Error("create Issue token task failed ,err:", err)
		return
	}
	toolbox.AddTask("GetGiteeToken", TokenTask)
	toolbox.StartTask()
	//time.Sleep(time.Minute * 1)
	logs.Info("执行获取token任务结束")
	*ch <- true
	//defer toolbox.StopTask()
}

func CreatTask(createIssue string, ch *chan bool) {
	logs.Info("执行创建issue任务开始")
	cIssueTask := toolbox.NewTask("CreateIssue", createIssue, CreateIssue)
	err := cIssueTask.Run()
	if err != nil{
		logs.Error("create Issue task failed ,err:", err)
		return
	}
	toolbox.AddTask("CreateIssue", cIssueTask)
	toolbox.StartTask()
	//time.Sleep(time.Minute * 1)
	logs.Info("执行创建issue任务结束")
	*ch <- true
	//defer toolbox.StopTask()
}

func InitTask() {
	BConfig, err := config.NewConfig("ini", "conf/app.conf")
	if err != nil{
		logs.Error("config init error: file:conf/app.conf: ", err)
		return
	}
	// 获取原始的yaml数据
	ymalflag, errxs := BConfig.Int("crontab::ymalflag")
	if ymalflag == 1 && errxs == nil {
		getymal := BConfig.String("crontab::getymal")
		var yamch = make(chan bool)
		go InitYamlTask(getymal, &yamch)
		<-yamch
		close(yamch)
	}
	// 校验原始cve数据
	oricveflag, errxs := BConfig.Int("crontab::oricveflag")
	if oricveflag == 1 && errxs == nil {
		oricvecheck := BConfig.String("crontab::oricvecheck")
		var checkch = make(chan bool)
		go CheckOriCveTask(oricvecheck, &checkch)
		<-checkch
		close(checkch)
	}
	// 定时刷新gittoken
	gittokenflag, errx := BConfig.Int("crontab::gittokenflag")
	if gittokenflag == 1 && errx == nil{
		issueoath := BConfig.String("crontab::issueoath")
		var ch = make(chan bool)
		// 定时刷新token
		go InitIssueToken(issueoath, &ch)
		// 从环境变量获取token
		//gitToken := BConfig.String("gitee::git_token")
		//if gitToken == "xxx" {
		//	go InitIssueToken(issueoath, &ch)
		//}
		<- ch
		close(ch)
	}
	// 获取已经创建的issue
	getissueflag, errxs := BConfig.Int("crontab::getissueflag")
	if getissueflag == 1 && errxs == nil {
		getissue := BConfig.String("crontab::getissue")
		var issuech = make(chan bool)
		go InitIssueTask(getissue, &issuech)
		<-issuech
		close(issuech)
	}
	// 生成cve漏洞库
	cveflag, errxs := BConfig.Int("crontab::cveflag")
	if cveflag == 1 && errxs == nil {
		getcve := BConfig.String("crontab::getcve")
		var cvech = make(chan bool)
		go InitCveTask(getcve, &cvech)
		<-cvech
		close(cvech)
	}
	// 添加issue
	taskFlag, errx := BConfig.Int("crontab::issueflag")
	if taskFlag == 1 && errx == nil{
		var ch = make(chan bool)
		createIssue := BConfig.String("crontab::createissue")
		go CreatTask(createIssue, &ch)
		<- ch
		close(ch)
	} else {
		logs.Info("no task")
	}
}

