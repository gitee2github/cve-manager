package common

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"encoding/base64"
	"errors"
	"flag"
	"fmt"
	"github.com/astaxie/beego/logs"
	"math/rand"
	"time"
	jwt "github.com/dgrijalva/jwt-go"
)


//PKCS7 填充模式
func PKCS7Padding(ciphertext []byte, blockSize int) []byte {
	padding := blockSize - len(ciphertext)%blockSize
	//Repeat()函数的功能是把切片[]byte{byte(padding)}复制padding个，然后合并成新的字节切片返回
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(ciphertext, padtext...)
}

//填充的反向操作，删除填充字符串
func PKCS7UnPadding(origData []byte) ([]byte, error) {
	//获取数据长度
	length := len(origData)
	if length == 0 {
		return nil, errors.New("加密字符串错误！")
	} else {
		//获取填充字符串长度
		unpadding := int(origData[length-1])
		//截取切片，删除填充字节，并且返回明文
		return origData[:(length - unpadding)], nil
	}
}

//实现加密
func AesEcrypt(origData []byte, key []byte) ([]byte, error) {
	//创建加密算法实例
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	//获取块的大小
	blockSize := block.BlockSize()
	//对数据进行填充，让数据长度满足需求
	origData = PKCS7Padding(origData, blockSize)
	//采用AES加密方法中CBC加密模式
	blocMode := cipher.NewCBCEncrypter(block, key[:blockSize])
	crypted := make([]byte, len(origData))
	//执行加密
	blocMode.CryptBlocks(crypted, origData)
	return crypted, nil
}

//实现解密
func AesDeCrypt(cypted []byte, key []byte) ([]byte, error) {
	//创建加密算法实例
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	//获取块大小
	blockSize := block.BlockSize()
	//创建加密客户端实例
	blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])
	origData := make([]byte, len(cypted))
	//这个函数也可以用来解密
	blockMode.CryptBlocks(origData, cypted)
	//去除填充字符串
	origData, err = PKCS7UnPadding(origData)
	if err != nil {
		return nil, err
	}
	return origData, err
}

//加密base64
func EnPwdCode(pwd []byte, key []byte) (string, error) {
	result, err := AesEcrypt(pwd, key)
	if err != nil {
		return "", err
	}
	return base64.StdEncoding.EncodeToString(result), err
}

//解密
func DePwdCode(pwd string, key []byte) ([]byte, error) {
	//解密base64字符串
	pwdByte, err := base64.StdEncoding.DecodeString(pwd)
	if err != nil {
		return nil, err
	}
	//执行AES解密
	return AesDeCrypt(pwdByte, key)

}
//func main() {
//	str := []byte("12fff我是ww.topgoer.com的站长枯藤")
//	pwd, _ := EnPwdCode(str)
//	bytes, _ := DePwdCode(pwd)
//	fmt.Println(string(bytes))
//}

var (
	length  int
	charset string
)

const (
	NUmStr  = "0123456789"
	CharStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	SpecStr = "+=-@#~,.[]()!%^*$"
)

//解析参数
func parseArgs(lens int) {
	//需要接受指针，就传递地址,&
	//flag.IntVar(&length, "l", 16, "-l 生成密码的长度")
	//flag.StringVar(&charset, "t", "num",
	//	//反引号以原样输出
	//	`-t 制定密码生成的字符集,
    //    num:只使用数字[0-9],
    //    char:只使用英文字母[a-zA-Z],
    //    mix:使用数字和字母，
    //    advance:使用数字、字母以及特殊字符`)
	length = lens
	charset = "advance"
	flag.Parse()
}

//检测字符串中的空格
func test1() {
	for i := 0; i < len(CharStr); i++ {
		if CharStr[i] != ' ' {
			fmt.Printf("%c", CharStr[i])
		}
	}
}

func generatePasswd() string {
	//初始化密码切片
	var passwd []byte = make([]byte, length, length)
	//源字符串
	var sourceStr string
	//判断字符类型,如果是数字
	if charset == "num" {
		sourceStr = NUmStr
		//如果选的是字符
	} else if charset == "char" {
		sourceStr = charset
		//如果选的是混合模式
	} else if charset == "mix" {
		sourceStr = fmt.Sprintf("%s%s", NUmStr, CharStr)
		//如果选的是高级模式
	} else if charset == "advance" {
		sourceStr = fmt.Sprintf("%s%s%s", NUmStr, CharStr, SpecStr)
	} else {
		sourceStr = NUmStr
	}
	fmt.Println("source:", sourceStr)

	//遍历，生成一个随机index索引,
	for i := 0; i < length; i++ {
		index := rand.Intn(len(sourceStr))
		passwd[i] = sourceStr[index]
	}
	return string(passwd)
}

func GenPrivKey(lens int) string{
	//随机种子
	rand.Seed(time.Now().UnixNano())
	parseArgs(lens)
	//fmt.Printf("length:%d charset:%s\n", length, charset)
	//test1()
	passwd := generatePasswd()
	fmt.Println(passwd)
	fmt.Printf("length:%d charset:%s\n", length, charset)
	return passwd
}



type Claims struct {
	username string
	password string
	jwt.StandardClaims
}

func setting(jwtkey []byte, username, password string) (string, error){
	expireTime := time.Now().Add(7 * 24 * time.Hour)
	claims := &Claims{
		username: username,
		password: password,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: expireTime.Unix(), //过期时间
			IssuedAt:  time.Now().Unix(),
			Issuer:    "127.0.0.1",  // 签名颁发者
			Subject:   "user token", //签名主题
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	// fmt.Println(token)
	tokenString, err := token.SignedString(jwtkey)
	if err != nil {
		logs.Error(err)
		return "", err
	}
	return tokenString, nil
}

func GenToken(username, password string) (string, error){
	pKey := GenPrivKey(16)
	var jwtkey = []byte(pKey)
	tokens,err := setting(jwtkey, username, password)
	return tokens, err
}

////解析token
//func getting(tokenString string) (string, struct{}){
//	token, claims, err := ParseToken(tokenString)
//	if err != nil || !token.Valid {
//		return "", struct{}{}
//	}
//	return token,
//}
//
//func ParseToken(tokenString string) (*jwt.Token, *Claims, error) {
//	Claims := &Claims{}
//	token, err := jwt.ParseWithClaims(tokenString, Claims, func(token *jwt.Token) (i interface{}, err error) {
//		return jwtkey, nil
//	})
//	return token, Claims, err
//}

