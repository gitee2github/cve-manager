#!/usr/bin/python
# -*- coding: UTF-8 -*-

################################################################################
#
# Copyright (c) 2020 openEuler.org, Inc. All Rights Reserved
#
################################################################################
"""
Control task

Authors: xiaojianghui
Date:    10/22/2020 11:01 AM
"""

from tabletask import runtask, mappingtask, toexcel
from gitwebtask import genegroup, yamltask
from emailtask import sendingtask
from downloadtask import downloadfiletask
from deletetask import deletefiletask


def toexcelcontroller():
    """
    Query the data whose cve_status status is 3 or 4 in the
    database to generate excel Modify the status of cve_status to 3 or 4 to 5,
    indicating that it has been added to excel to be processed

    Returns:
        return None
    """

    print("Export data to generate excel, send error data feedback email task start")
    toexcel.MysqlToExcel().generate_table()
    toexcel.MysqlToExcel().update_status()
    sendingtask.sending()
    print("To excel and send email task completed")


def runtabletask():
    """
    Parse the artificial CVE table, crawl the CVE official
    website data, and store it in the database
    return None
    """

    print("Analyze the manual data table, crawl the CVE official website data, and start the timing task")
    runtask.crawlWeb()
    print("Analyze the manual data table, crawl the CVE official website data task completed")


def runmappeingtask():
    """
    Parse the artificial CVE table, crawl the CVE
    official website data, and store it in the database
    return None
    """

    print("The timing task of parsing the package name mapping table starts")
    mappingtask.toMysql()
    print("The timing task of parsing the package name mapping table completed")


def gwcontroller():
    """
    Grab warehouse yaml data
    return None
    """

    print("Start of crawling organization, warehouse, owners correspondence relationship timing task")
    genegroup.Command().handle()
    yamltask.Task().download()
    yamltask.Task().read()
    print("Grab warehouse yaml data task completed")


def rundownloadtask():
    """
    download files
    return None
    """

    print("Download file timing task starts")
    downloadfiletask.handle_one()
    downloadfiletask.handle_two()
    print("Download file task completed")


def rundelfiletask():
    """
    Delete files older than one month
    return None
    """

    print("Clean up the folder timed task starts")
    deletefiletask.deldir("./oldexcels")
    print("Clean up the folder task completed")