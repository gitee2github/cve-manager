package models

import (
	"cvevulner/common"
	"cvevulner/util"
	"errors"
	"fmt"
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/orm"
	"strings"
	"sync"
)

var mutex sync.Mutex

//QueryIssueCveByNum query issue by cve num
func QueryIssueCveByNum(cvenum, repoPath string) (GiteOriginIssue, bool) {
	o := orm.NewOrm()
	var cve GiteOriginIssue
	err := o.Raw("select * from cve_gite_origin_issue where cve_number = ? and repo_path = ?", cvenum, repoPath).QueryRow(&cve)
	if err != nil {
		logs.Error(cvenum, "cve_gite_origin_issue 查询不到")
		return cve, false
	} else {
		return cve, true
	}
}

//QueryIssue query center
func QueryIssue(days string, prcnum int) ([]VulnCenter, error) {
	o := orm.NewOrm()
	var vc []VulnCenter
	num, err := o.Raw("select cve_id,cve_num,cve_desc,cve_version,repair_time,"+
		"pack_name,cve_url,cve_level,data_source,update_time,is_export,cve_detail_url"+
		" from cve_vuln_center where update_time >= ? and cve_status in (?, ?) "+
		"order by cve_id asc limit ?", days, 0, 1, prcnum).QueryRows(&vc)
	if err == nil && num > 0 {
		logs.Info("cve_vuln_center 查询结果：", vc)
	} else {
		logs.Info("当前无cve,需要提交issue, cur_time:", common.GetCurTime(), "err: ", err)
	}
	return vc, err
}

func GetVulnCenterByCVEID(vc *VulnCenter, cveId int64, fields ...string) error {
	o := orm.NewOrm()
	var fieldsStr string
	if len(fields) == 0 {
		fieldsStr = "*"
	} else {
		fieldsStr = strings.Join(fields, ",")
	}
	sqlStr := fmt.Sprintf(`select %v from cve_vuln_center where cve_id=?`, fieldsStr)
	err := o.Raw(sqlStr, cveId).QueryRow(vc)
	return err
}

//QueryIssueSecurity 查找安全公告
func QueryIssueSecurity(cveId int64) (SecurityNotice, error) {
	o := orm.NewOrm()
	var sn SecurityNotice
	err := o.Raw("select sec_id, cve_id,cve_num,openeuler_id,introduction,summary,theme,"+
		"description,influence_component,affect_product,reference_link"+
		" from cve_security_notice where cve_id = ?", cveId).QueryRow(&sn)
	if err == nil {
		logs.Info("cve_security_notice 查询结果：", sn)
	} else {
		logs.Info("查询 cve_security_notic err, cveId: ", cveId, "err: ", err)
	}
	return sn, err
}

func QueryIssueScore(cveId int64) (Score, error) {
	o := orm.NewOrm()
	var sc Score
	err := o.Raw("select *"+
		" from cve_score where cve_id = ?", cveId).QueryRow(&sc)
	if err == nil {
		logs.Info("cve_score 查询结果：", sc)
	} else {
		logs.Info("查询 cve_score err, cveId: ", cveId, "err: ", err)
	}
	return sc, err
}

func QueryCveBrands(gitId int64) ([]GitOpenEulerTableRelate, error) {
	o := orm.NewOrm()
	var gt []GitOpenEulerTableRelate
	var num int64
	num, err := o.Raw("select *"+
		" from cve_git_open_euler_table_relate where git_id = ?", gitId).QueryRows(&gt)
	if err == nil && num > 0 {
		logs.Info("cve_git_open_euler_table_relate 查询结果：", gt)
		return gt, nil
	} else {
		logs.Info("查询 cve_git_open_euler_table_relate err, gitId: ", gitId, "err: ", err)
	}
	return gt, err
}

func QueryIssueScoreRecord(cveId int64, status int8) (ScoreRecord, error) {
	o := orm.NewOrm()
	var sr ScoreRecord
	err := o.Raw("select id, cve_id, nvd_score, n_vector_value"+
		" from cve_score_record where cve_id = ? and status = ? order by id desc limit 1", cveId, status).QueryRow(&sr)
	if err == nil {
		logs.Info("cve_score_record 查询结果：", sr)
	} else {
		logs.Info("查询 cve_score_record err, cveId: ", cveId, "err: ", err)
	}
	return sr, err
}

func GetIssueTemplet(it *IssueTemplate) (localIt IssueTemplate, value bool) {
	o := orm.NewOrm()
	err := o.Raw("select *"+
		" from cve_issue_template where cve_id = ? ", it.CveId).QueryRow(&localIt)
	if err == nil {
		logs.Info("cve_issue_template 查询结果：", localIt)
		return localIt, true
	} else {
		logs.Info("查询 cve_issue_template err, cveId: ", it.CveId, "err: ", err)
		return localIt, false
	}
}

func GetIssueTemplateByColName(it *IssueTemplate, colName string) error {
	o := orm.NewOrm()
	err := o.Read(it, colName)
	return err
}

func UpdateIssueTemplate(it *IssueTemplate, fields ...string) error {
	logs.Error("===>", it, fields)
	o := orm.NewOrm()
	_, err := o.Update(it, fields...)
	return err
}

func UpdateScore(s *Score, fields ...string) error {
	o := orm.NewOrm()
	_, err := o.Update(s, fields...)
	return err
}

func UpdatePackageByCveId(pkgStr string, cveId int64) error {
	mutex.Lock()
	defer mutex.Unlock()
	if pkgStr == "" || cveId == 0 {
		return errors.New("param pkgStr,cveId must be not empty")
	}
	ps := strings.Split(pkgStr, ",")
	if len(ps) > 0 {
		sec := struct {
			SecId int64
		}{}
		secSql := `SELECT sec_id FROM cve_security_notice WHERE cve_id = ?`
		o := orm.NewOrm()
		err := o.Raw(secSql, cveId).QueryRow(&sec)
		if err != nil {
			return err
		}
		for _, v := range ps {
			tv := util.TrimString(v)
			if tv == "" {
				continue
			}
			pkg := Package{SecId: sec.SecId, PackName: tv}
			errx := o.Read(&pkg, "sec_id", "pack_name")
			if errx == orm.ErrNoRows {
				pkg.PackUrl = fmt.Sprintf(`https://repo.openeuler.org/openEuler-20.03-LTS/update/aarch64/Packages/%s`, tv)
				_, errx = o.Insert(&pkg)
			}
		}
		return nil
	}
	return nil
}

func QueryPackageByCveId(cveId int64) ([]Package, error) {
	sqlStr := `SELECT * FROM cve_package WHERE sec_id = (SELECT sec_id FROM cve_security_notice WHERE cve_id = ?)`
	var res []Package
	o := orm.NewOrm()
	_, err := o.Raw(sqlStr, cveId).QueryRows(&res)
	return res, err
}

func CreateIssueTemplate(it *IssueTemplate) (issTempId int64, err error) {
	o := orm.NewOrm()
	var localIt IssueTemplate
	errx := o.Raw("select *"+
		" from cve_issue_template where cve_id = ? ", it.CveId).QueryRow(&localIt)
	if errx != nil {
		var issTempId int64
		if issTempId, err = o.Insert(it); err == nil {
			logs.Info("insert cve_issue_template success, issTempId: ", issTempId, "cveNum: ", it.CveNum)
		} else {
			logs.Error("insert issTempId failed, cveNum:", it.CveNum, "err: ", err)
			return 0, err
		}
		return issTempId, nil
	} else {
		it.TemplateId = localIt.TemplateId
		if num, err := o.Update(it); err == nil {
			logs.Info("update cve_issue_template success, num: ", num, "cveNum: ", it.CveNum)
		} else {
			logs.Error("update issTempId failed, cveNum:", it.CveNum, "err: ", err)
			return 0, err
		}
		return it.TemplateId, nil
	}
}

func GetIssueHook(ih *IssueHooks) (localh []IssueHooks, value bool) {
	o := orm.NewOrm()
	var localIh []IssueHooks
	var num int64
	num, err := o.Raw("select *"+
		" from cve_issue_hooks where owner = ? and repo = ? and status = ?", ih.Owner, ih.Repo, ih.Status).QueryRows(&localIh)
	if err == nil && num > 0 {
		logs.Info("cve_issue_hooks 查询结果：", localIh)
		return localIh, true
	} else {
		logs.Info("查询 cve_issue_hooks err, cveId: ", ih.CveId, "err: ", err)
		return localIh, false
	}
}

func CreateDepositHooks(ih *IssueHooks) (issHookId int64, err error) {
	o := orm.NewOrm()
	var localIh IssueHooks
	localIh.CveId = ih.CveId
	localIh.IssueNum = ih.IssueNum
	errx := o.Raw("select *"+
		" from cve_issue_hooks where owner = ? and repo = ? and status = ?", ih.Owner, ih.Repo, ih.Status).QueryRow(&localIh)
	if errx == nil {
		logs.Info("cve_issue_hooks 查询结果：", localIh)
		ih.Id = localIh.Id
		if num, err := o.Update(ih); err == nil {
			logs.Info("update cve_issue_hook success, issHookId: ", num, "IssueNum: ", ih.IssueNum)
		} else {
			logs.Error("update cve_issue_hook failed, IssueNum:", ih.IssueNum, "err: ", err)
			return 0, err
		}
		return ih.Id, nil
	} else {
		logs.Info("查询 cve_issue_hooks err, cveId: ", ih.CveId, "err: ", err)
		var issHookId int64
		if issHookId, err = o.Insert(ih); err == nil {
			logs.Info("insert cve_issue_hook success, issHookId: ", issHookId, "IssueNum: ", ih.IssueNum)
		} else {
			logs.Error("insert cve_issue_hook failed, IssueNum:", ih.IssueNum, "err: ", err)
			return 0, err
		}
		return issHookId, nil
	}
}

func UpdateSecNotice(sec *SecurityNotice) (secId int64, err error) {
	o := orm.NewOrm()
	var localSec SecurityNotice
	localSec.CveId = sec.CveId
	localSec.CveNum = sec.CveNum
	errx := o.Raw("select *"+
		" from cve_security_notice where cve_id = ? and cve_num = ?", sec.CveId, sec.CveNum).QueryRow(&localSec)
	if errx == nil {
		logs.Info("cve_security_notice 查询结果：", localSec)
		sec.SecId = localSec.SecId
		sec.OpenId = localSec.OpenId
		sec.InfluenceComponent = localSec.InfluenceComponent
		sec.Description = localSec.Description
		sec.Summary = localSec.Summary
		sec.AffectStatus = localSec.AffectStatus
		sec.Status = localSec.Status
		sec.ReferenceLink = localSec.ReferenceLink
		if num, err := o.Update(sec); err == nil {
			logs.Info("update cve_security_notice success, SecID: ", num, "CveNum: ", sec.CveNum)
		} else {
			logs.Error("update cve_security_notice failed, SecID:", sec.SecId, "err: ", err)
			return 0, err
		}
		return sec.SecId, nil
	} else {
		logs.Info("查询 cve_security_notic err, cveId: ", sec.CveId, "err: ", err)
		var SecId int64
		if SecId, err = o.Insert(sec); err == nil {
			logs.Info("insert cve_security_notice success, SecID: ", SecId, "CveNum: ", sec.CveNum)
		} else {
			logs.Error("insert cve_security_notice failed, CveNum:", sec.CveNum, "err: ", err)
			return 0, err
		}
		return SecId, nil
	}
}

func UpdateIssueStatus(iss VulnCenter, status int8) (secId int64) {
	o := orm.NewOrm()
	_ = o.Raw("UPDATE cve_vuln_center SET cve_status = ? WHERE cve_id = ? and cve_num = ?", status, iss.CveId, iss.CveNum).QueryRow()
	return
}

func UpdateIssueScore(iss VulnCenter, status int8) (id int64) {
	o := orm.NewOrm()
	_ = o.Raw("UPDATE cve_score SET n_score_status = ? WHERE cve_id = ? and cve_num = ?", status, iss.CveId, iss.CveNum).QueryRow()
	return
}

func UpdateIssueScoreRe(iss VulnCenter, status int8) (id int64) {
	o := orm.NewOrm()
	_ = o.Raw("UPDATE cve_score_record SET status = ? WHERE cve_id = ? and status = ?", status, iss.CveId, 0).QueryRow()
	return
}

func UpdateIssueCommentId(issueNum, cveNum string, commentId int64) (id int64) {
	o := orm.NewOrm()
	_ = o.Raw("UPDATE cve_issue_template SET comment_id = ? WHERE issue_num = ? and cve_num = ?", commentId, issueNum, cveNum).QueryRow()
	return
}

//IssueExistByNumber Determine whether the issue exists
func IssueExistByNumber(number string) bool {
	if number == "" {
		return false
	}
	o := orm.NewOrm()
	exit := o.QueryTable("cve_issue_template").Filter("issue_num", number).Exist()
	return exit
}

func GetIssueTplByCveNum(num string) (list []IssueTemplate, err error) {
	o := orm.NewOrm()
	_, err = o.QueryTable("cve_issue_template").Filter("cve_num", num).All(&list)
	return
}

func GetIssueTplGroupByRepo() (list []IssueTemplate, err error) {
	o := orm.NewOrm()
	_, err = o.QueryTable("cve_issue_template").GroupBy("repo").All(&list)
	return
}
