package controllers

import (
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/logs"
)

type TriggerHeartbeatreadController struct {
	beego.Controller
}

func (c *TriggerHeartbeatreadController) RetCveData(resp map[string]interface{}) {
	c.Data["json"] = resp
	c.ServeJSON()
}

// @Title Heartbeatreadiness
// @Description Heartbeatreadiness
// @Param	body		body 	models.Heartbeatreadiness	true		"body for Heartbeatreadiness content"
// @Success 200 {int} models.Id
// @Failure 403 body is empty
// @router / [get]
func (u *TriggerHeartbeatreadController) Get() {
	req := u.Ctx.Request
	addr := req.RemoteAddr
	logs.Info("Method: ", req.Method, "Client request ip address: ", addr,
		", Header: ", req.Header, ", body: ", req.Body)
	resp := make(map[string]interface{})
	resp["code"] = "200"
	resp["errmsg"] = "success"
	resp["body"] = "success"
	defer u.RetCveData(resp)
}

type TriggerHeartbeatLiveController struct {
	beego.Controller
}

func (c *TriggerHeartbeatLiveController) RetCveData(resp map[string]interface{}) {
	c.Data["json"] = resp
	c.ServeJSON()
}

// @Title HeartbeatLive check
// @Description get HeartbeatLive
// @Param	nil
// @Success 200 {int}
// @Failure 403 :status is err
// @router / [get]
func (u *TriggerHeartbeatLiveController) Get() {
	req := u.Ctx.Request
	addr := req.RemoteAddr
	logs.Info("Method: ", req.Method, "Client request ip address: ", addr,
		", Header: ", req.Header, ", body: ", req.Body)
	resp := make(map[string]interface{})
	resp["code"] = "200"
	resp["errmsg"] = "success"
	resp["body"] = "success"
	defer u.RetCveData(resp)
}
