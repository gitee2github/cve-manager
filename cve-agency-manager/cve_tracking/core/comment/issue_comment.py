#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
from os import path
from util.gitee_api import Gitee


class Table:
    @staticmethod
    def _table(content):
        return f"<table>{content}</table>"

    @staticmethod
    def _th(content):
        return f"<th>{content}</th>"

    @staticmethod
    def _tr(content):
        return f"<tr>{content}</tr>"

    @staticmethod
    def _td(content):
        return f"<td>{content}</td>"

    @staticmethod
    def _rowspan(num, platform):
        return """<td rowspan="{}">{}</td>""".format(str(num), platform)

    def span_content(self, pr, commits):
        """
        Splicing comment content
        :param pr: pull request
        :param commits: commits
        :return: content spliced
        """
        contents = self._td(pr) + self._td(",".join(commits))
        return contents

    def _table_name(self):
        """
        Splicing header
        :return: header
        """
        table_names = ["参考网址", "关联pr", "补丁链接"]
        table_names = " ".join(map(self._th, table_names))
        return self._tr(table_names)

    def table(self, lst):
        """
        Splicing table
        :param lst: cve info
        :return: table
        """
        contents = ""
        for platforms in lst:
            platform_index = 0
            platform = platforms.get("platform")
            details = platforms.get("details")
            rowspan_content = self._rowspan(len(details), platform)
            if not details:
                td_cont = self._tr(self._td(platform) + self._td("") * 2)
                contents += td_cont

            for pr, commits in details.items():
                content = self.span_content(pr, commits)
                if platform_index == 0:
                    rowspan_content = rowspan_content + content
                    span_content = self._tr(rowspan_content)
                    platform_index += 1
                else:
                    span_content = self._tr(content)
                contents += span_content

        return self._table(self._table_name() + contents)


async def issue_comment(patch_details, number, gitee: Gitee):
    """
    Call gitee's api to add issue comments
    :param patch_details: patch detail
    :param number: issue number
    :param gitee: gitee instance
    :return: None
    """
    table = Table().table(patch_details)
    body = table + "\n" * 2 + "> 说明：补丁链接和应用结果仅供初步排查参考，实际应用请人工再次确认。"
    await gitee.create_issue_comment(number=number, body=body)
