package models

import (
	"cvevulner/common"
	"errors"
	"fmt"
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/orm"
	"strings"
)

func QueryOriginCveExcel(days string, prcnum int) ([]OriginExcel, int64, error) {
	o := orm.NewOrm()
	var coe []OriginExcel
	num, err := o.Raw("select cve_id,cve_num,cve_url, cve_version, pack_name,"+
		"score_type,nvd_score,cve_level,cve_desc,repair_time,vector_value,attack_vector,access_vector,attack_complexity,"+
		"access_complexity,privilege_required,user_interaction,scope,confidentiality,integrity,availability,authentication,"+
		"cve_status,create_time from cve_origin_excel where update_time >= ? and cve_status in (?, ?)"+
		"order by cve_id asc limit ?", days, 0, 1, prcnum).QueryRows(&coe)
	if err == nil && num > 0 {
		logs.Info("cve_origin_excel 查询结果： ", num)
	} else {
		logs.Info("当前无新增或者更新的cve, cur_time:", common.GetCurTime(), "err: ", err)
	}
	return coe, num, err
}

func UpdateCveIssueStatusById(status int, issueId int64) (id int64) {
	o := orm.NewOrm()
	_ = o.Raw("UPDATE cve_gite_origin_issue SET proc_status = ?, issue_update_at = ?"+
		" WHERE id = ?", status, common.GetCurTime(), issueId).QueryRow()
	return
}

func QueryOriginCveIssue(prcnum int) ([]GiteOriginIssue, int64, error) {
	o := orm.NewOrm()
	var gs []GiteOriginIssue
	num, err := o.Raw("select *"+
		" from cve_gite_origin_issue where proc_status = ? "+
		"order by id asc limit ?", 0, prcnum).QueryRows(&gs)
	if err == nil && num > 0 {
		logs.Info("cve_gite_origin_issue 查询结果： ", num)
	} else {
		logs.Info("当前无新增或者更新的cveissue, cve_gite_origin_issue, cur_time:", common.GetCurTime(), "err: ", err)
	}
	return gs, num, err
}

func QueryOriginCve(days string, prcnum int) ([]OriginUpstream, int64, error) {
	o := orm.NewOrm()
	var gs []OriginUpstream
	num, err := o.Raw("select cve_id,cve_un_ids,cve_num, update_type,cve_packname,"+
		"git_packname,cve_title,affect_porduct,cnnvd_id,cnvd_id,published_date,vul_status,cve_status,version"+
		" from cve_origin_upstream where update_time >= ? and cve_status in (?, ?) and is_exit = ? "+
		"order by cve_id asc limit ?", days, 0, 1, 1, prcnum).QueryRows(&gs)
	if err == nil && num > 0 {
		logs.Info("cve_origin_upstream 查询结果： ", num)
	} else {
		logs.Info("当前无新增或者更新的cve, cur_time:", common.GetCurTime(), "err: ", err)
	}
	return gs, num, err
}

func QueryCveDesc(cveId int64) (OriginUpstreamDesc, bool) {
	o := orm.NewOrm()
	var cveDesc OriginUpstreamDesc
	err := o.Raw("select * from cve_origin_upstream_desc where cve_id = ?", cveId).QueryRow(&cveDesc)
	if err != nil {
		logs.Error(cveId, "cve_origin_upstream_desc cve描述查询不到")
		return cveDesc, false
	} else {
		return cveDesc, true
	}
}

func QueryCveImpact(cveId int64) (OriginUpstreamImpact, bool) {
	o := orm.NewOrm()
	var cveImpact OriginUpstreamImpact
	err := o.Raw("select * from cve_origin_upstream_impact where cve_id = ?", cveId).QueryRow(&cveImpact)
	if err != nil {
		logs.Error(cveId, "cve_origin_upstream_impact cve impact 查询不到")
		return cveImpact, false
	} else {
		return cveImpact, true
	}
}

func QueryCveScore(impactId int64, typex string) (OriginUpstreamImpactScore, bool) {
	o := orm.NewOrm()
	var cveScore OriginUpstreamImpactScore
	if typex == "v3" {
		err := o.Raw("select * from cve_origin_upstream_impact_score where "+
			"impact_id = ? and base_met_v3=? and cvss_v3=?", impactId, 1, 1).QueryRow(&cveScore)
		if err != nil {
			logs.Error(impactId, "cve_origin_upstream_impact_score cve score 查询不到")
			return cveScore, false
		} else {
			return cveScore, true
		}
	} else {
		err := o.Raw("select * from cve_origin_upstream_impact_score where "+
			"impact_id = ? and base_met_v2=? and cvss_v2=?", impactId, 1, 1).QueryRow(&cveScore)
		if err != nil {
			logs.Error(impactId, "cve_origin_upstream_impact_score cve score 查询不到")
			return cveScore, false
		} else {
			return cveScore, true
		}
	}

}

func QueryCveCvssV3(scoreId int64) (OriginUpstreamImpactScoreV3, bool) {
	o := orm.NewOrm()
	var cveScoreV3 OriginUpstreamImpactScoreV3
	err := o.Raw("select * from cve_origin_upstream_impact_score_v3 where score_id = ?", scoreId).QueryRow(&cveScoreV3)
	if err != nil {
		logs.Error(scoreId, "cve_origin_upstream_impact_score_v3 cve cvssv3 查询不到")
		return cveScoreV3, false
	} else {
		return cveScoreV3, true
	}
}

func QueryCveCvssV2(scoreId int64) (OriginUpstreamImpactScoreV2, bool) {
	o := orm.NewOrm()
	var cveScoreV2 OriginUpstreamImpactScoreV2
	err := o.Raw("select * from cve_origin_upstream_impact_score_v2 where score_id = ?", scoreId).QueryRow(&cveScoreV2)
	if err != nil {
		logs.Error(scoreId, "cve_origin_upstream_impact_score_v2 cve cvssv2 查询不到")
		return cveScoreV2, false
	} else {
		return cveScoreV2, true
	}
}

func QueryCveByNum(cveNum, packName, version string) (VulnCenter, bool) {
	o := orm.NewOrm()
	var cve VulnCenter
	err := o.Raw("select * from cve_vuln_center where cve_num = ? and pack_name = ? and cve_version = ?",
		cveNum, packName, version).QueryRow(&cve)
	if err != nil || cve.CveId == 0 {
		return cve, false
	} else {
		return cve, true
	}
}

func UpdateCveStatusExportByNum(updatetime, cveNum string, status, isExport int, repoPath string) bool {
	o := orm.NewOrm()
	res, err := o.Raw("UPDATE cve_vuln_center SET "+
		"is_export = ?, cve_status = ?, update_time = ? where cve_num = ? and pack_name = ?",
		isExport, status, updatetime, cveNum, repoPath).Exec()
	if err == nil {
		num, _ := res.RowsAffected()
		if num > 0 {
			logs.Info("cve_vuln_center row affected nums: ", num, ",cveNum: ", cveNum, ",", updatetime)
			return true
		}
		return false
	} else {
		logs.Error("更新失败, cve_vuln_center, ", ",cveNum: ", cveNum, ",", updatetime, ", err: ", err)
		return false
	}
}

func QueryScoreByCveId(CveId int64) (Score, bool) {
	o := orm.NewOrm()
	var score Score
	err := o.Raw("select * from cve_score where cve_id = ?", CveId).QueryRow(&score)
	if err != nil {
		logs.Error(CveId, "cve_score 查询不到")
		return score, false
	} else {
		return score, true
	}
}

func QueryOpenEulerSAByCveId(CveId int64) (OpenEulerSA, bool) {
	o := orm.NewOrm()
	op := OpenEulerSA{CveId: CveId}
	err := o.Read(&op, "CveId")
	if err == orm.ErrNoRows {
		logs.Error(CveId, "cve_open_euler_s_a 查询不到")
		return op, false
	} else if err == orm.ErrMissPK {
		logs.Error(CveId, "cve_open_euler_s_a pk 查询不到")
		return op, false
	} else {
		return op, true
	}
}

func QuerySecNoticeByCveId(CveId int64) (SecurityNotice, bool) {
	o := orm.NewOrm()
	var secNotice SecurityNotice
	err := o.Raw("select * from cve_security_notice where cve_id = ?", CveId).QueryRow(&secNotice)
	if err != nil {
		logs.Error(CveId, "cve_security_notice 查询不到")
		return secNotice, false
	} else {
		return secNotice, true
	}
}

func CreateSecurityNotice(sec *SecurityNotice) (SecId int64, err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(sec); err == nil {
			logs.Info("insert cve_security_notice success, num:, cveNum", num, sec.CveNum)
		} else {
			logs.Error("insert cve_security_notice failed, cveNum:", sec.CveNum)
			err = o.Rollback()
			return 0, err
		}
		SecId = sec.SecId
		_ = o.Commit()
	} else {
		logs.Error("事务创建失败，cveNum:", sec.CveNum)
		return 0, errs
	}
	return SecId, nil
}

func CreateScore(score *Score) (Id int64, err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(score); err == nil {
			logs.Info("insert cve_score success, num:, cveNum:", num, score.CveNum)
		} else {
			logs.Error("insert cve_score failed, score:", score, "err:", err)
			o.Rollback()
			return 0, err
		}
		Id = score.Id
		o.Commit()
	} else {
		logs.Error("事务创建失败，cveNum:", score.CveNum)
		return 0, errs
	}
	return Id, nil
}

func CreateOpenEulerSA(op *OpenEulerSA) (OpenId int64, err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(op); err == nil {
			logs.Info("insert cve_open_euler_s_a success, num:, ", num, "CveId:", op.CveId)
		} else {
			logs.Error("insert cve_open_euler_s_a failed, CveId:", op.CveId, "err:", err)
			o.Rollback()
			return 0, err
		}
		OpenId = op.OpenId
		o.Commit()
	} else {
		logs.Error("事务创建失败，cveId:", op.CveId)
		return 0, errs
	}
	return OpenId, nil
}

func CreateScoreRecord(sc *ScoreRecord) (scoreId int64, err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(sc); err == nil {
			logs.Info("insert cve_score_record success, num:, ", num, "CveId:", sc.CveId)
		} else {
			logs.Error("insert cve_score_record failed, CveId:", sc.CveId, "err:", err)
			o.Rollback()
			return 0, err
		}
		scoreId = sc.Id
		o.Commit()
	} else {
		logs.Error("事务创建失败，cveId:", sc.CveId)
		return 0, errs
	}
	return scoreId, nil
}

func InsertScoreRecord(sc *ScoreRecord) (int64, error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		if num, err := o.Insert(sc); err == nil {
			logs.Info("insert cve_score_record, num:, CveId:", num, sc.CveId)
		} else {
			logs.Error("insert cve_score_record failed, CveId:", sc.CveId, ",err: ", err)
			o.Rollback()
			return 0, err
		}
		o.Commit()
	}
	return 0, nil
}

func CreateCveRelat(cve *VulnCenter, sec *SecurityNotice, score *Score,
	op *OpenEulerSA, sc *ScoreRecord) (cveid int64, err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		var err error
		if num, err = o.Insert(cve); err == nil {
			logs.Info("insert cve_vuln_center success, num:, cveNum:", num, cve.CveNum)
		} else {
			logs.Error("insert cve_vuln_center failed, CveNum:", cve.CveNum, ",err: ", err)
			o.Rollback()
			return 0, err
		}
		sec.CveId = num
		cveid = num
		op.CveId = cveid
		if num, err = o.Insert(op); err == nil {
			logs.Info("insert cve_open_euler_s_a success, num:, cveNum:", num, cve.CveNum)
		} else {
			logs.Error("insert cve_open_euler_s_a failed, CveNum:", cve.CveNum, ",err: ", err)
			o.Rollback()
			return 0, err
		}
		sec.OpenId = num
		score.OpenId = num
		if num, err = o.Insert(sec); err == nil {
			logs.Info("insert cve_security_notice success, num:, cveNum", num, cve.CveNum)
		} else {
			logs.Error("insert cve_security_notice failed, cveNum:", cve.CveNum, ",err: ", err)
			o.Rollback()
			return 0, err
		}
		score.CveId = cveid
		if num, err = o.Insert(score); err == nil {
			logs.Info("insert cve_score success, num:, cveNum:", num, cve.CveNum)
		} else {
			logs.Error("insert cve_score failed, CveNum:", cve.CveNum, ",err: ", err)
			o.Rollback()
			return 0, err
		}
		sc.CveId = cveid
		if num, err = o.Insert(sc); err == nil {
			logs.Info("insert cve_score_record, num:, CveId:", num, cve.CveId)
		} else {
			logs.Error("insert cve_score_record failed, CveId:", cve.CveId, ",err: ", err)
			o.Rollback()
			return 0, err
		}
		o.Commit()
	} else {
		logs.Error("事务创建失败，CveId:", cve.CveId, ",err: ", errs)
		return 0, errs
	}
	return cveid, nil
}

func UpdateCveRelat(cve *VulnCenter, sec *SecurityNotice, score *Score) error {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var cv VulnCenter
		cvError := o.Raw("select cve_id from cve_vuln_center where cve_id = ?", cve.CveId).QueryRow(&cv)
		if cvError == nil {
			var num int64
			var err error
			cve.CveId = cv.CveId
			if num, err = o.Update(cve); err == nil {
				logs.Info("update cve_vuln_center success, num:, cveNum", num, cve.CveNum)
			} else {
				logs.Error("update cve_vuln_center failed, CveId:", cve.CveId, ",err: ", err)
				o.Rollback()
				return err
			}
		} else {
			logs.Info("insert cve_vuln_center failed, CveId:", cve.CveId)
			var num int64
			var err error
			if num, err = o.Insert(cve); err == nil {
				logs.Info("insert cve_vuln_center success, num:, cveNum:", num, cve.CveNum)
			} else {
				logs.Error("insert cve_vuln_center failed, CveNum:", cve.CveNum, ",err:", err)
				o.Rollback()
				return err
			}

		}
		var se SecurityNotice
		seError := o.Raw("select sec_id from cve_security_notice where cve_id = ?", cve.CveId).QueryRow(&se)
		if seError == nil {
			var num int64
			sec.SecId = se.SecId
			var err error
			if num, err = o.Update(sec); err == nil {
				logs.Info("update cve_security_notice success, num:, cve.CveId", num, cve.CveId)
			} else {
				logs.Error("update cve_security_notice failed, CveId:", cve.CveId, ",err: ", err)
				o.Rollback()
				return err
			}
		} else {
			sec.CveId = cve.CveId
			var err error
			var num int64
			if num, err = o.Insert(sec); err == nil {
				logs.Info("insert cve_security_notice success, num:, cveNum:", num, cve.CveNum)
			} else {
				logs.Error("insert cve_security_notice failed, CveNum:", cve.CveNum, ",err:", err)
				o.Rollback()
				return err
			}
		}
		var sc Score
		scError := o.Raw("select id from cve_score where cve_id = ?", cve.CveId).QueryRow(&sc)
		if scError == nil {
			var num int64
			score.Id = sc.Id
			var err error
			if num, err = o.Update(score); err == nil {
				logs.Info("update cve_score success, num:, cve.CveId:", num, cve.CveId)
			} else {
				logs.Error("update cve_score failed, CveId:", cve.CveId, ",err: ", err)
				o.Rollback()
				return err
			}
		} else {
			score.CveId = cve.CveId
			if num, err := o.Insert(score); err == nil {
				logs.Info("insert cve_score success, num:, cveNum:", num, cve.CveNum)
			} else {
				logs.Error("insert cve_score failed, CveNum:", cve.CveNum, ",err: ", err)
				o.Rollback()
				return err
			}
		}
	} else {
		logs.Error("事务创建失败，CveId:", cve.CveId)
		return errs
	}
	o.Commit()
	return nil
}

func UpdateCveRelat1(cve *VulnCenter, sec *SecurityNotice) (err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		v := VulnCenter{CveId: cve.CveId}
		if err = o.Read(&v, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(cve); err == nil {
				logs.Info("update cve_vuln_center success, num:, cveNum", num, cve.CveNum)
			} else {
				logs.Error("update cve_vuln_center failed, CveId:", cve.CveId, ",err: ", err)
				o.Rollback()
				return err
			}
		} else {
			var num int64
			if num, err = o.Insert(cve); err == nil {
				logs.Info("insert cve_vuln_center success, num:, cveNum:", num, cve.CveNum)
			} else {
				logs.Error("insert cve_vuln_center failed, CveNum:", cve.CveNum, ",err:", err)
				o.Rollback()
				return err
			}
		}
		se := SecurityNotice{CveId: cve.CveId}
		if err = o.Read(&se, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(sec); err == nil {
				logs.Info("update cve_security_notice success, num:, cve.CveId:", num, cve.CveId)
			} else {
				logs.Error("update cve_security_notice failed, CveId:", cve.CveId, ",err: ", err)
				o.Rollback()
				return err
			}
		} else {
			sec.CveId = cve.CveId
			if num, err := o.Insert(sec); err == nil {
				logs.Info("insert cve_security_notice success, num:, cveNum:", num, cve.CveNum)
			} else {
				logs.Error("insert cve_security_notice failed, CveNum:", cve.CveNum, ",err:", err)
				o.Rollback()
				return err
			}
		}
	} else {
		logs.Error("事务创建失败，CveId:", cve.CveId, ",err: ", errs)
		return errs
	}
	o.Commit()
	return nil
}

func UpdateCveRelat2(cve *VulnCenter, score *Score) (err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		v := VulnCenter{CveId: cve.CveId}
		if err = o.Read(&v, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(cve); err == nil {
				logs.Info("update cve_vuln_center success, num:, cveNum", num, cve.CveNum)
			} else {
				logs.Error("update cve_vuln_center failed, CveId:", cve.CveId, ", err: ", err)
				o.Rollback()
				return err
			}
		} else {
			var num int64
			if num, err = o.Insert(cve); err == nil {
				logs.Info("insert cve_vuln_center success, num:, cveNum:", num, cve.CveNum)
			} else {
				logs.Error("insert cve_vuln_center failed, CveNum:", cve.CveNum, ",err:", err)
				o.Rollback()
				return err
			}
		}
		sc := Score{CveId: cve.CveId}
		if err = o.Read(&sc, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(score); err == nil {
				logs.Info("update cve_score success, num:, cve.CveId", num, cve.CveId)
			} else {
				logs.Error("update cve_score failed, CveId:", cve.CveId, ",err: ", err)
				o.Rollback()
				return err
			}
		} else {
			score.CveId = cve.CveId
			if num, err := o.Insert(score); err == nil {
				logs.Info("insert cve_score success, num:, cveNum:", num, cve.CveNum)
			} else {
				logs.Error("insert cve_score failed, CveNum:", cve.CveNum, ",err: ", err)
				o.Rollback()
				return err
			}
		}
	} else {
		logs.Error("事务创建失败，CveId:", cve.CveId, ",err: ", errs)
		return errs
	}
	o.Commit()
	return nil
}

func QueryOpenSaLastId() (OpenEulerSA, error) {
	o := orm.NewOrm()
	var os OpenEulerSA
	err := o.Raw("select openeuler_id, openeuler_sa_num from cve_open_euler_s_a order by openeuler_id desc limit 1").QueryRow(&os)
	if err == nil {
		logs.Info("OpenEulerSA 查询结果：", os)
	}
	return os, err
}

func QueryOpenSaById(cveId int64) (OpenEulerSA, error) {
	o := orm.NewOrm()
	var os OpenEulerSA
	err := o.Raw("select openeuler_id, openeuler_sa_num from cve_open_euler_s_a where cve_id = ?", cveId).QueryRow(&os)
	if err == nil {
		logs.Info("OpenEulerSA 查询结果：", os)
	}
	return os, err
}

func UpdateOriginStatus(updateTime, pakName, version string, cveId int64, status int) bool {
	o := orm.NewOrm()
	res, err := o.Raw("UPDATE cve_origin_upstream SET "+
		"cve_status = ?, update_time = ? where cve_id = ? and git_packname = ? and version = ?",
		status, updateTime, cveId, pakName, version).Exec()
	if err == nil {
		num, _ := res.RowsAffected()
		if num > 0 {
			logs.Info("cve_origin_upstream row affected nums: ",
				num, ",cveId: ", cveId, ",", updateTime, pakName, version)
			return true
		}
		return false
	} else {
		logs.Error("更新失败, cve_origin_upstream, ", ",cveId: ",
			cveId, ",", updateTime, pakName, version, ", err: ", err)
		return false
	}
}

func UpdateOriginExcelStatus(updateTime string, cveId int64, status int) bool {
	o := orm.NewOrm()
	res, err := o.Raw("UPDATE cve_origin_excel SET "+
		"cve_status = ?, update_time = ? where cve_id = ?", status, updateTime, cveId).Exec()
	if err == nil {
		num, _ := res.RowsAffected()
		if num > 0 {
			logs.Info("cve_origin_excel row affected nums: ", num, ",cveId: ", cveId, ",", updateTime)
			return true
		}
		return false
	} else {
		logs.Error("更新失败, cve_origin_excel, ", ",cveId: ", cveId, ",", updateTime, ", err: ", err)
		return false
	}
}

func UpdateVulnCenter(cve *VulnCenter, field ...string) bool {
	o := orm.NewOrm()
	_, err := o.Update(cve, field...)
	if err != nil {
		logs.Error(err)
		return false
	}
	return true
}

func GetVulnCenterByCid(cve *VulnCenter, field ...string) error {
	o := orm.NewOrm()
	err := o.Read(cve, field...)
	return err
}

func GetCanExportVulnCenterData() (data []VulnCenter, err error) {
	o := orm.NewOrm()
	qs := o.QueryTable("cve_vuln_center")
	_, err = qs.Filter("is_export", 3).All(&data)
	return
}

func GetCvePackageList(secId int64) (data []Package, err error) {
	o := orm.NewOrm()
	qs := o.QueryTable("cve_package")
	_, err = qs.Filter("sec_id", secId).All(&data)
	return
}

func GetCanExportVulnCenterCount() (count int64) {
	sql := ` SELECT COUNT(*) total FROM (SELECT COUNT(*) num,bc.cve_id,bc.cve_num 
 FROM (SELECT DISTINCT cve_num FROM cve_vuln_center WHERE is_export = 3) ac 
 JOIN cve_vuln_center bc ON ac.cve_num = bc.cve_num GROUP BY bc.cve_num) a`
	res := struct {
		Total int64
	}{}
	o := orm.NewOrm()
	err := o.Raw(sql).QueryRow(&res)
	if err != nil {
		logs.Error(err)
		return 0
	}
	return res.Total
}

func GetCanExportTheme(cveNums, component string) (string, error) {
	if cveNums == "" || component == "" {
		return "", errors.New("param is empty")
	}
	s := strings.Split(cveNums, ";\n")
	for k, v := range s {
		s[k] = "'" + v + "'"
	}
	cveNums = strings.Join(s, ",")
	type tmp = struct {
		OpenEulerScore float64 `orm:"column(openeuler_score)"`
		Theme          string
	}
	 res := make([]tmp,0)
	sql := fmt.Sprintf(`SELECT b.openeuler_score,a.theme FROM cve_issue_template b 
JOIN  cve_security_notice a ON a.cve_id = b.cve_id
WHERE b.cve_num IN (%s)
AND b.owned_component = '%s'`,cveNums,component)
	o := orm.NewOrm()
	_, err := o.Raw(sql).QueryRows(&res)
	if err !=  nil {
		return "", err
	}
	max := float64(0)
	resStr := ""
	for _,v :=range res {
		if max < v.OpenEulerScore {
			max = v.OpenEulerScore
			resStr = v.Theme
		}
	}
	return resStr,nil
}

func GetCanExportCveData(page int64, pageSize int) (list []ExcelExport, err error) {
	sql := `SELECT b.num,c.*,a.owned_component,a.cve_brief,
d.sec_id,d.introduction,d.summary,d.theme,d.description,d.influence_component,
d.affect_product,d.reference_link,d.affect_status,e.public_date,openeuler_sa_num
FROM cve_issue_template a 
RIGHT JOIN (SELECT COUNT(*) num,bc.cve_id,bc.cve_num FROM 
(SELECT DISTINCT cve_num FROM cve_vuln_center WHERE is_export = 3) ac 
JOIN cve_vuln_center bc ON ac.cve_num = bc.cve_num GROUP BY bc.cve_num  LIMIT ?,? ) b 
ON a.cve_id = b.cve_id
LEFT JOIN cve_score c
ON b.cve_id = c.cve_id
LEFT JOIN cve_security_notice d
ON b.cve_id = d.cve_id
LEFT JOIN cve_open_euler_s_a e
ON b.cve_id = e.cve_id
`
	o := orm.NewOrm()
	_, err = o.Raw(sql, page, pageSize).QueryRows(&list)
	return
}

//GetCanExportExcelData Get exportable data
func GetCanExportExcelData(cveNum, issueNum string) (list []ExcelExport, err error) {
	if cveNum == "" {
		return list, errors.New("cve number can not empty")
	}
	sql := `SELECT b.num,c.*,a.issue_num,a.owned_component,a.cve_brief,
d.sec_id,d.introduction,d.summary,d.theme,d.description,d.influence_component,
d.affect_product,d.reference_link,d.affect_status,e.public_date,openeuler_sa_num 
FROM cve_issue_template a 
RIGHT JOIN 
(SELECT (SELECT COUNT(*)  FROM cve_vuln_center  WHERE cve_num = ?) num ,bc.cve_id,bc.cve_num 
FROM cve_vuln_center bc WHERE bc.cve_num = ? AND bc.is_export = 3 ) b
ON a.cve_id = b.cve_id
LEFT JOIN cve_score c
ON b.cve_id = c.cve_id
LEFT JOIN cve_security_notice d
ON b.cve_id = d.cve_id
LEFT JOIN cve_open_euler_s_a e
ON b.cve_id = e.cve_id
WHERE a.issue_num = ? 
`
	o := orm.NewOrm()
	_, err = o.Raw(sql, cveNum, cveNum, issueNum).QueryRows(&list)
	return
}

func GetCanExportCveDataSameNum(cId string) (list []ExcelExport, err error) {
	sql := `SELECT a.cve_id,a.owned_component,a.cve_brief,c.*,d.sec_id,
d.introduction,d.summary,d.theme,d.description,d.influence_component,
d.affect_product,d.reference_link,d.affect_status,e.public_date,e.openeuler_sa_num
FROM cve_issue_template a 
LEFT JOIN cve_score c
ON c.cve_id = a.cve_id
LEFT JOIN cve_security_notice d
ON d.cve_id = a.cve_id
LEFT JOIN cve_open_euler_s_a e
ON e.cve_id = a.cve_id
WHERE a.cve_id IN (%s)
ORDER BY c.openeuler_score DESC
`
	sql = fmt.Sprintf(sql, cId)
	o := orm.NewOrm()
	_, err = o.Raw(sql).QueryRows(&list)
	return
}
