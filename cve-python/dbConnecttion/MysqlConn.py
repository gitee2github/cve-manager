# -*- coding: UTF-8 -*-
"""
Created on 2016年5月7日

@author: xjh
1、执行带参数的ＳＱＬ时，请先用sql语句指定需要输入的条件列表，然后再用tuple/list进行条件批配
２、在格式ＳＱＬ中不需要使用引号指定数据类型，系统会根据输入参数自动识别
３、在输入的值中不需要使用转意函数，系统会自动处理
"""
import MySQLdb
from MySQLdb.cursors import DictCursor
from DBUtils.PooledDB import PooledDB
from dbConnecttion import Config

class Mysql(object):
    #连接池对象
    __pool=None
    def __init__(self):
        self.__conn=Mysql.__getConn()
        self.__cursor=self.__conn.cursor()

    @staticmethod
    def __getConn():
        """
        @summary:静态方法，从连接池中取出连接
        @return MySQLdb.connection
        """
        if Mysql.__pool is None:
            __pool=PooledDB(creator=MySQLdb,mincached=1,maxcached=20,host=Config.DBHOST,port=Config.DBPORT,user=Config.DBUSER,
                            passwd=Config.DBPWD,db=Config.DBNAME,use_unicode=False,charset=Config.DBCHAR,cursorclass=DictCursor)
        return __pool.connection()
    def getOne(self,sql,param=None):
        """
       @summary: 执行查询，并取出第一条
       @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来
       @param param: 可选参数，条件列表值（元组/列表）
       @return: result list/boolean 查询到的结果集
       """
        if param is None:
            count=self.__cursor.execute(sql)
        else:
            count=self.__cursor.execute(sql,param)
        if count>0:
            result=self.__cursor.fetchone()
        else:
            result=False
        return result

    def getMany(self, sql,  param=None):
        """
        @summary: 执行查询，并取出num条结果
        @param sql:查询ＳＱＬ，如果有查询条件，请只指定条件列表，并将条件值使用参数[param]传递进来

        @param param: 可选参数，条件列表值（元组/列表）
        @return: result list/boolean 查询到的结果集
        """
        if param is None:
            count = self.__cursor.execute(sql)
        else:
            count = self.__cursor.execute(sql, param)
        if count > 0:
            result = self.__cursor.fetchall()
        else:
            result = False
        return result
    def insertOne(self,sql,value):
        """
        @summary: 向数据表插入一条记录
        @param sql:要插入的ＳＱＬ格式
        @param value:要插入的记录数据tuple/list
        @return: insertId 受影响的行数
        """
        self.__cursor.execute(sql, value)
        return self.__getInsertId()

    def __getInsertId(self):
        """
        获取当前连接最后一次插入操作生成的id,如果没有则为０
        """
        self.__cursor.execute("SELECT @@IDENTITY AS id")
        result = self.__cursor.fetchall()
        return result[0]['id']
    def __query(self,sql,param=None):
        if param is None:
            count=self.__cursor.execute(sql)
        else:
            count=self.__cursor.execute(sql,param)
        return count
    def update(self, sql, param=None):
        """
        @summary: 更新数据表记录
        @param sql: ＳＱＬ格式及条件，使用(%s,%s)
        @param param: 要更新的  值 tuple/list
        @return: count 受影响的行数
        """
        return self.__query(sql, param)

    def delete(self, sql, param=None):
        """
        @summary: 删除数据表记录
        @param sql: ＳＱＬ格式及条件，使用(%s,%s)
        @param param: 要删除的条件 值 tuple/list
        @return: count 受影响的行数
        """
        return self.__query(sql, param)

    def begin(self):
        """
        @summary: 开启事务
        """
        self.__conn.autocommit(0)

    def end(self, option='commit'):
        """
        @summary: 结束事务
        """
        if option == 'commit':
            self.__conn.commit()
        else:
            self.__conn.rollback()

    def dispose(self, isEnd=1):
        """
        @summary: 提交事务
        """
        if isEnd == 1:
            self.end('commit')
        else:
            self.end('rollback')
    def close(self):
        """
        @summary: 关闭连接
        """
        self.__cursor.close()
        self.__conn.close()