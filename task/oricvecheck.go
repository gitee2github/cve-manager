package task

import (
	"cvevulner/common"
	"cvevulner/models"
	"cvevulner/taskhandler"
	"errors"
	"github.com/astaxie/beego/config"
	"github.com/astaxie/beego/logs"
)

//CheckOriCve Check the CVE of the original data
func CheckOriCve() error {
	defer common.Catchs()
	logs.Info("校验原始cve数据 task start")
	// Query the cve to be processed, 1: add; 2: modify
	BConfig, err := config.NewConfig("ini", "conf/app.conf")
	if err != nil {
		logs.Error("config init error:", err)
		return err
	}
	// The amount of data processed at a time
	prcNum, err := BConfig.Int("crontab::prcNum")
	if err != nil {
		logs.Error("config crontab::prcNum error: invalid value is ", prcNum)
		return errors.New("value is nil")
	}
	// Get the data source of the table
	_, err = taskhandler.CheckCveOriginData(prcNum)
	logs.Info("校验原始cve数据 task end")
	return err
}

// Unlock database table data
func UnLockTable() error {
	defer common.Catchs()
	logs.Info("执行解锁表 task start")
	// unlock center
	models.UnLockUpdateIssueStatus(15, 0, common.GetCurTime())
	// unlock origin cve
	models.UnLockUpdateCveIssueStatus(15, 0, common.GetCurTime())
	// unlock upstream
	models.UnLockUpdateOriginStatus(15, 0, common.GetCurTime())
	// unlock excel
	models.UnLockUpdateOriginExcelStatus(15, 0, common.GetCurTime())
	logs.Info("执行解锁表 task end")
	return nil
}
