package taskhandler

import (
	"cvevulner/models"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/logs"
	"strings"
	"time"
)

// Verify whether the issue on gitee is deleted, and the specific logic is implemented

func ProcIssueIsExists(prnum int, owner, gaussOwner, accessToken, gitGaussToken string) error {
	cveId := int64(0)
	for {
		vc, err := models.QueryAllCveVuln(prnum, cveId)
		if err != nil {
			logs.Error("QueryAllCveVuln, err: ", err)
			break
		}
		if len(vc) == 0 {
			break
		}
		for _, v := range vc {
			cveId = v.CveId
			issueTmp := models.IssueTemplate{CveId: v.CveId, OwnedComponent: v.PackName, CveNum: v.CveNum}
			tempErr := models.GetIssueTemplateByColName(&issueTmp, "CveId", "OwnedComponent", "CveNum")
			if tempErr != nil {
				continue
			}
			if issueTmp.IssueNum != "" && len(issueTmp.IssueNum) > 0 {
				issueErr := error(nil)
				issueData := map[string]interface{}{}
				if v.OrganizationID == 2 {
					issueErr, issueData = GetGiteeIssue(gitGaussToken, gaussOwner, "security", issueTmp.IssueNum)
				} else {
					issueErr, issueData = GetGiteeIssue(accessToken, owner, issueTmp.OwnedComponent, issueTmp.IssueNum)
				}
				if issueErr != nil {
					logs.Info("UpdateIssueTemplate1, issueNum: ", issueTmp.IssueNum, issueTmp.StatusName)
					issueTmp.Status = 6
					issueTmp.StatusName = "deleted"
					issueTmp.DeleteTime = time.Now()
					updateErr := models.UpdateIssueTemplate(&issueTmp, "Status", "StatusName", "DeleteTime")
					if updateErr != nil {
						logs.Error("UpdateIssueTemplate1, err: ", updateErr)
					}
				} else {
					if issueData != nil && issueData["state"] != nil && issueData["state"].(string) != "" {
						state := issueData["state"].(string)
						if state == "待办的" || state == "开启的" ||
							strings.ToLower(state) == "open" {
							issueTmp.StatusName = "open"
							issueTmp.Status = 1
						} else if state == "进行中" || strings.ToLower(state) == "started" ||
							strings.ToLower(state) == "progressing" {
							issueTmp.StatusName = "progressing"
							issueTmp.Status = 2
						} else if state == "已完成" || strings.ToLower(state) == "closed" {
							issueTmp.StatusName = "closed"
							issueTmp.IssueLabel = beego.AppConfig.String("labelFixed")
							issueTmp.Status = 3
						} else if state == "已拒绝" || strings.ToLower(state) == "rejected" {
							issueTmp.StatusName = "rejected"
							issueTmp.Status = 4
						} else if state == "已挂起" || strings.ToLower(state) == "suspended" {
							issueTmp.StatusName = "suspended"
							issueTmp.Status = 5
						} else {
							issueTmp.StatusName = state
						}
						logs.Info("UpdateIssueTemplate2, issueNum: ", issueTmp.IssueNum, issueTmp.StatusName)
						updateErr := models.UpdateIssueTemplate(&issueTmp, "Status", "StatusName", "IssueLabel")
						if updateErr != nil {
							logs.Error("UpdateIssueTemplate2, err: ", updateErr)
						}
					}
				}
			}
		}
	}
	return nil
}
