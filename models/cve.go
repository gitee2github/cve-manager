package models

import (
	"cvevulner/common"
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/orm"
)

func QueryOriginCve(days string, prcnum int) ([]OriginUpstream, int64, error) {
	o := orm.NewOrm()
	var os []OriginUpstream
	num, err := o.Raw("select cve_id,cve_un_ids,cve_num, update_type,cve_packname," +
		"git_packname,cve_title,affect_porduct,cnnvd_id,cnvd_id,published_date,vul_status,cve_status,version"+
		" from cve_origin_upstream where update_time >= ? and cve_status in (?, ?) and is_exit = ? "+
		"order by cve_id asc limit ?", days, 0, 1, 1, prcnum).QueryRows(&os)
	if err == nil && num > 0 {
		logs.Info("cve_origin_upstream 查询结果： ", num)
	} else {
		logs.Info("当前无新增或者更新的cve, cur_time:", common.GetCurTime(), "err: ", err)
	}
	return os, num, err
}


func QueryCveDesc(cveId int64) (OriginUpstreamDesc, bool){
	o := orm.NewOrm()
	var cveDesc OriginUpstreamDesc
	err := o.Raw("select * from cve_origin_upstream_desc where cve_id = ?", cveId).QueryRow(&cveDesc)
	if err != nil {
		logs.Error(cveId, "cve_origin_upstream_desc cve描述查询不到")
		return cveDesc,false
	} else {
		return cveDesc,true
	}
}

func QueryCveImpact(cveId int64) (OriginUpstreamImpact, bool){
	o := orm.NewOrm()
	var cveImpact OriginUpstreamImpact
	err := o.Raw("select * from cve_origin_upstream_impact where cve_id = ?", cveId).QueryRow(&cveImpact)
	if err != nil {
		logs.Error(cveId, "cve_origin_upstream_impact cve impact查询不到")
		return cveImpact,false
	} else {
		return cveImpact,true
	}
}

func QueryCveScore(impactId int64, typex string) (OriginUpstreamImpactScore, bool){
	o := orm.NewOrm()
	var cveScore OriginUpstreamImpactScore
	if typex == "v3" {
		err := o.Raw("select * from cve_origin_upstream_impact_score where " +
			"impact_id = ? and base_met_v3=? and cvss_v3=?", impactId, 1, 1).QueryRow(&cveScore)
		if err != nil {
			logs.Error(impactId, "cve_origin_upstream_impact_score cve score查询不到")
			return cveScore,false
		} else {
			return cveScore,true
		}
	} else {
		err := o.Raw("select * from cve_origin_upstream_impact_score where " +
			"impact_id = ? and base_met_v2=? and cvss_v2=?", impactId, 1, 1).QueryRow(&cveScore)
		if err != nil {
			logs.Error(impactId, "cve_origin_upstream_impact_score cve score查询不到")
			return cveScore,false
		} else {
			return cveScore,true
		}
	}

}

func QueryCveCvssV3(scoreId int64) (OriginUpstreamImpactScoreV3, bool){
	o := orm.NewOrm()
	var cveScoreV3 OriginUpstreamImpactScoreV3
	err := o.Raw("select * from cve_origin_upstream_impact_score_v3 where score_id = ?", scoreId).QueryRow(&cveScoreV3)
	if err != nil {
		logs.Error(scoreId, "cve_origin_upstream_impact_score_v3 cve cvssv3 查询不到")
		return cveScoreV3,false
	} else {
		return cveScoreV3,true
	}
}

func QueryCveByNum(cvenum string) (VulnCenter, bool){
	o := orm.NewOrm()
	var cve VulnCenter
	err := o.Raw("select * from cve_vuln_center where cve_num = ?", cvenum).QueryRow(&cve)
	if err != nil {
		logs.Error(cvenum, "cve_vuln_center 查询不到")
		return cve,false
	} else {
		return cve,true
	}
}

func QueryScoreByCveId(CveId int64) (Score, bool){
	o := orm.NewOrm()
	var score Score
	err := o.Raw("select * from cve_score where cve_id = ?", CveId).QueryRow(&score)
	if err != nil {
		logs.Error(CveId, "cve_score 查询不到")
		return score,false
	} else {
		return score,true
	}
}

func QueryOpenEulerSAByCveId(CveId int64) (OpenEulerSA, bool){
	o := orm.NewOrm()
	op := OpenEulerSA{CveId: CveId}
	err := o.Read(&op, "CveId")
	if err == orm.ErrNoRows {
		logs.Error(CveId, "cve_open_euler_s_a 查询不到")
		return op,false
	} else if err == orm.ErrMissPK {
		logs.Error(CveId, "cve_open_euler_s_a pk 查询不到")
		return op,false
	} else {
		return op,true
	}
}

func QuerySecNoticeByCveId(CveId int64) (SecurityNotice, bool){
	o := orm.NewOrm()
	var secNotice SecurityNotice
	err := o.Raw("select * from cve_security_notice where cve_id = ?", CveId).QueryRow(&secNotice)
	if err != nil {
		logs.Error(CveId, "cve_security_notice 查询不到")
		return secNotice,false
	} else {
		return secNotice,true
	}
}

func CreateSecurityNotice(sec *SecurityNotice) (SecId int64, err error){
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(sec); err == nil {
			logs.Info("insert cve_security_notice success, num:, cveNum", num, sec.CveNum)
		}else {
			logs.Error("insert cve_security_notice failed, cveNum:", sec.CveNum)
			o.Rollback()
			return 0, err
		}
		SecId = sec.SecId
		o.Commit()
	} else {
		logs.Error("事务创建失败，cveNum:", sec.CveNum)
		return 0, errs
	}
	return SecId, nil
}

func CreateScore(score *Score) (Id int64, err error){
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(score); err == nil {
			logs.Info("insert cve_score success, num:, cveNum:", num, score.CveNum)
		} else {
			logs.Error("insert cve_score failed, score:", score, "err:", err)
			o.Rollback()
			return 0, err
		}
		Id = score.Id
		o.Commit()
	} else {
		logs.Error("事务创建失败，cveNum:", score.CveNum)
		return 0, errs
	}
	return Id, nil
}

func CreateOpenEulerSA(op *OpenEulerSA) (OpenId int64, err error){
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(op); err == nil {
			logs.Info("insert cve_open_euler_s_a success, num:, ", num, "CveId:", op.CveId)
		} else {
			logs.Error("insert cve_open_euler_s_a failed, CveId:", op.CveId, "err:", err)
			o.Rollback()
			return 0, err
		}
		OpenId = op.OpenId
		o.Commit()
	} else {
		logs.Error("事务创建失败，cveId:", op.CveId)
		return 0, errs
	}
	return OpenId, nil
}

func CreateScoreRecord(sc *ScoreRecord) (scoreId int64, err error){
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(sc); err == nil {
			logs.Info("insert cve_score_record success, num:, ", num, "CveId:", sc.CveId)
		} else {
			logs.Error("insert cve_score_record failed, CveId:", sc.CveId, "err:", err)
			o.Rollback()
			return 0, err
		}
		scoreId = sc.Id
		o.Commit()
	} else {
		logs.Error("事务创建失败，cveId:", sc.CveId)
		return 0, errs
	}
	return scoreId, nil
}

func CreateCveRelat(cve *VulnCenter, sec *SecurityNotice, score * Score, op *OpenEulerSA, sc *ScoreRecord) (cveid int64, err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var num int64
		if num, err = o.Insert(cve); err == nil {
			logs.Info("insert cve_vuln_center success, num:, cveNum:", num, cve.CveNum)
		} else {
			logs.Error("insert cve_vuln_center failed, CveNum:", cve.CveNum)
			o.Rollback()
			return 0, err
		}
		sec.CveId = num
		cveid = num
		op.CveId = cveid
		if num, err = o.Insert(op); err == nil {
			logs.Info("insert cve_open_euler_s_a success, num:, cveNum:", num, cve.CveNum)
		} else {
			logs.Error("insert cve_open_euler_s_a failed, CveNum:", cve.CveNum)
			o.Rollback()
			return 0, err
		}
		sec.OpenId = num
		score.OpenId = num
		if num, err = o.Insert(sec); err == nil {
			logs.Info("insert cve_security_notice success, num:, cveNum", num, cve.CveNum)
		}else {
			logs.Error("insert cve_security_notice failed, cveNum:", cve.CveNum)
			o.Rollback()
			return 0, err
		}
		score.CveId = cveid
		if num, err = o.Insert(score); err == nil {
			logs.Info("insert cve_score success, num:, cveNum:", num, cve.CveNum)
		} else {
			logs.Error("insert cve_score failed, CveNum:", cve.CveNum)
			o.Rollback()
			return 0, err
		}
		sc.CveId = cveid
		if num, err = o.Insert(sc); err == nil {
			logs.Info("insert cve_score_record, num:, CveId:", num, cve.CveId)
		} else {
			logs.Error("insert cve_score_record failed, CveId:", cve.CveId)
			o.Rollback()
			return 0, err
		}
		o.Commit()
	} else {
		logs.Error("事务创建失败，CveId:", cve.CveId)
		return 0, errs
	}
	return cveid, nil
}

func UpdateCveRelat(cve *VulnCenter, sec *SecurityNotice, score * Score) (err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		var cv VulnCenter
		err := o.Raw("select cve_id from cve_vuln_center where cve_id = ?", cve.CveId).QueryRow(&cv)
		if err == nil {
			var num int64
			cve.CveId = cv.CveId
			if num, err = o.Update(cve); err == nil {
				logs.Info("update cve_vuln_center success, num:, cveNum", num, cve.CveNum)
			}else {
				logs.Error("update cve_vuln_center failed, CveId:", cve.CveId)
				o.Rollback()
				return err
			}
		} else {
			logs.Error("update cve_security_notice failed, CveId:", cve.CveId)
			o.Rollback()
			return err
		}
		var se SecurityNotice
		err = o.Raw("select sec_id from cve_security_notice where cve_id = ?", cve.CveId).QueryRow(&se)
		if err == nil {
			var num int64
			sec.SecId = se.SecId
			if num, err = o.Update(sec); err == nil {
				logs.Info("update cve_security_notice success, num:, cve.CveId", num, cve.CveId)
			} else {
				logs.Error("update cve_security_notice failed, CveId:", cve.CveId)
				o.Rollback()
				return err
			}
		}else {
			logs.Error("update cve_security_notice failed, CveId:", cve.CveId)
			o.Rollback()
			return err
		}
		var sc Score
		err = o.Raw("select id from cve_score where cve_id = ?", cve.CveId).QueryRow(&sc)
		if err == nil {
			var num int64
			score.Id = sc.Id
			if num, err = o.Update(score); err == nil {
				logs.Info("update cve_score success, num:, cve.CveId:", num, cve.CveId)
			} else {
				logs.Error("update cve_score failed, CveId:", cve.CveId)
				o.Rollback()
				return err
			}
		}else {
			logs.Error("update cve_score failed, CveId:", cve.CveId)
			o.Rollback()
			return err
		}
	}else {
		logs.Error("事务创建失败，CveId:", cve.CveId)
		return errs
	}
	o.Commit()
	return nil
}

func UpdateCveRelat1(cve *VulnCenter, sec *SecurityNotice) (err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		v := VulnCenter{CveId: cve.CveId}
		if err = o.Read(&v, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(cve); err == nil {
				logs.Info("update cve_vuln_center success, num:, cveNum", num, cve.CveNum)
			}else {
				logs.Error("update cve_vuln_center failed, CveId:", cve.CveId)
				o.Rollback()
				return err
			}
		} else {
			logs.Error("update cve_security_notice failed, CveId:", cve.CveId)
			o.Rollback()
			return err
		}
		se := SecurityNotice{CveId: cve.CveId}
		if err = o.Read(&se, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(sec); err == nil {
				logs.Info("update cve_security_notice success, num:, cve.CveId:", num, cve.CveId)
			} else {
				logs.Error("update cve_security_notice failed, CveId:", cve.CveId)
				o.Rollback()
				return err
			}
		}else {
			logs.Error("update cve_security_notice failed, CveId:", cve.CveId)
			o.Rollback()
			return err
		}
	}else {
		logs.Error("事务创建失败，CveId:", cve.CveId)
		return errs
	}
	o.Commit()
	return nil
}

func UpdateCveRelat2(cve *VulnCenter, score * Score) (err error) {
	o := orm.NewOrm()
	errs := o.Begin()
	if errs == nil {
		v := VulnCenter{CveId: cve.CveId}
		if err = o.Read(&v, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(cve); err == nil {
				logs.Info("update cve_vuln_center success, num:, cveNum", num, cve.CveNum)
			}else {
				logs.Error("update cve_vuln_center failed, CveId:", cve.CveId)
				o.Rollback()
				return err
			}
		} else {
			logs.Error("update cve_security_notice failed, CveId:", cve.CveId)
			o.Rollback()
			return err
		}
		sc := Score{CveId: cve.CveId}
		if err = o.Read(&sc, "CveId"); err == nil {
			var num int64
			if num, err = o.Update(score); err == nil {
				logs.Info("update cve_score success, num:, cve.CveId", num, cve.CveId)
			} else {
				logs.Error("update cve_score failed, CveId:", cve.CveId)
				o.Rollback()
				return err
			}
		}else {
			logs.Error("update cve_score failed, CveId:", cve.CveId)
			o.Rollback()
			return err
		}
	}else {
		logs.Error("事务创建失败，CveId:", cve.CveId)
		return errs
	}
	o.Commit()
	return nil
}

func QueryOpenSaLastId() (OpenEulerSA, error){
	o := orm.NewOrm()
	var os OpenEulerSA
	err := o.Raw("select openeuler_id, openeuler_sa_num from cve_open_euler_s_a order by openeuler_id desc limit 1").QueryRow(&os)
	if err == nil {
		logs.Info("OpenEulerSA 查询结果：", os)
	}
	return os, err
}


func UpdateOriginStatus(updatetime, pakName, version string, cveId int64) (bool){
	o := orm.NewOrm()
	res, err := o.Raw("UPDATE cve_origin_upstream SET " +
		"cve_status = ?, update_time = ? where cve_id = ? and git_packname = ? and version = ?", 2, updatetime, cveId, pakName, version).Exec()
	if err == nil {
		num, _ := res.RowsAffected()
		if num > 0 {
			logs.Info("cve_origin_upstream row affected nums: ", num, ",cveId: ", cveId, ",", updatetime, pakName, version)
			return true
		}
		return false
	} else {
		logs.Error("更新失败, cve_origin_upstream, ", ",cveId: ", cveId, ",", updatetime, pakName, version, ", err: ", err)
		return false
	}
}