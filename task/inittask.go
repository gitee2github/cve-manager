package task

import (
	"github.com/astaxie/beego/config"
	"github.com/astaxie/beego/logs"
	"github.com/astaxie/beego/toolbox"
)

//CheckOriCveTask Verify the original cve data
func CheckOriCveTask(oriCveCheck string) {
	logs.Info("校验原始cve数据 task start")
	CheckTask := toolbox.NewTask("CheckOriCve", oriCveCheck, CheckOriCve)
	toolbox.AddTask("CheckOriCve", CheckTask)
	logs.Info("校验原始cve数据 task end")
}

//InitYamlTask Get yaml data source
func InitYamlTask(getYaml string) {
	logs.Info("获取yaml数据源 task start")
	YamlTask := toolbox.NewTask("GetYamlData", getYaml, GetYamlData)
	toolbox.AddTask("GetYamlData", YamlTask)
	logs.Info("获取yaml数据源 task end")
}

//InitCveTask Generate cve original data into cve library
func InitCveTask(getCve string) {
	logs.Info("将cve原始数据生成cve库 task start")
	CveTask := toolbox.NewTask("ParamsCveOriginData", getCve, ParamsCveOriginData)
	toolbox.AddTask("ParamsCveOriginData", CveTask)
	logs.Info("将cve原始数据生成cve库 task end")
}

// InitIssueTask Get the created issue data source
func InitIssueTask(getIssue string) {
	logs.Info("获取已经创建的issue数据源 task start")
	issueTask := toolbox.NewTask("GetIssueData", getIssue, GetIssueData)
	toolbox.AddTask("GetIssueData", issueTask)
	logs.Info("获取已经创建的issue数据源 task end")
}

// InitIssueToken Execute the token acquisition task to start
func InitIssueToken(issueOath string) {
	logs.Info("执行获取token task start")
	TokenTask := toolbox.NewTask("GetGiteeToken", issueOath, GetGiteeToken)
	toolbox.AddTask("GetGiteeToken", TokenTask)
	logs.Info("执行获取token task end")
}

// CreatTask  Execute the create issue task to start
func CreatTask(createIssue string) {
	logs.Info("执行创建issue task start")
	cIssueTask := toolbox.NewTask("CreateIssue", createIssue, CreateIssue)
	toolbox.AddTask("CreateIssue", cIssueTask)
	logs.Info("执行创建issue task end")
}

// unlock table
func UnlockTask(unLockTable string) {
	logs.Info("执行解锁表 task start")
	cUnLockTable := toolbox.NewTask("UnLockTable", unLockTable, UnLockTable)
	toolbox.AddTask("UnLockTable", cUnLockTable)
	logs.Info("执行解锁表 task end")
}

// Handling hook events
func ProcHookTask(prochook string) {
	logs.Info("执行处理Hook事件 task start")
	cProchook := toolbox.NewTask("ProcHookEvent", prochook, ProcHookEvent)
	toolbox.AddTask("ProcHookEvent", cProchook)
	logs.Info("执行处理Hook事件 task end")
}

//GenSAExcelTask Execute issue to generate excel task start
func GenSAExcelTask(genExcel string) {
	logs.Info("执行issue生成excel task start")
	genExcelTask := toolbox.NewTask("GenExcelData", genExcel, GenExcelData)
	toolbox.AddTask("GenExcelData", genExcelTask)
	logs.Info("执行issue生成excel task end")
}

// Handling abnormal cve data
func AbnormalCveTask(exceptcve string) {
	logs.Info("创建处理异常cve任务 task start")
	procabnTask := toolbox.NewTask("AbnormalCve", exceptcve, ProcAbnCve)
	toolbox.AddTask("AbnormalCve", procabnTask)
	logs.Info("创建处理异常cve任务 task end")
}

// Generate SA number
func GenerateSaNumberTask(genSa string) {
	logs.Info("生成SA编号 task start")
	proSaTask := toolbox.NewTask("GenerateSaNumber", genSa, ProcSaNumber)
	toolbox.AddTask("GenerateSaNumber", proSaTask)
	logs.Info("生成SA编号 task end")
}

// issue statistics mailing list
func IssueStstisticsTask(issueStatistic string) {
	logs.Info("issue统计 task start")
	iStTask := toolbox.NewTask("IssueStatistics", issueStatistic, IssueStatistics)
	toolbox.AddTask("IssueStatistics", iStTask)
	logs.Info("issue统计 task end")
}

// Cve data email task with low credibility
func cveLowCredTask(cvecredit string) {
	logs.Info("cve 可信度 task start")
	iStTask := toolbox.NewTask("ProcCveLowCred", cvecredit, ProcCveLowCred)
	toolbox.AddTask("ProcCveLowCred", iStTask)
	logs.Info("cve 可信度 task end")
}

// Print logs to the console and delete redundant logs
func PrintLogTask(printLog string) {
	logs.Info("创建日志任务 task start")
	printLogTask := toolbox.NewTask("ProcLogData", printLog, ProcLogData)
	toolbox.AddTask("ProcLogData", printLogTask)
	logs.Info("创建日志任务 task end")
}

// start task
func StartTask() {
	toolbox.StartTask()
}

func StopTask() {
	toolbox.StopTask()
}

//InitTask Timing task initialization
func InitTask() bool {
	BConfig, err := config.NewConfig("ini", "conf/app.conf")
	if err != nil {
		logs.Error("config init error: file:conf/app.conf: ", err)
		return false
	}
	// Get the original yaml data
	ymalflag, errxs := BConfig.Int("crontab::ymalflag")
	if ymalflag == 1 && errxs == nil {
		getymal := BConfig.String("crontab::getymal")
		InitYamlTask(getymal)
	}
	// Verify the original cve data
	oricveflag, errxs := BConfig.Int("crontab::oricveflag")
	if oricveflag == 1 && errxs == nil {
		oricvecheck := BConfig.String("crontab::oricvecheck")
		CheckOriCveTask(oricvecheck)
	}
	// Refresh gittoken regularly
	gittokenflag, errx := BConfig.Int("crontab::gittokenflag")
	if gittokenflag == 1 && errx == nil {
		issueoath := BConfig.String("crontab::issueoath")
		// Get token from environment variable
		gitToken := BConfig.String("gitee::git_token")
		if gitToken == "xxx" {
			InitIssueToken(issueoath)
		}
	}
	// Get the created issue
	getissueflag, errxs := BConfig.Int("crontab::getissueflag")
	if getissueflag == 1 && errxs == nil {
		getissue := BConfig.String("crontab::getissue")
		InitIssueTask(getissue)
	}
	// Generate cve vulnerability library
	cveflag, errxs := BConfig.Int("crontab::cveflag")
	if cveflag == 1 && errxs == nil {
		getcve := BConfig.String("crontab::getcve")
		InitCveTask(getcve)
	}
	// Regularly output logs to the console
	printLogFlag, errxs := BConfig.Int("crontab::printlogflag")
	if printLogFlag == 1 && errxs == nil {
		printLog := BConfig.String("crontab::printlog")
		PrintLogTask(printLog)
	}
	// Add issue
	taskFlag, errx := BConfig.Int("crontab::issueflag")
	if taskFlag == 1 && errx == nil {
		createIssue := BConfig.String("crontab::createissue")
		CreatTask(createIssue)
	} else {
		logs.Info("createissue no task")
	}
	// Generate excel data from issue
	genexcelflag, errx := BConfig.Int("crontab::genexcelflag")
	if genexcelflag == 1 && errx == nil {
		genExcel := BConfig.String("crontab::genexcel")
		GenSAExcelTask(genExcel)
	} else {
		logs.Info("genexcel no task")
	}
	// unlock mysql
	unlockflag, errx := BConfig.Int("crontab::unlockflag")
	if unlockflag == 1 && errx == nil {
		unlock := BConfig.String("crontab::unlock")
		UnlockTask(unlock)
	} else {
		logs.Info("unlock no task")
	}
	// Handling hook events
	hookflag, errx := BConfig.Int("crontab::hookflag")
	if hookflag == 1 && errx == nil {
		prochook := BConfig.String("crontab::prochook")
		ProcHookTask(prochook)
	} else {
		logs.Info("prochook no task")
	}
	// Handling abnormal cve data
	exceptflag, errx := BConfig.Int("crontab::exceptflag")
	if exceptflag == 1 && errx == nil {
		exceptcve := BConfig.String("crontab::exceptcve")
		AbnormalCveTask(exceptcve)
	} else {
		logs.Info("exceptcve no task")
	}
	// Generate SA number
	gensaflag, errx := BConfig.Int("crontab::gensaflag")
	if gensaflag == 1 && errx == nil {
		gensa := BConfig.String("crontab::gensa")
		GenerateSaNumberTask(gensa)
	} else {
		logs.Info("Generate SA task")
	}
	// issue statistics mailing list
	issuestatisticflag, errx := BConfig.Int("crontab::issuestatisticflag")
	if issuestatisticflag == 1 && errx == nil {
		issueStatistic := BConfig.String("crontab::issuestatistic")
		IssueStstisticsTask(issueStatistic)
	} else {
		logs.Info("issue statistics task")
	}
	// Cve data email task with low credibility
	cvecredflag, errx := BConfig.Int("crontab::cvecredflag")
	if cvecredflag == 1 && errx == nil {
		cvecredit := BConfig.String("crontab::cvecredit")
		cveLowCredTask(cvecredit)
	} else {
		logs.Info("cve credibility task")
	}
	return true
}
