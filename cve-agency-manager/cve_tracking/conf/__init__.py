#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import configparser
import os

from conf.setting import DefaultConfig
from exception import ConfigNotFoundError

CONFIG_FILE = os.path.join(os.path.dirname(
    os.path.abspath(os.path.dirname(__file__))), 'config.ini')


class Config:
    """
    Configuration item load and get value
    """

    def __init__(self):
        self._setattr_default()
        self._setattr_customize()

    def _setattr_default(self):
        """
        Set default configuration items and their values
        :return: self
        """
        for attr in dir(DefaultConfig):
            if not str(attr).startswith('_'):
                setattr(self, attr, getattr(DefaultConfig, attr))

    def _setattr_customize(self):
        """
        Set customize configuration items and their values
        :return: self
        """
        if not os.path.exists(CONFIG_FILE):
            raise ConfigNotFoundError(CONFIG_FILE)

        conf_parser = configparser.ConfigParser()
        conf_parser.read(CONFIG_FILE)
        for section in conf_parser.sections():
            for key_value in conf_parser.items(section):
                if key_value[1]:
                    setattr(self, key_value[0].upper(), key_value[1])

    def __getattr__(self, item):
        """
        When the configuration cannot be found, reload the configuration file
        :param item: config key
        :return: value
        """
        self._setattr_default()
        self._setattr_customize()
        try:
            return self.__dict__[item]
        except KeyError:
            return None


CONFIG = Config()
